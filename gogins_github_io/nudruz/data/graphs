gap> cga4 := CayleyGraph(AlternatingGroup(4));
rec( isGraph := true, order := 12, 
  group := Group([ (1,5,7)(2,4,8)(3,6,9)(10,11,12), 
      (1,2,3)(4,7,10)(5,9,11)(6,8,12) ]), 
  schreierVector := [ -1, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 1 ], 
  adjacencies := [ [ 2, 3, 5, 7 ] ], representatives := [ 1 ], 
  names := [ (), (2,3,4), (2,4,3), (1,2)(3,4), (1,2,3), (1,2,4), (1,3,2), 
      (1,3,4), (1,3)(2,4), (1,4,2), (1,4,3), (1,4)(2,3) ], isSimple := true )
gap> IsConnectedGraph(cga4);
true
gap> IsLoopy(cga4);
false
gap> DirectedEdges(cga4);
[ [ 1, 2 ], [ 1, 3 ], [ 1, 5 ], [ 1, 7 ], [ 2, 1 ], [ 2, 3 ], [ 2, 9 ], 
  [ 2, 10 ], [ 3, 1 ], [ 3, 2 ], [ 3, 4 ], [ 3, 11 ], [ 4, 3 ], [ 4, 5 ], 
  [ 4, 6 ], [ 4, 11 ], [ 5, 1 ], [ 5, 4 ], [ 5, 6 ], [ 5, 7 ], [ 6, 4 ], 
  [ 6, 5 ], [ 6, 8 ], [ 6, 12 ], [ 7, 1 ], [ 7, 5 ], [ 7, 8 ], [ 7, 9 ], 
  [ 8, 6 ], [ 8, 7 ], [ 8, 9 ], [ 8, 12 ], [ 9, 2 ], [ 9, 7 ], [ 9, 8 ], 
  [ 9, 10 ], [ 10, 2 ], [ 10, 9 ], [ 10, 11 ], [ 10, 12 ], [ 11, 3 ], 
  [ 11, 4 ], [ 11, 10 ], [ 11, 12 ], [ 12, 6 ], [ 12, 8 ], [ 12, 10 ], 
  [ 12, 11 ] ]
gap> IsBipartite(cga4);
false
gap> IsCompleteGraph(cga4);
false
gap> IsConnectedGraph(cga4);
true
gap> DirectedEdges(CayleyGraph(DihedralGroup(4)));
[ [ 1, 2 ], [ 1, 3 ], [ 2, 1 ], [ 2, 4 ], [ 3, 1 ], [ 3, 4 ], [ 4, 2 ], 
  [ 4, 3 ] ]
gap> CollapsedAdjacencyMat(cga4);
[ [ 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0 ], 
  [ 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0 ], 
  [ 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0 ], 
  [ 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0 ], 
  [ 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0 ], 
  [ 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1 ], 
  [ 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0 ], 
  [ 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1 ], 
  [ 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0 ], 
  [ 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1 ], 
  [ 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1 ], 
  [ 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0 ] ]
gap> ConnectedComponents(cga4);
[ [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 ] ]
gap> t83 := TransitiveGroup(8,3);
E(8)=2[x]2[x]2
gap> Size(t83);
8
gap> cgt83 := CayletGraph(t83);
Variable: 'CayletGraph' must have a value

gap> cgt83 := CayleyGraph(t83);
gap> IsConnectedGraph(t83); IsLoopy(t83); 
gap> CollapsedAdjacencyMat(cgt83);
[ [ 0, 0, 1, 0, 1, 0, 0, 1 ], [ 0, 0, 1, 0, 0, 1, 0, 1 ], 
  [ 1, 1, 0, 0, 0, 0, 1, 0 ], [ 0, 0, 0, 0, 1, 1, 0, 1 ], 
  [ 1, 0, 0, 1, 0, 0, 1, 0 ], [ 0, 1, 0, 1, 0, 0, 1, 0 ], 
  [ 0, 0, 1, 0, 1, 1, 0, 0 ], [ 1, 1, 0, 1, 0, 0, 0, 0 ] ]
gap> DirectedEdges(cgt83);
[ [ 1, 3 ], [ 1, 5 ], [ 1, 8 ], [ 2, 3 ], [ 2, 6 ], [ 2, 8 ], [ 3, 1 ], 
  [ 3, 2 ], [ 3, 7 ], [ 4, 5 ], [ 4, 6 ], [ 4, 8 ], [ 5, 1 ], [ 5, 4 ], 
  [ 5, 7 ], [ 6, 2 ], [ 6, 4 ], [ 6, 7 ], [ 7, 3 ], [ 7, 5 ], [ 7, 6 ], 
  [ 8, 1 ], [ 8, 2 ], [ 8, 4 ] ]
gap> t61 := TransitiveGroup(6,1);
C(6) = 6 = 3[x]2
gap> IsPrimitive(t61);
false
gap> DirectedEdges(CayleyGraph(t61)));
Syntax error: ; expected
DirectedEdges(CayleyGraph(t61)));
                               ^
gap> DirectedEdges(CayleyGraph(t61));
[ [ 1, 2 ], [ 1, 6 ], [ 2, 1 ], [ 2, 3 ], [ 3, 2 ], [ 3, 4 ], [ 4, 3 ], 
  [ 4, 5 ], [ 5, 4 ], [ 5, 6 ], [ 6, 1 ], [ 6, 5 ] ]
gap> DirectedEdges(CayleyGraph(TransitiveGroup(6,2))));
Syntax error: ; expected
DirectedEdges(CayleyGraph(TransitiveGroup(6,2))));
                                                ^
gap> DirectedEdges(CayleyGraph(TransitiveGroup(6,2)));
[ [ 1, 3 ], [ 1, 4 ], [ 1, 5 ], [ 2, 4 ], [ 2, 5 ], [ 2, 6 ], [ 3, 1 ], 
  [ 3, 5 ], [ 3, 6 ], [ 4, 1 ], [ 4, 2 ], [ 4, 6 ], [ 5, 1 ], [ 5, 2 ], 
  [ 5, 3 ], [ 6, 2 ], [ 6, 3 ], [ 6, 4 ] ]
gap> DirectedEdges(CayleyGraph(TransitiveGroup(6,3)));
[ [ 1, 4 ], [ 1, 7 ], [ 1, 11 ], [ 2, 3 ], [ 2, 8 ], [ 2, 12 ], [ 3, 2 ], 
  [ 3, 5 ], [ 3, 10 ], [ 4, 1 ], [ 4, 6 ], [ 4, 9 ], [ 5, 3 ], [ 5, 7 ], 
  [ 5, 11 ], [ 6, 4 ], [ 6, 8 ], [ 6, 12 ], [ 7, 1 ], [ 7, 5 ], [ 7, 9 ], 
  [ 8, 2 ], [ 8, 6 ], [ 8, 10 ], [ 9, 4 ], [ 9, 7 ], [ 9, 12 ], [ 10, 3 ], 
  [ 10, 8 ], [ 10, 11 ], [ 11, 1 ], [ 11, 5 ], [ 11, 10 ], [ 12, 2 ], 
  [ 12, 6 ], [ 12, 9 ] ]
gap> NrSmallGroups(12);
5
gap> SmallGroup(12,1);
<pc group of size 12 with 3 generators>
gap> DirectedEdges(CayleyGraph(SmallGroup(12,1)));
[ [ 1, 2 ], [ 1, 3 ], [ 1, 4 ], [ 1, 5 ], [ 1, 8 ], [ 2, 1 ], [ 2, 3 ], 
  [ 2, 5 ], [ 2, 6 ], [ 2, 10 ], [ 3, 1 ], [ 3, 2 ], [ 3, 5 ], [ 3, 7 ], 
  [ 3, 11 ], [ 4, 1 ], [ 4, 6 ], [ 4, 7 ], [ 4, 8 ], [ 4, 9 ], [ 5, 1 ], 
  [ 5, 2 ], [ 5, 3 ], [ 5, 9 ], [ 5, 12 ], [ 6, 2 ], [ 6, 4 ], [ 6, 7 ], 
  [ 6, 9 ], [ 6, 10 ], [ 7, 3 ], [ 7, 4 ], [ 7, 6 ], [ 7, 9 ], [ 7, 11 ], 
  [ 8, 1 ], [ 8, 4 ], [ 8, 10 ], [ 8, 11 ], [ 8, 12 ], [ 9, 4 ], [ 9, 5 ], 
  [ 9, 6 ], [ 9, 7 ], [ 9, 12 ], [ 10, 2 ], [ 10, 6 ], [ 10, 8 ], [ 10, 11 ], 
  [ 10, 12 ], [ 11, 3 ], [ 11, 7 ], [ 11, 8 ], [ 11, 10 ], [ 11, 12 ], 
  [ 12, 5 ], [ 12, 8 ], [ 12, 9 ], [ 12, 10 ], [ 12, 11 ] ]
gap> DirectedEdges(CayleyGraph(SmallGroup(12,2)));
[ [ 1, 2 ], [ 1, 3 ], [ 1, 4 ], [ 1, 6 ], [ 1, 7 ], [ 2, 1 ], [ 2, 4 ], 
  [ 2, 5 ], [ 2, 6 ], [ 2, 9 ], [ 3, 1 ], [ 3, 5 ], [ 3, 7 ], [ 3, 8 ], 
  [ 3, 10 ], [ 4, 1 ], [ 4, 2 ], [ 4, 6 ], [ 4, 8 ], [ 4, 11 ], [ 5, 2 ], 
  [ 5, 3 ], [ 5, 8 ], [ 5, 9 ], [ 5, 10 ], [ 6, 1 ], [ 6, 2 ], [ 6, 4 ], 
  [ 6, 10 ], [ 6, 12 ], [ 7, 1 ], [ 7, 3 ], [ 7, 9 ], [ 7, 11 ], [ 7, 12 ], 
  [ 8, 3 ], [ 8, 4 ], [ 8, 5 ], [ 8, 10 ], [ 8, 11 ], [ 9, 2 ], [ 9, 5 ], 
  [ 9, 7 ], [ 9, 11 ], [ 9, 12 ], [ 10, 3 ], [ 10, 5 ], [ 10, 6 ], [ 10, 8 ], 
  [ 10, 12 ], [ 11, 4 ], [ 11, 7 ], [ 11, 8 ], [ 11, 9 ], [ 11, 12 ], 
  [ 12, 6 ], [ 12, 7 ], [ 12, 9 ], [ 12, 10 ], [ 12, 11 ] ]
gap> NrSmallGroups(5);
1
gap> SmallGroup(5,1);
<pc group of size 5 with 1 generators>
gap> NrPerfectGroups(12);
