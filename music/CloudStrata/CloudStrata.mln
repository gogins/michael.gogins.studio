<LmLindenmayerSystemMusic>
<LmAxiom>
a2
</LmAxiom>
<LmIterationCount>
5
</LmIterationCount>
<LmAutoRescale>
true
</LmAutoRescale>
<LmReplacementRules>
a = a ap-.25 n so.348 ap0 n +m2 a1 os.348 ap-.25 n +m3 ap0 n a
a1 = a2 ap-.25 n so.348 ap0 n1 +m2 a os.348 ap-.25 n1 +m3 ap0 n a2
a2 = a1 ap-.25 n1 so.348 ap0 n1 +m2 a1 os.348 ap-.25 n1 +m3 ap0 n1 a1
</LmReplacementRules>
<LmPitchClassTransformations>
</LmPitchClassTransformations>
<CsScoreManager>
<CsFunctions>
f   1  0 4096 10 1 ; Sine wave.
f   2  0 4096 10 1 .2 .08 .07 ; Flute-like.
f   3  0 4096 10 1 .4 .2 .1 .1 .05
f   4  0 512 7 0 1 0 49 .2 90 .6 40 .99 25 .9 45 .5 50 .25 50 .12 50 .06 50 .02 62 0
f   5  0 512 7 0 1 0 49 .2 100 .6 50 .99 150 .2 162 0
f   6  0 512 7 0 1 0 49 .2 200 .5 100 .2 162 0
f   7  0 512 7 0 1 0 79 .5 60 .5 20 .99 120 .4 140 .6 92 0
f   8 .0 513 5 .001 513 1 ; Exponential rise.
f  12  0 512 9 1 .26 0
f  13  0 512 9 1 .3 0
f  23  0 512 9 1 1 0
f  24  0 512 -7 3000 71 3000 168 2300 100 2100 71 2000 102 2000
f  25  0 512 -7 .025 71 .02 102 .025 71 .05 268 .06
f  26  0 512 -7 .25 71 .25 102 .08 .05 339 .05
f  27  0 512 -7 5 71 2.3 102 1.5 237 2.5 102 2.3
f  28  0 512 -7 5 512 6.5
f  30  0 8192 10 1
f  31  0 2048 19 .5 1 270 1
f  32  0 512 -7 -1 150 .1 110 0 252 0
f  33  0 1024 10 .3 0 0 0 .1 .1 .1 .1 .1 .1
f  34  0  8192  9  1 1 90 ; Cosine for Fitch instruments.
f  41  0 8193 10 1  ; Sine wave.
f  42  0 8193 11 1  ; Cosine wave.
f  43  0 8192 -12 20.0  ; Unscaled ln(I(x)) from 0 to 20.0.
f  44  0 4097 10 1 .25 .1 ; Kelley flute.
f  45  0 2049 7 -1 1800 1 249 -1 ; Kelley string.
f  46  0 2049 7 -1 1024 1 1024 -1 ; Kelley harpsichord.
f  47  0 2049 10 1 0 1 0 1 ; Kelley oboe.
f  48  0  10 3 1 0 .25 .3 .76 ; Nelson Chebyshev.
f  49  0  13 1 1 .9 .8 .7 .6 .5 .4 .3 .2 .1 ; Nelson table lookup.
f  50  0 8193 20 2 1 ; Hanning window.
f  51  0 8193 -10  809 14581 2030 990 522 1545 2030 262 61 45 45 64 465  139 19 75 29 42 39 96 86 75 39 45 ; Horner Erhu
f  52  0 8193 -10 1567 910 870  3119 595 151 45  111 123 31 41 127  148 196 124 142 49 22 22 59 74 37 ; Horner Erhu
f  53  0 8193 -10 2411 1158 352 922 854 70 66 152 83 15 69 69 92 91 60 30  42 78 38 41 59 22 ; Horner Erhu
f  54  0 8193 -10 18607 805 771 832 115 166 115 21 66 22 135 165 18 41 85  27 93 23 8 15 23 7 ; Horner Erhu
f  55  0 8193 7  0 819 1.1 819 1.2 820 1.4 819 1.2 819 1.15 820 0 8200 0 ; Horner Erhu
f  61  0 8193 -10  30 37 282 99 29 327 96 77 102 11 45 7 4 3 1 1; Horner Pipa
f  62  0 8193 -10  324 300 144 160 383 847 1311 1121 885 586 125 174 269  100 428 190 563 294 178 236 169 173 75 57 52 57 131 43 134 77 54 51  60 107 51 274 54 30 23 66 20 12 ; Horner Pipa
f  63  0 8193 -10  79 51 133 10 21 20 7 3 11 4 3 2 1 2 1 2 ; Horner Pipa
f  64  0 8193 -10  475 207 545 323 104 1890 1304 1031 350 269 245 180  200 43 45 14 13 8 13 34 16 28 16 3 3 ; Horner Pipa
f  65  0 8193 -10  8 24 10 14 35 30 19 31 16 16 11 6 2 7 8 9 13 11 3 2 3  1 4 2 2 2 1 2 2 1 3 3 1 4 2 3 1; Horner Pipa
f  66  0  13 1 1 .9 .8 .7 .6 .5 .4 .3 .2 .1 ;gen 13 table lookup (was 31)
f  67  0  13 1 1 .9 .8 .7 .6 .7 .8 .9 1 ;gen 13 table lookup (was 32)
f  68  0 8193  20 7 1 2 ; Semi-rectangular Kaiser window.
f  69  0 16384 9 .5 1 0 ; Half-sine window.
f  77  0 4096 10 .28 1 .74 .66 .78 .48 .05 .33 .12 .08 .01 .54 .19 .08 .05 .16 .01 .11 .3 .02 .2 ; Bergeman f1
f  100  0 2048 -17 0 101 575 102 625 103 675 104 725 105 775 106 825 107 875 108 925 109 975 110 1025 111  1075 112 1125  113 1175  114 ; Steinway octave : tablenumber
f  101  0 2048 -17 0 5.5  575      6 625  6.5 675      7 725  7.5 775      8 825  8.5  875     9 925  9.5833333333333  975   10 1025 10.5 1075   11 1125 11.5 1175     12 ; Steinway octave : baseoctave
;f  102  0  0 1 "Steinway102.aif" 0 4 0 ;  5.50
;f  103  0  0 1 "Steinway103.aif" 0 4 0 ;  6.00
;f  104  0  0 1 "Steinway104.aif" 0 4 0 ;  6.50
;f  105  0  0 1 "Steinway105.aif" 0 4 0 ;  7.00
;f  106  0  0 1 "Steinway106.aif" 0 4 0 ;  7.50
;f  107  0  0 1 "Steinway107.aif" 0 4 0 ;  8.00
;f  108  0  0 1 "Steinway108.aif" 0 4 0 ;  8.50
;f  109  0  0 1 "Steinway109.aif" 0 4 0 ;  9.00
;f  110  0  0 1 "Steinway110.aif" 0 4 0 ;  9.50
;f  111  0  0 1 "Steinway111.aif" 0 4 0 ; 10.00
;f  112  0  0 1 "Steinway112.aif" 0 4 0 ; 10.50
;f  113  0  0 1 "Steinway113.aif" 0 4 0 ; 11.00
;f  114  0  0 1 "Steinway114.aif" 0 4 0 ; 11.50
;f  115  0  0 1 "Steinway115.aif" 0 4 0 ; 12.00
f  121  0  4096 10 1
f  122  0  4096 10 .45 .31 .38 .9 .32 .28 0 0 .2 .18 0 0 0 0 .2 .3 .4 .24 .24 .24 .3
f  123  0  4096 10 .86 .9 .32 .2 0 0 0 0 0 0 0 0 0 .3 .5
f  124  0  4096 10 .34 .9 .88 .32 0 .32 0 .32 0 .22 .29 0 .29 0 .29 0 .52 0 .34 0 .49 0 .52
f  125  0  4096 10 .52 0 .86 0 .2 .156 0 .156 0 0 .156 0 .156 0 .28 0 .48 0 .4 0 .7 0 .22
f  126  0  4096 10 .3 .3 .44 .34 .56 .3 .06 .03
f  127  0  4096 10 .28 1 .74 .66 .78 .48 .05 .33 .12 .08 .01 .54 .19 .08 .05 .16 .01 .11 .3 .02 .2
f  128  0  4096 10 .6 .4 1 .22 .09 .24 .02 .06 .05
f  129  0  4096 10 1 .41 .95 .45 .18 0 .05
f  130  0  4096 10 1 1 .1 .2 .156 .02 .02 .02
f  131  0  4096 10 1 0 .5 .1 .6 .3 .5 .3 .1 .01
f  132  0  4096 10 1 .7 .12 .5 .08 0 0 .02 .05 0 0 .03
f  133  0  4096 10 .9 1 .2 .1 .3 .1 0 0 .05
f  134  0  4096 10 .3 .1 .6 .15
f  135  0  4096 10 1 0 0 0 0 0 1 0 0 0 1 0
f  136  0  512 7 0   128 1 128 .7 128 .7 128  0
f  137  0  512 5 .01 128 1 128 .7 128 .7 128 .01
f  138  0  512 7 1   128 .8 128  .6 128  .4  64  .2 64 0
f  139  0  512 5 1   128 .8 128  .4  64  .6  32  .2 32 .4 64 .2 64 .01
f  140  0  512 7 0 128 1 128 .7 128 .5 128 0
f  141  0  512 7 0  64 1 128 .8 64 .6 128 .4 128 0
f  142  0  512 7 0   128 .5 128 1 128 .7 128 0
f  143  0  9 -2 110 146.6 165  293 330 440 586.4 660 880
f  144  0  17 -2 27.5  41.25 55 73.3 82.5 110 146.6 165 220 293 330 440 586.4 660 880 1172.8 1320
f  145  0   8 -2 220 293 330 440 586.4 660 1172.8 1320
f  146  0   5 -2 27.5 36.65 41.25 55 73.3 82.5
f   1  0 4096 10 1 ; Sine wave.
f   2  0 4096 10 1 .2 .08 .07 ; Flute-like.
f   3  0 4096 10 1 .4 .2 .1 .1 .05
f   4  0 512 7 0 1 0 49 .2 90 .6 40 .99 25 .9 45 .5 50 .25 50 .12 50 .06 50 .02 62 0
f   5  0 512 7 0 1 0 49 .2 100 .6 50 .99 150 .2 162 0
f   6  0 512 7 0 1 0 49 .2 200 .5 100 .2 162 0
f   7  0 512 7 0 1 0 79 .5 60 .5 20 .99 120 .4 140 .6 92 0
f   8 .0 513 5 .001 513 1 ; Exponential rise.
f  12  0 512 9 1 .26 0
f  13  0 512 9 1 .3 0
f  23  0 512 9 1 1 0
f  24  0 512 -7 3000 71 3000 168 2300 100 2100 71 2000 102 2000
f  25  0 512 -7 .025 71 .02 102 .025 71 .05 268 .06
f  26  0 512 -7 .25 71 .25 102 .08 .05 339 .05
f  27  0 512 -7 5 71 2.3 102 1.5 237 2.5 102 2.3
f  28  0 512 -7 5 512 6.5
f  30  0 8192 10 1
f  31  0 2048 19 .5 1 270 1
f  32  0 512 -7 -1 150 .1 110 0 252 0
f  33  0 1024 10 .3 0 0 0 .1 .1 .1 .1 .1 .1
f  34  0  8192  9  1 1 90 ; Cosine for Fitch instruments.
f  41  0 8193 10 1  ; Sine wave.
f  42  0 8193 11 1  ; Cosine wave.
f  43  0 8192 -12 20.0  ; Unscaled ln(I(x)) from 0 to 20.0.
f  44  0 4097 10 1 .25 .1 ; Kelley flute.
f  45  0 2049 7 -1 1800 1 249 -1 ; Kelley string.
f  46  0 2049 7 -1 1024 1 1024 -1 ; Kelley harpsichord.
f  47  0 2049 10 1 0 1 0 1 ; Kelley oboe.
f  48  0  10 3 1 0 .25 .3 .76 ; Nelson Chebyshev.
f  49  0  13 1 1 .9 .8 .7 .6 .5 .4 .3 .2 .1 ; Nelson table lookup.
f  50  0 8193 20 2 1 ; Hanning window.
f  51  0 8193 -10  809 14581 2030 990 522 1545 2030 262 61 45 45 64 465  139 19 75 29 42 39 96 86 75 39 45 ; Horner Erhu
f  52  0 8193 -10 1567 910 870  3119 595 151 45  111 123 31 41 127  148 196 124 142 49 22 22 59 74 37 ; Horner Erhu
f  53  0 8193 -10 2411 1158 352 922 854 70 66 152 83 15 69 69 92 91 60 30  42 78 38 41 59 22 ; Horner Erhu
f  54  0 8193 -10 18607 805 771 832 115 166 115 21 66 22 135 165 18 41 85  27 93 23 8 15 23 7 ; Horner Erhu
f  55  0 8193 7  0 819 1.1 819 1.2 820 1.4 819 1.2 819 1.15 820 0 8200 0 ; Horner Erhu
f  61  0 8193 -10  30 37 282 99 29 327 96 77 102 11 45 7 4 3 1 1; Horner Pipa
f  62  0 8193 -10  324 300 144 160 383 847 1311 1121 885 586 125 174 269  100 428 190 563 294 178 236 169 173 75 57 52 57 131 43 134 77 54 51  60 107 51 274 54 30 23 66 20 12 ; Horner Pipa
f  63  0 8193 -10  79 51 133 10 21 20 7 3 11 4 3 2 1 2 1 2 ; Horner Pipa
f  64  0 8193 -10  475 207 545 323 104 1890 1304 1031 350 269 245 180  200 43 45 14 13 8 13 34 16 28 16 3 3 ; Horner Pipa
f  65  0 8193 -10  8 24 10 14 35 30 19 31 16 16 11 6 2 7 8 9 13 11 3 2 3  1 4 2 2 2 1 2 2 1 3 3 1 4 2 3 1; Horner Pipa
f  66  0  13 1 1 .9 .8 .7 .6 .5 .4 .3 .2 .1 ;gen 13 table lookup (was 31)
f  67  0  13 1 1 .9 .8 .7 .6 .7 .8 .9 1 ;gen 13 table lookup (was 32)
f  68  0 8193  20 7 1 2 ; Semi-rectangular Kaiser window.
f  69  0 16384 9 .5 1 0 ; Half-sine window.
f  77  0 4096 10 .28 1 .74 .66 .78 .48 .05 .33 .12 .08 .01 .54 .19 .08 .05 .16 .01 .11 .3 .02 .2 ; Bergeman f1
f  100  0 2048 -17 0 101 575 102 625 103 675 104 725 105 775 106 825 107 875 108 925 109 975 110 1025 111  1075 112 1125  113 1175  114 ; Steinway octave : tablenumber
f  101  0 2048 -17 0 5.5  575      6 625  6.5 675      7 725  7.5 775      8 825  8.5  875     9 925  9.5833333333333  975   10 1025 10.5 1075   11 1125 11.5 1175     12 ; Steinway octave : baseoctave
f  102  0  0 1 "Steinway102.aif" 0 4 0 ;  5.50
f  103  0  0 1 "Steinway103.aif" 0 4 0 ;  6.00
f  104  0  0 1 "Steinway104.aif" 0 4 0 ;  6.50
f  105  0  0 1 "Steinway105.aif" 0 4 0 ;  7.00
f  106  0  0 1 "Steinway106.aif" 0 4 0 ;  7.50
f  107  0  0 1 "Steinway107.aif" 0 4 0 ;  8.00
f  108  0  0 1 "Steinway108.aif" 0 4 0 ;  8.50
f  109  0  0 1 "Steinway109.aif" 0 4 0 ;  9.00
f  110  0  0 1 "Steinway110.aif" 0 4 0 ;  9.50
f  111  0  0 1 "Steinway111.aif" 0 4 0 ; 10.00
f  112  0  0 1 "Steinway112.aif" 0 4 0 ; 10.50
f  113  0  0 1 "Steinway113.aif" 0 4 0 ; 11.00
f  114  0  0 1 "Steinway114.aif" 0 4 0 ; 11.50
f  115  0  0 1 "Steinway115.aif" 0 4 0 ; 12.00
f  121  0  4096 10 1
f  122  0  4096 10 .45 .31 .38 .9 .32 .28 0 0 .2 .18 0 0 0 0 .2 .3 .4 .24 .24 .24 .3
f  123  0  4096 10 .86 .9 .32 .2 0 0 0 0 0 0 0 0 0 .3 .5
f  124  0  4096 10 .34 .9 .88 .32 0 .32 0 .32 0 .22 .29 0 .29 0 .29 0 .52 0 .34 0 .49 0 .52
f  125  0  4096 10 .52 0 .86 0 .2 .156 0 .156 0 0 .156 0 .156 0 .28 0 .48 0 .4 0 .7 0 .22
f  126  0  4096 10 .3 .3 .44 .34 .56 .3 .06 .03
f  127  0  4096 10 .28 1 .74 .66 .78 .48 .05 .33 .12 .08 .01 .54 .19 .08 .05 .16 .01 .11 .3 .02 .2
f  128  0  4096 10 .6 .4 1 .22 .09 .24 .02 .06 .05
f  129  0  4096 10 1 .41 .95 .45 .18 0 .05
f  130  0  4096 10 1 1 .1 .2 .156 .02 .02 .02
f  131  0  4096 10 1 0 .5 .1 .6 .3 .5 .3 .1 .01
f  132  0  4096 10 1 .7 .12 .5 .08 0 0 .02 .05 0 0 .03
f  133  0  4096 10 .9 1 .2 .1 .3 .1 0 0 .05
f  134  0  4096 10 .3 .1 .6 .15
f  135  0  4096 10 1 0 0 0 0 0 1 0 0 0 1 0
f  136  0  512 7 0   128 1 128 .7 128 .7 128  0
f  137  0  512 5 .01 128 1 128 .7 128 .7 128 .01
f  138  0  512 7 1   128 .8 128  .6 128  .4  64  .2 64 0
f  139  0  512 5 1   128 .8 128  .4  64  .6  32  .2 32 .4 64 .2 64 .01
f  140  0  512 7 0 128 1 128 .7 128 .5 128 0
f  141  0  512 7 0  64 1 128 .8 64 .6 128 .4 128 0
f  142  0  512 7 0   128 .5 128 1 128 .7 128 0
f  143  0  9 -2 110 146.6 165  293 330 440 586.4 660 880
f  144  0  17 -2 27.5  41.25 55 73.3 82.5 110 146.6 165 220 293 330 440 586.4 660 880 1172.8 1320
f  145  0   8 -2 220 293 330 440 586.4 660 1172.8 1320
f  146  0   5 -2 27.5 36.65 41.25 55 73.3 82.5
</CsFunctions>
<CsInstruments>
instr 1 ; Risset Pseudo-Flanger
; INITIALIZATION
iattack 	= 	.015
idecay 	= 	.5
ifrequency = 	cpsoct(p4)
; Normalize to 80 dB = ampdb(80).
iamplitude = 	ampdb(p5) * 15848.926 / 42633.1
ileftpan 	= 	(0.5 - p6) / 2
irightpan 	= 	(0.5 + p6) / 2
; Offsets for oscillators based on original p6.
ioffset 	= 	0.04
i1 	= 	ioffset
i2 	= 	2 * ioffset
i3 	= 	3 * ioffset
i4 	= 	4 * ioffset
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print p2, p3, p4, p5, p6
; AUDIO
; A simple envelope to prevent clicking.
aenvelope linen 	iamplitude, iattack, p3, idecay
; Nine oscillators with the same envelope
; and waveform, but slightly different
; frequencies to create the beating effect.
a1 	oscili 	aenvelope, ifrequency, 33
a2 	oscili 	aenvelope, ifrequency + i1, 33
a3 	oscili 	aenvelope, ifrequency + i2, 33
a4 	oscili 	aenvelope, ifrequency + i3, 33
a5 	oscili 	aenvelope, ifrequency + i4, 33
a6 	oscili 	aenvelope, ifrequency - i1, 33
a7 	oscili 	aenvelope, ifrequency - i2, 33
a8 	oscili 	aenvelope, ifrequency - i3, 33
a9 	oscili 	aenvelope, ifrequency - i4, 33
asignal 	= 	a1 + a2 + a3 + a4 + a5 + a6 + a7 + a8 + a9
	outs 	asignal * ileftpan, asignal * irightpan
endin
instr 2 ; Plucked String
; INITIALIZATION
iattack 	= 	.012
irelease 	= 	.075
isustain 	= 	p3 - (iattack + irelease)
	if isustain > 0 goto longenvelope
isustain 	= 	0
p3 	= 	iattack + isustain + irelease
	longenvelope:
ifrequency = 	cpsoct(p4)
; Normalize to 80 dB = ampdb(80).
iamplitude = 	ampdb(p5) * 15848.926 / 5398.0
ileftpan 	= 	(0.5 - p6) / 2
irightpan 	= 	(0.5 + p6) / 2
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print p2, p3, p4, p5, p6
; KONTROL
kenvelope 	expseg 	.00001, iattack, iamplitude, isustain, iamplitude, irelease, .00001
; AUDIO
asignal1 	pluck 	1, ifrequency, ifrequency * 1.002, 0, 1
asignal2 	pluck 	1, ifrequency * 1.003, ifrequency, 0, 1
apluckout 	= 	(asignal1 + asignal2) * kenvelope
	outs 	ileftpan * apluckout, irightpan * apluckout
endin
instr 3 ; FM Low Index
; INITIALIZATION
imodulator 	= 	6.166667
ifmamplitude 	= 	3
index 	= 	.05
iattack 	= 	.015
irelease 	= 	.125
isustain 	= 	p3  - (iattack + irelease)
if isustain > 0 goto longenvelope
isustain 	= 	0.03
p3 	= 	iattack + isustain + irelease
	longenvelope:
ifrequency = 	cpsoct(p4)
icarrier 	=  	.998
icarrierb 	=  	1.002
; Normalize to 80 dB = ampdb(80).
iamplitude = 	ampdb(p5) * 15848.926 / 12729.0
ileftpan 	= 	(0.5 - p6) / 2.0
irightpan 	= 	(0.5 + p6) / 2.0
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print p2, p3, p4, p5, p6
; KONTROL
kindenv 	expseg 	.00001, iattack, 1, isustain, .1, irelease, .00001
kindex 	= 	kindenv * index * ifmamplitude
; AUDIO
aouta 	foscili 	iamplitude, ifrequency, icarrier, imodulator, kindex, 1
aoutb 	foscili 	iamplitude, ifrequency, icarrierb, imodulator, kindex, 1
afmout 	= 	(aouta + aoutb) * kindenv * 2.556
	outs 	ileftpan * afmout, irightpan * afmout
endin
instr 4 ; Nelson Shimmer
; INITIALIZATION
iduration 	= 	p3
ifrequency = 	cpsoct(p4)
; Normalize to 80 dB = ampdb(80).
iamplitude = 	ampdb(p5) * 15848.926 / 2480.4
ileftpan 	= 	(0.5 - p6) / 2.0
irightpan 	= 	(0.5 + p6) / 2.0
ipower 	= 	3
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print p2, p3, p4, p5, p6
; KONTROL
k1 	linseg 	0, iduration / 2, iamplitude, iduration / 2, 0
k2 	randi 	2, 25
k3 	oscili 	.03, 4 + k2, 1
; AUDIO
a1 	gbuzz 	.33 + k3, ifrequency, ipower, 1, 50, 4
k4 	randi 	1.2, 15
k5 	oscili 	.03, 4 + k2, 1
a2 	gbuzz 	.33 + k5, ifrequency + (ifrequency *.02), ipower, 1, 50, 4
k6 	randi 	1.5, 20
k7 	oscili 	.03, 4 + k2, 1
a3 	gbuzz 	.33 + k7, ifrequency - (ifrequency * .021), ipower, 1, 50, 4
a4 	= 	(a1 + a2 + a3) * k1
	outs 	a4 * ileftpan, a4 * irightpan
endin
instr 5 ; Plucked String Filtered
; INITIALIZATION
iattack 	= 	.02
irelease 	= 	.075
isustain 	= 	p3  - (iattack + irelease)
	if isustain > 0 goto longenvelope
isustain 	= 	0
p3 	= 	iattack + isustain + irelease
	longenvelope:
ifrequency = 	cpsoct(p4)
; Normalize to 80 dB = ampdb(80).
iamplitude = 	ampdb(p5) * 15848.926 / 24681.1
ileftpan 	= 	(0.5 - p6) / 2
irightpan 	= 	(0.5 + p6) / 2
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print p2, p3, p4, p5, p6
; KONTROL
kenvelope expseg 	.00001, iattack, iamplitude, isustain, iamplitude, irelease, .00001
; AUDIO
asignal1 	pluck 	1, ifrequency, ifrequency * 1.002, 0, 6
asignal2 	pluck 	1, ifrequency * 1.003, ifrequency, 0, 6
apluckout 	= 	(asignal1 + asignal2) * kenvelope * 7.5257
	outs 	ileftpan * apluckout, irightpan * apluckout
endin
instr 6 ; FM Moderate Index
; INITIALIZATION
icarrier 	= 	1
iratio 	= 	1.25
ifmamplitude = 	8
index 	= 	5.4
iattack 	= 	.02
irelease 	= 	.05
isustain 	= 	p3  - (iattack + irelease)
if isustain > 0 goto longenvelope
isustain 	= 	0
p3 	= 	iattack + isustain + irelease
	longenvelope:
ifrequency = 	cpsoct(p4)
ifrequencyb = 	ifrequency * 1.003
icarrierb 	= 	icarrier * 1.004
; Normalize to 80 dB = ampdb(80).
iamplitude = 	ampdb(p5) * 15848.926 / 12748.1
ileftpan 	= 	(0.5 - p6) / 2.0
irightpan 	= 	(0.5 + p6) / 2.0
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print 	p2, p3, p4, p5, p6
; KONTROL
kindenv 	expseg 	.000001, iattack, 1, isustain, .125, irelease, .000001
kindex 	= 	kindenv * index * ifmamplitude
; AUDIO
aouta 	foscili 	iamplitude, ifrequency, icarrier, iratio, index, 1
aoutb 	foscili 	iamplitude, ifrequencyb, icarrierb, iratio, index, 1
; Plus amplitude correction.
afmout 	= 	(aouta + aoutb) * kindenv * 2.565
	outs 	ileftpan * afmout, irightpan * afmout
endin
instr 7 ; Vercoe Plucked String FM Vox
; INITIALIZATION
itime 	= 	p2
iduration 	= 	p3
ifrequency = 	cpsoct(p4)
iformant = 	cpsoct(p4 / 3)
; Normalize to 80 dB = ampdb(80).
iamplitude = 	ampdb(p5) * 15848.926 / 12000
ileftpan 	= 	(0.5 - p6) / 2
irightpan 	= 	(0.5 + p6) / 2
ipluckamplitude = 	1
ipluckduration = 	.9 * p3
ipluckoff 	= 	p3 - ipluckduration
ifmamplitude = 	1
ifmattack 	= 	.2 * p3
ifmdecay 	= 	.35
ifmoff 	= 	p3 - (ifmattack + ifmdecay)
index 	= 	5
ivibratodepth = 	1
ivibratorate = 	5
iformantamplitude = 	p4 / 3
iformantattack = 	.6
iformantdecay = 	p3 - iformantattack
ioverlaps 	= 	200
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
print 	p2, p3, p4, p5, p6
; KONTROL
kpluck 	linseg 	ipluckamplitude, ipluckduration, 0, ipluckoff, 0
; AUDIO
apluck1 	pluck 	iamplitude, ifrequency, ifrequency, 0, 1
apluck2 	pluck 	iamplitude, ifrequency * 1.003, ifrequency * 1.003, 0, 1
apluck 	= 	kpluck * (apluck1 + apluck2)
kfm 	linseg 	0, ifmattack, ifmamplitude, ifmdecay, 0, ifmoff, 0
kindex 	= 	kfm * index
afm1 	foscili 	iamplitude, ifrequency, 1, 2, kindex, 30
afm2 	foscili 	iamplitude, ifrequency * 1.003, 1.003, 2.003, kindex, 30
afm 	= 	kfm * (afm1 + afm2)
kformant 	linseg 	0, iformantattack, iformantamplitude, iformantdecay, 0
kvibrato 	oscili 	ivibratodepth, ivibratorate, 30
aformant1 	fof 	iamplitude, ioverlaps + kvibrato, iformant, 0, 40, .003, .017, .007, 4, 30, 31, p3
aformant2 	fof 	iamplitude, (ioverlaps * 1.001) + kvibrato * .009, iformant, 0, 40, .003, .017, .007, 10, 30, 31, p3
aformant 	= 	kformant * (aformant1 + aformant2)
asignal 	= 	apluck + afm + aformant
	outs 	asignal * ileftpan, asignal * irightpan
endin
instr 8 ; Risset Waveshaper
; INITILIZATION
iattack 	= 	0.015
irelease 	= 	0.03
isustain 	= 	p3 - (iattack + irelease)
	if isustain > 0 goto longenvelope
isustain 	= 	0
p3 	= 	iattack + isustain + irelease
	longenvelope:
ifrequency = 	cpsoct(p4)
; Normalize to 80 dB = ampdb(80).
iamplitude = 	ampdb(p5) * 15848.926 / 12649.9
ileftpan 	= 	(0.5 - p6) / 2.0
irightpan 	=	(0.5 + p6) / 2.0
i1 	= 	1 / p3
i2 	= 	ifrequency
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print p2, p3, p4, p5, p6
; AUDIO
; Scaling factor.
a1 	oscili 	iamplitude, i1, 2
a2 	oscili 	a1, i2, 1
a3 	linenr 	1, iattack, irelease, .01
a4 	oscili 	a3, i2 * .7071, 1
; Transfer function:
; f(x)=1+.841x-.707x**2-.595x**3+.5x**4+.42x**5-;.354x**6.279x**7+.25x**8+.21x**9
a5 	= 	a4 * a4
a6 	= 	a5 * a4
a7 	= 	a5 * a5
a8 	= 	a7 * a4
a9 	= 	a6 * a6
a10 	= 	a9 * a4
a11 	= 	a10 * a4
a12 	= 	a11 * a4
a13 	= 	1 + .841 * a4 - .707 * a5 - .595 * a6 + .5 * a7 + .42 * a8 - .354 * a9 - .297 * a10 + .25 * a11 + .21 * a12
; Amplitude correction.
a14 	=  	a13 * a2 * 5.06
	outs 	a14 * ileftpan, a14 * irightpan
endin
instr 9 ; Morrill FM Trumpet
; INITIALIZATION
iduration 	= 	p3
icarrier1 	= 	cpsoct(p4)
; Normalize to 80 dB = ampdb(80).
iamplitude = 	ampdb(p5) * 15848.926 / 2998.7
ileftpan 	= 	(0.5 - p6) / 2.0
irightpan 	= 	(0.5 + p6) / 2.0
icarrier2 	= 	1500
index1 	= 	2.66
index2 	= 	1.8
imodulator = 	icarrier1
iratio = 	index2 / index1
ivibratowidth = 	.007
irandev 	= 	.007
ifqr 	= 	125
ivibratorate = 	7
iportamentodeviation = .03
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print p2, p3, p4, p5, p6
; KONTROL
; Vibrato signal.
kwidth 	linseg 	0, .6, ivibratowidth, iduration - .6 - .2, ivibratowidth, .2, 0
kv1 	randi 	irandev, ifqr
kv2 	oscili 	kwidth, ivibratorate, 1
kv3 	oscili 	iportamentodeviation, 1 / iduration, 32
kvibrato 	= 	(1 + kv1) * (1 + kv2) * (1 + kv3)
; Double carrier, single modulator frequency modulation signal.
kdynamic 	linseg 	0, .03, 1, iduration - .03 - .01, .9, .01, 0
; AUDIO
amodulator oscili 	kdynamic * imodulator * index1, imodulator * kvibrato, 1
kamplitude1 linseg 	0, .03, 1, iduration - .03 - .15, .9, .15, 0
a1 	oscili 	kamplitude1 * iamplitude, amodulator + (icarrier1 * kvibrato), 1
kamplitude2 linseg 	0, .03, 1, iduration - .03 - .3, .9, .3, 0
a2 	oscili 	kamplitude2 * iamplitude * .2, ((amodulator * iratio) + (icarrier2 * kvibrato)), 1
asignal 	= 	a1 + a2
	outs 	asignal * ileftpan, asignal * irightpan
endin
instr 10 ; Schottstaedt FM String
; INITIALIZATION
irise 	= 	.2
idecay 	= 	.2
ivibdel 	= 	.4
ivibwth 	= 	.01
ivibrte 	= 	5
ifc 	= 	cpsoct(p4)
; Normalize to 80 dB = ampdb(80).
iamplitude = 	ampdb(p5) * 15848.926 / 5000.0
ileftpan 	= 	(0.5 - p6) / 2
irightpan 	= 	(0.5 + p6) / 2
ifm1 	= 	ifc
ifm2 	= 	ifc * 3
ifm3 	= 	ifc * 4
; Range from carrier 2 to 1.
index1 	= 	7.5 / log(ifc)
; Range from carrier 2.6 to .5.
index2 	= 	15 / sqrt(ifc)
; Range from carrier .2 to .083
index3 	= 	1.25 / sqrt(ifc)
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print p2, p3, p4, p5, p6
; KONTROL
kvibrato 	init 	0
; Delays vibrato for ivibdel seconds.
timout 	0, 	ivibdel, transient
; Vibrato control envelope.
kvbctl 	linen 	1, .5, p3 - ivibdel, .1
; Random deviation in vibrato width.
krnd 	randi 	.005, 11
; Vibrato generator.
kvibrato 	oscili 	kvbctl * ivibwth + krnd, ivibrte * kvbctl, 1
	transient:
; Execute for .2 seconds only.
	timout 	.2, 	p3, continue
; Transient envelope.
ktrans 	linseg 	1, .2, 0, 1, 0
; AUDIO
; Noise...
anoise 	randi 	ktrans, .4 * ifc
; ...centered around 2 KHz.
attack 	oscili 	anoise, 2000, 1
	continue:
amod1 	oscili 	ifm1 * (index1 + ktrans), ifm1, 1
amod2 	oscili 	ifm2 * (index2 + ktrans), ifm2, 1
amod3 	oscili 	ifm3 * (index3 + ktrans), ifm3, 1
aenvelope linen 	iamplitude + attack, irise, p3, idecay
asignal 	oscili 	aenvelope, (ifc + amod1 + amod2 + amod3) * (1 + kvibrato), 1
	outs 	asignal * ileftpan, asignal * irightpan
endin
instr 11 ; Chowning Soprano
; INITIALIZATION
iattack 	= 	.02
irelease 	= 	.1
isustain 	= 	p3 - (iattack + irelease)
if isustain > 0 goto longenvelope
isustain 	= 	0
p3 	= 	iattack + isustain + irelease
	longenvelope:
ifrequency = 	cpsoct(p4)
; Normalize to 80 dB = ampdb(80).
iamplitude 	= 	ampdb(p5) * 15848.926 / 18000.0
ileftpan 	= 	(0.5 - p6) / 2.0
irightpan 	= 	(0.5 + p6) / 2.0
i7 	= 	ifrequency
i2 	= 	i7 * 7 ; Old p6.
i2 	= 	(i2 / i7) + .5
i2 	= 	int(i2)
i3 	= 	.009 ; Old p7.
i4 	= 	p4 / 150 ; Old p8.
i5 	= 	p4 / 6 * .4 ; .09 = old p9.
i6 	= 	p4 / 5 + 1 ; Old p10.
i8 	= 	i5 / i4
i9 	= 	exp(1.5 * log(iamplitude / 32767))
i10 	= 	.00311 * log(ifrequency)
i11 	= 	sqrt(iamplitude / 32767)
i12 	= 	(1 - i3) * i11
i13 	= 	i4 * i7
i14 	= 	i9 * i3
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print p2, p3, p4, p5, p6
; AUDIO
a1 	linen 	i12, .1, p3, .08
a2 	oscili 	i13, i7, 3
a8 	= 	i7 + a2
a4 	linen 	i10, .6, p3, .1
a4 	oscili 	a4, i6, 3
a5 	randi 	i10, 15
a6 	linseg 	-.03, .07, .03, .03, 0, p3 - irelease, 0
a6 	= 	a4 + a5 + a6 + 1.
a1 	oscili 	a1, (a8 + a2) * a6, 3
a7 	= 	(a2 * i8) + i2
a3 	linseg 	0, .07, .1, .03, 1., p3 - .18, 1, .02, .1, .06, 0
a3 	= 	a3 * (i9 * i3)
a3 	oscili 	a3, a7 * a6, 3
asignal 	= 	(a1 + a3) * iamplitude * 14.0350
	outs 	asignal * ileftpan, asignal * irightpan
endin
instr 12 ; Guitar
; INITIALIZATION
iattack 	= 	.015
irelease 	= 	.065
isustain 	= 	p3 - (iattack + irelease)
if isustain > 0 goto longenvelope
isustain 	= 	0
p3 	= 	iattack + isustain + irelease
	longenvelope:
ifrequency = 	cpsoct(p4)
; Normalize to 80 dB = ampdb(80).
iamplitude = 	ampdb(p5) * 15848.926 / 1848
ileftpan 	= 	(0.5 - p6) / 2.0
irightpan 	= 	(0.5 + p6) / 2.0
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print p2, p3, p4, p5, p6
; KONTROL
kamp	linseg	0.0, iattack, iamplitude, isustain, iamplitude, irelease, 0.0
; AUDIO
asig	pluck 	kamp, ifrequency, ifrequency, 0, 1
af1	reson	asig, 110, 80
af2	reson	asig, 220, 100
af3	reson	asig, 440, 80
aout	balance 0.6*af1+af2+0.6*af3+0.4*asig, asig
	outs 	aout * ileftpan, aout* irightpan
endin
instr 13 ; Guitar Harmonics
; INITIALIZATION
iattack 	= 	.015
irelease 	= 	.02
isustain 	= 	p3 - (iattack + irelease)
if isustain > 0 goto longenvelope
isustain 	= 	0
p3 	= 	iattack + isustain + irelease
	longenvelope:
ifrequency	 = 	cpsoct(p4)
; Normalize to 80 dB = ampdb(80)
iamplitude = 	ampdb(p5) * 15848.926 / 1220
ileftpan 	= 	(0.5 - p6) / 2.0
irightpan 	=	(0.5 + p6) / 2.0
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
print p2, p3, p4, p5, p6
; KONTROL
kamp	linseg 	0.0, iattack, iamplitude, isustain, iamplitude,irelease, 0.0
; AUDIO
asig	pluck	kamp, ifrequency, ifrequency, 0, 6
	outs 	asig * ileftpan, asig * irightpan
endin
instr 14 ; Kung Plucked Strings Chorused Pitch-Shifted Delayed Exponentially
; INITIALIZATION
	if p3 > .015  then goto longenvelope
p3 	= 	.015
	longenvelope:
; Normalize to 80 dB = ampdb(80).
iamplitude = 	ampdb(p5) * 15848.926 / 6375
ileftpan 	= 	(0.5 - p6) / 2.0
irightpan 	= 	(0.5 + p6) / 2.0
ishift	=	8.0 / 1200.0
ipch	=	cpsoct(p4)
ioct	=	p4
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print p2, p3, p4, p5, p6
; KONTROL
kvib	oscil	1.0 / 120.0, ipch / 50.0, 41	;vibrato
; AUDIO
ag	pluck	iamplitude, cpsoct(ioct + kvib), iamplitude / 2, 1, 1
agleft	pluck	iamplitude, cpsoct(ioct + ishift), iamplitude / 2, 1, 1
agright	pluck	iamplitude, cpsoct(ioct - ishift), iamplitude / 2, 1, 1
kf1	expon 	.1, p3, 1.0	;exponential from 0.1 to 1.0
kf2	expon	1.0, p3, .1	;exponential from 1.0 to 0.1
adump	delayr	2.0		;set delay line of 2.0 sec
	delayw	ag		;put ag signal into delay line.
atap1	deltapi	kf1		;tap delay line with kf1 function.
atap2	deltapi      kf2		;tap delay line with kf2 function.
ad1	deltap	2.0		;delay 2 sec.
ad2	deltap	1.1		;delay 1.1 sec.
	outs	ileftpan * (agleft+atap1+ad1), irightpan * (agright+atap2+ad2)
endin
instr 15 ; Kung Plucked String Chorused Pitch-Shifted Delayed
; INITIALIZATION
; Normalize to 80 dB = ampdb(80).
iamplitude = 	ampdb(p5) * 15848.926 / 4200
iattack 	= 	.015
irelease 	= 	.03
isustain 	= 	p3 - (iattack + irelease)
	if isustain > 0 goto longenvelope
isustain 	= 	0
	longenvelope:
p3 	= 	iattack + isustain + irelease
ileftpan 	= 	(0.5 - p6) / 2.0
irightpan 	= 	(0.5 + p6) / 2.0
ishift 	= 	8.0 / 1200.0
ipch 	= 	cpsoct(p4)
ioct 	= 	p4
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print p2, p3, p4, p5, p6
; KONTROL
kvib 	oscili 	1.0 / 120.0, ipch / 50.0, 41
; AUDIO
aenv 	expseg 	1.0 / 10000.0, iattack, 1.0, isustain, 1.0, irelease, 1.0 / 10000.0
ag 	pluck 	iamplitude,cpsoct(ioct+kvib),iamplitude/2,1,1
agleft 	pluck 	iamplitude,cpsoct(ioct+ishift),iamplitude/2,1,1
agright 	pluck 	iamplitude,cpsoct(ioct-ishift),iamplitude/2,1,1
adump 	delayr 	0.3
	delayw 	ag * aenv ;put ag signal into delay line.
	ad1 	deltap 	0.1
	ad2 	deltap 	0.21
	outs 	ileftpan * aenv * (agleft + ad1), irightpan * aenv * (agright + ad2)
endin
instr 16 ; Kelley Violin
; INITIALIZATION
; p3 = duration
; ip4 = slur information
ip4 	= 	0
icpsp   	= 	cpsoct(p4)
; Normalize to 80 dB = ampdb(80).
ip6 	= 	ampdb(p5) * 15848.926 /  2727.7
ileftpan 	= 	(0.5 - p6) / 2.0
irightpan 	= 	(0.5 + p6) / 2.0
	if (ip4 == int(p4/2) * 2) goto initslurs
	ihold
	initslurs:
iatttm  	= 	0.075
idectm  	= 	0.1
isustm  	= 	p3 - iatttm - idectm
idec    	= 	p6
ireinit 	= 	-1
	if (ip4 > 1) goto checkafterslur
ilast   	= 	0
	checkafterslur:
	if (ip4 == 1 || ip4 == 3) goto doneslurs
idec 	= 	0
ireinit 	= 	0
	doneslurs:
	if (isustm <= 0) goto simpleenv
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print p2, p3, p4, p5, p6
; KONTROL
kamp 	linseg 	ilast, iatttm, ip6, isustm, ip6, idectm, idec, 0, idec
	goto doneenv
	simpleenv:
kamp 	linseg 	ilast, p3 / 2, ip6, p3 / 2, idec, 0, idec
	doneenv:
ilast 	= 	ip6
; Some randomness for fun.
krnd 	randi  	.1, 10
krnd 	= 	krnd + 1
kamp 	= 	kamp * krnd
; Some vibrato.
kvrandamp  rand 	.0125
kvamp   	= 	icpsp * (0.0125 + kvrandamp)
kvrandfreq rand 1
kvfreq  	= 	5 + kvrandfreq
kvbra  	oscili 	kvamp, kvfreq, 1, ireinit
kfreq 	= 	icpsp + kvbra
; AUDIO
a1 	oscili 	kamp, kfreq, 45, ireinit
; Some resonance cavities.
a2 	tone 	a1, 3500, ireinit
a3 	comb 	a2, .15, .01, ireinit
a4 	comb 	a3, .15, .02, ireinit
	outs 	a1 * ileftpan, a1 * irightpan
endin
instr 17 ; Kelley Harpsichord
; INITIALIZATION
; Envelope initialization.
iduration 	= 	p3
ifrequency = 	cpsoct(p4)
; Normalize to 80 dB = ampdb(80).
iamplitude = 	ampdb(p5) * 15848.926 / 4739
ileftpan 	= 	(0.5 - p6) / 2.0
irightpan 	= 	(0.5 + p6) / 2.0
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print p2, p3, p4, p5, p6
; KONTROL
kenvelope 	expon 	iamplitude, iduration, 1
; AUDIO
apluck 	pluck 	iamplitude, ifrequency, ifrequency, 0, 1
aharp 	oscili 	kenvelope, ifrequency, 46
aoutsignal = 	apluck + aharp
	outs 	aoutsignal * ileftpan, aoutsignal * irightpan
endin
instr 18 ; Kelley Oboe
; INITIALIZATION
icpsp   	= 	cpsoct(p4)
; Normalize to 80 dB = ampdb(80).
ip6 	= 	ampdb(p5) * 15848.926 / 2500
ileftpan 	= 	(0.5 - p6) / 2.0
irightpan 	= 	(0.5 + p6) / 2.0
ip4 	= 	0
	if (ip4 == int(ip4/2) * 2) goto initslurs
	ihold
	initslurs:
iatttm  	= 	0.06
idectm  	= 	0.05
isustm  	= 	p3 - iatttm - idectm
idec    	= 	p6
ireinit 	= 	-1
	if (ip4 > 1) goto checkafterslur
ilast   	= 	0
	checkafterslur:
if (ip4 == 1 || ip4 == 3) goto doneslurs
idec 	= 	0
ireinit 	= 	0
	doneslurs:
	if (isustm <= 0) goto simpleenv
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print p2, p3, p4, p5, p6
; KONTROL
kamp 	linseg 	ilast, iatttm, ip6, isustm, ip6, idectm, idec, 0, idec
	goto doneenv
	simpleenv:
kamp 	linseg 	ilast, p3 / 2, ip6, p3 / 2, idec, 0, idec
	doneenv:
ilast 	= 	ip6
; Some vibrato.
kvrandamp rand 	.003
kvamp   	= 	icpsp * (0.007 + kvrandamp)
kvrandfreq rand 	1
kvfreq  	= 	5 + kvrandfreq
kvbra  	oscili 	kvamp, kvfreq, 1, ireinit
kfreq 	= 	icpsp + kvbra
; AUDIO
a1 	oscili 	kamp, kfreq, 47, ireinit
	outs 	a1 * ileftpan, a1 * irightpan
endin
instr 19 ; Nelson Finger Cymbals
; INITIALIZATION
ifrequency = 	cpsoct(p4)
; Normalize to 80 dB = ampdb(80).
iamplitude = 	ampdb(p5) * 15848.926 /  2491
ileftpan 	= 	(0.5 - p6) / 2.0
irightpan 	= 	(0.5 + p6) / 2.0
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print p2, p3, p4, p5, p6
; KONTROL
; Amplitude envelope.
k1 	expseg  	.0001, .05, iamplitude, p3 - .05, .0001
; Power to partials.
k2 	linseg 	1.69, .1, 1.75, p3 -.1, 1.69
; AUDIO
a1 	foscili	k1, ifrequency, 1, 2.01, k2, 1
	outs 	a1 * ileftpan, a1 * irightpan
endin
instr 20 ; Nelson Melody Instrument (Chebyshev / FM / Additive)
; INITIALIZATION
i1 	= 	cpsoct(p4)
; Normalize to 80 dB = ampdb(80).
iamplitude = 	ampdb(p5) * 15848.926 /  15848.926
ileftpan 	= 	(0.5 - p6) / 2.0
irightpan 	= 	(0.5 + p6) / 2.0
;ip6	=	cheby#
ip6 	= 	32
;ip7	=	choice
ip7 	=	1
iattack 	= 	.05
irelease 	= 	.1
isustain 	= 	p3 - (iattack + irelease)
	if isustain > 0 goto longenvelope
isustain 	= 	0
p3 	=	 iattack + isustain + irelease
	longenvelope:
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print p2, p3, p4, p5, p6
; KONTROL
k100 	randi   	1,10
k101 	oscili  	i1 / 65, 5 + k100, 1
k102 	linseg  	0, .5, 1, p3 - .5, 1
k100 	=  	i1 + (k101 * k102)
; Envelope for driving oscillator.
k1 	linen 	.5, p3 * .4, p3 , p3 * .2
k2 	line 	1, p3, .5
k1 	=  	k2 * k1
	if ip7 = 2 goto cresc
	if ip7 = 3 goto dim
	if ip7 = 4 goto sfz
	if ip7 = 5 goto slow
; Amplitude envelope.
k10 	expseg  	.0001, iattack, iamplitude , isustain, iamplitude * .8, irelease, .0001
; Power to partials.
k20 	linseg 	1.485, iattack, 1.5, isustain + irelease, 1.485
	goto next
	cresc:
; Amplitude envelope.
k8 	expseg  	.0001, iattack, p5 * .25, isustain, p5, irelease, .0001
k9 	linseg 	1, p3 - .15, 1.5, .1, 0
k10  	= 	(k8 * k9) / 2
; Power to partials.
k20 	line 	1.475, p3, 1.5
	goto next
	dim:
; Amplitude envelope.
k10 	linseg  	0, .05, iamplitude, .05, iamplitude * .8, p3 * .33, p5 *.7, (p3 * .66) - .1, 0
; Power to partials.
k20 	line 	1.5, p3, 1.475
	goto next
	sfz:
; Amplitude envelope.
k10 	linseg  	0, .03, p5, .04, p5, .03, p5 * .3, p3 - .15, p5 * .3, .05, 0
; Power to partials.
k20 	linseg  	1.4, .03, 1.7, .04, 1.7, .03, 1.4, p3 - .1, 1.385
	goto next
	slow:
; Amplitude envelope.
k10 	linseg  	0,.06, p5 * .45, .04, p5 * .2, (p3 / 3) - .1, p5, p3 / 3, p5 * .9, p3 / 3, 0
; Power to partials.
k20 	linseg 	1.475, p3 / 3, 1.5, p3 / 3, 1.4999, p3 / 3, 1.475
	next:
;a1-3 are for cheby with p6=1-4
a1 	oscili  	k1, k100 - .025, 3
; Tables a1 to fn13, others normalize,
a2 	tablei  	a1, ip6, 1, .5
a3 	balance 	a2,a1
; Try other waveforms as well.
a4 	foscil  	1, k100 + .04, 1, 2.005, k20, 1
a5 	oscili  	1, k100, 1
a6  	=  	((a3 * .1) + (a4 * .1) + (a5 * .8)) * k10
a7 	comb 	a6, .5, 1 / i1
a6  	= 	(a6 * .9) + (a7 * .1)
	outs a6 * ileftpan, a6 * irightpan
endin
instr 21 ; Nelson Marimba
; INITIALIZATION
ifrequency = 	cpsoct(p4)
iattack 	= 	.02
irelease 	= 	p3
isustain 	= 	p3 - (iattack + irelease)
	if isustain > 0 goto longenvelope
isustain 	= 	0
p3 	= 	iattack + isustain + irelease
	longenvelope:
; Normalize to 80 dB = ampdb(80).
iamplitude = 	ampdb(p5) * 15848.926 /  4185
ileftpan 	= 	(0.5 - p6) / 2.0
irightpan 	= 	(0.5 + p6) / 2.0
kformant1 	= 	ifrequency / 2.1
kformant2 	= 	kformant1 * 2.1
kformant3 	= 	kformant2 * 2.1
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print p2, p3, p4, p5, p6
; KONTROL
; Amplitude envelope
k1  	expseg  	.000001, iattack, iamplitude , irelease, .000001
k25  	linseg 	1, iattack, 1, irelease,4
k1 	=  	k25 * k1
; Power to partials.
k10 	linseg  	2.25, iattack, 3, irelease, 2
a1 	gbuzz 	k1, ifrequency, k10, 0, 35, 42
a2 	reson 	a1, kformant1, kformant1 * .05, 1
a3 	reson 	a1, kformant2, kformant2 * .05, 1
a4 	reson 	a1, kformant2, kformant2 * .05, 1
a8 	balance 	a4, a1
ga1 	= 	a8 * ileftpan
ga2 	= 	a8 * irightpan
	outs  	ga1, ga2
endin
instr 22 ; Gogins Elementary Signal (Cosine FM Grain with Hanning Envelope)
; INITIALIZATION
ienvelopehz = 	1.0 / p3
icarrierhz 	= 	cpsoct(p4)
; Normalize to 80 dB = ampdb(80).
iamplitude = 	ampdb(p5) * 15848.926 /  1405.0
ileftpan 	= 	(0.5 - p6) / 2.0
irightpan 	= 	(0.5 + p6) / 2.0
icarrierratio = 	1.0
imodulationratio = 	1.0
imodulationindex =	1.0
; LOGGING
; Elementary Signal Instrument (Cosine FM grain with Hanning envelope)
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length (time/frequency aspect ratio)
; p4 	= 	Octave of carrier
; p5 	= 	Decibels at peak
; p6 	= 	Pan
; p7 	= 	Ratio (modulator Hz = Carrier Hz * Ratio)
; p8 	= 	iNdex of modulation
print p2, p3, p4, p5, p6, p6
; KONTROL
ihanningwindow = 	50
kenvelope 	oscili 	iamplitude, ienvelopehz, ihanningwindow
; AUDIO
icosinewave = 	42
asignal 	foscili 	kenvelope, icarrierhz, icarrierratio, imodulationratio, imodulationindex, icosinewave
	outs 	asignal * ileftpan, asignal * irightpan
endin
instr 23 ; FM Very High Ratio
; INITIALIZATION
icarrier 	= 	2
iratio 	= 	2.5
ifmamplitude = 	8
index 	= 	6
iattack 	= 	.02
irelease 	= 	.05
isustain 	= 	p3  - (iattack + irelease)
if isustain > 0 goto longenvelope
isustain 	= 	0
p3 	= 	iattack + isustain + irelease
	longenvelope:
ifrequency = 	cpsoct(p4)
ifrequencyb = 	ifrequency * 1.003
icarrierb 	= 	icarrier * 1.004
; Normalize to 80 dB = ampdb(80).
iamplitude = 	ampdb(p5) * 15848.926 / 12748.1
ileftpan 	= 	(0.5 - p6) / 2.0
irightpan 	= 	(0.5 + p6) / 2.0
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print 	p2, p3, p4, p5, p6
; KONTROL
kindenv 	expseg 	.000001, iattack, 1, isustain, .125, irelease, .000001
kindex 	= 	kindenv * index * ifmamplitude
; AUDIO
aouta 	foscili 	iamplitude, ifrequency, icarrier, iratio, index, 1
aoutb 	foscili 	iamplitude, ifrequencyb, icarrierb, iratio, index, 1
; Plus amplitude correction.
afmout 	= 	(aouta + aoutb) * kindenv * 2.565
	outs 	ileftpan * afmout, irightpan * afmout
endin
instr 24 ; Horner Erhu
; INITIALIZATION
; Inital values of modelled tones:
;                      p3      p4       p5       p6     p7   p8      p9
;       tone1:   3.3     7.11    8.03    1       5       51      52
;       tone2:   3.9     8.06    8.10    1       5       53      54
iamplitude = 	ampdb(p5)
ip6 	= 	1
ip7 	= 	5
ip8 	= 	51
ip9 	= 	52
ileftpan 	= 	(0.5 - p6) / 2.0
irightpan 	= 	(0.5 + p6) / 2.0
giseed 	= 	.5
ipch1 	= 	p4
ipch2 	= 	p4 + 1 + 3/12
iampscale =	1
ivibrate 	= 	ip7
iwt1 	= 	ip8
iwt2 	= 	ip9
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
; ip6 	= 	Amplitude scaling factor
; ip7 	= 	Tremolo rate in Hz
; ip8 	= 	Wavetable number to use with first pitch in tremolo
; ip9 	= 	Wavetable number to use with second pitch in tremolo
	print p2, p3, p4, p5, p6, ip6, ip7, ip8, ip9
; KONTROL
; Frequency envelope
ifreq1 	= 	cpsoct(ipch1)
ifreq2 	= 	cpsoct(ipch2)
kfreq 	= 	ifreq1
;       kfreqr randi .0015*ifreq1,10, giseed            ; 0.15% freq.  variation
;       giseed = frac(giseed*3.14159)
;       kfreq = kfreq + kfreqr
ivibrate 	= 	ivibrate *(giseed/50 + .99)          ; +-1% vib  rate variation
giseed 	= 	frac(giseed*3.14159)
; print ivibrate
; Start vibrato with a slow cycle.
kvibrate 	linseg 	ivibrate/2, 1.0/(ivibrate), ivibrate/2, .01, ivibrate, p3, ivibrate
; 1% t.v.  vib. rate variation.
kvibr 	randi 	.01*ivibrate, ivibrate/2, giseed
giseed 	= 	frac(giseed*3.14159)
kvibrate 	= 	kvibrate + kvibr
kvib 	oscili 	(ifreq2 - ifreq1), kvibrate, 55, .5
kfreq 	= 	kfreq + kvib
;display kvib, p3
; Allow ampEnv brkpts to vary by +-10%.
i1 	= 	.15*(giseed/5 + .9)
; Update random seed.
giseed 	= 	frac(giseed*3.14159)
i2 	= 	.6*(giseed/5 + .9)
giseed 	= 	frac(giseed*3.14159)
i3 	= 	.35*(giseed/5 + .9)
giseed 	= 	frac(giseed*3.14159)
i4 	= 	(giseed/5 + .9)
giseed 	= 	frac(giseed*3.14159)
i5 	= 	(giseed/5 + .9)
giseed 	= 	frac(giseed*3.14159)
; Wavetable amplitude envelopes.
; Overall amplitude.
isum 	= 	i1+i2+i3+i4+i5
if p3-isum < .1 goto ae2
	ae1:
kamp 	linseg 	0, i1, .8, i2, 1.7, i3, 1.3, p3-isum, .9, i4, .1,  i5, 0
	goto 	ae3
	ae2:
kamp 	linseg 	0, i1, .8, i2, 1.7, i3, 1.3, .1, .9, i4, .1, i5,  0
; Ramp decay  for shorter notes.
kramp 	linseg 	1, .8*p3, 1, .2*p3, 0
kamp 	= 	kamp*kramp
	ae3:
; 10% tremolo  amplitude variation.
ktremr 	randi 	.05*kamp, ivibrate/2, giseed
giseed 	= 	frac(giseed*3.14159)
kamp 	= 	kamp + ktremr
atrem1 	oscili 	kamp, kvibrate, 55, 0
atrem2 	oscili 	kamp, kvibrate, 55, .5
; Wavetable  synthesis.
awt1 	oscili 	atrem1, kfreq, iwt1
awt2 	oscili 	atrem2, kfreq, iwt2
; Allow  wavetable overall amplitude to vary by +-10%.
iamp1 	= 	giseed/5 + .9
giseed 	= 	frac(giseed*3.14159)
iamp2 	= 	giseed/5 + .9
giseed 	= 	frac(giseed*3.14159)
;print iamp1
;print iamp2
; AUDIO
asrc 	= 	iamp1*awt1 + iamp2*awt2
; Time-varying lowpass filter for spectral decay.
	filt:
kcutoff 	linseg 	sr/2, .5*p3, sr/2, .5*p3, ifreq1
afilt 	tone 	asrc, kcutoff
afilt 	balance 	afilt, asrc
asrc 	= 	iampscale*asrc
	outs 	asrc * ileftpan, asrc * irightpan

; Chorus.
ig1 = 0.8
ig2 = 0.7
ig3 = 0.6
ig4 = 0.5
kdt linseg .005, p3, .028
adump delayr .1
ad1 deltapi kdt
delayw asrc
kdt linseg .009, p3/2, .023, p3/2, .017
adump delayr .1
ad2 deltapi kdt
delayw asrc
kdt linseg .021, p3, .007
adump delayr .1
ad3 deltapi kdt
delayw asrc
kdt linseg .012, p3, .019
adump delayr .1
ad4 deltapi kdt
delayw asrc
achorus = ig1*ad1 +  ig2*ad2 +  ig3*ad3 +  ig4*ad4
outs achorus * ileftpan, achorus * irightpan
endin
instr 25 ; Horner Pipa
; Inital values of the original modelled tone:
;                       p3      p4      p5
;       pipa:      7.4     6.07    1
; Note: If you use the pipa above about middle C (higher than the  modelled range), then you'll want
; to bandlimit the wavetables so they stay below the Nyquist  frequency. Just delete the higher
; harmonics of the wavetables appropriately (especially wavetable  #12).
; INITIALIZATION
giseed 	= 	.5
ipch 	= 	p4
iamplitude = 	ampdb(p5) * 15858.0 / 65413648.0
ileftpan 	= 	(0.5 - p6) / 2.0 * iamplitude
irightpan 	= 	(0.5 + p6) / 2.0 * iamplitude
iampscale = 	1
ip5 	= 	1
; frequency envelope
ifreq 	= 	cpsoct(ipch)
; 0.15% freq.  variation.
kfreqr 	randi 	.0015*ifreq,10, giseed
giseed 	= 	frac(giseed*3.14159)
kfreq 	= 	kfreqr + ifreq
;  allow wavetable synchronization to vary by +-10%
i1 	= 	giseed/5 + .9
giseed 	= 	frac(giseed*3.14159)   ; update random seed
i2 	= 	giseed/5 + .9
giseed 	= 	frac(giseed*3.14159)
i3 	= 	giseed/5 + .9
giseed 	= 	frac(giseed*3.14159)
i4 	= 	giseed/5 + .9
giseed 	= 	frac(giseed*3.14159)
i5 	= 	giseed/5 + .9
giseed 	= 	frac(giseed*3.14159)
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
; ip5 	= 	Amplitude scaling factor.
; KONTROL
; Wavetable amplitude envelopes.
kamp1 	linseg 	0, .01*i1, 11, .02*i1, 20, .03*i1, 18, .02*i1,  9, .04*i1, 14, .06*i1, 11, .62*i1, 7, .4*i1, 0, .7*i1, 4, 1.5*i1, .4,  1.0*i1, .7, 1.2*i1, -.1, 1.8*i1, 0, p3, 0
; kamp2 	linseg 	0, .01*i2, 2, .02*i2, 2.5, .15*i2, 1.5, .15*i2,  .8, .17*i2, .5, .15*i2, 0, 6.75*i2, 0, p3, 0
kamp2 	linseg 	0, .01*i2, 2, .02*i2, 2.5, .15*i2, 1.5, .15*i2,  .8, .17*i2, .5, .4*i2, -.7, .5*i2, .16, .4*i2, .02, .5*i2, .1, .6*i2,  -.03, .2*i2, 0, .5*i2, -.06, .6*i2, .05, 1.4*i2, -.02, 1.8*i2, 0, p3,  0
kamp3 	linseg 	0, .01*i3, -17, .05*i3, 8, .12*i3, 1, .22*i3,  -2, .04*i3, -.5, .14*i3, .2, .32*i3, -6, .6*i3, 2, .5*i3, -.2, .4*i3,  2.5, .8*i3, .2, 1.4*i3, 1.6, .8*i3, .7, 2.0*i3, 0, p3, 0
kamp4 	linseg 	0, .015*i4, 1.5, .035*i4, -1.2, .03*i4, .8, .14*i4, 1, .4*i4, .25, .48*i4, 1.3, .6*i4, -.1, 1.9*i4, .1, .6*i4,  -.1, 3.2*i4, 0, p3, 0
kamp5 	linseg 	0, .01*i5, 10, .02*i5, -40, .11*i5, -10, .46*i5, -5, .3*i5, 12, .5*i5, -1.5, .4*i5, 2, .4*i5, -2.5, 1.4*i5, 1, .8*i5, -1.2, 1.2*i5, .2, 1.8*i5, 0, p3, 0
; AUDIO
; Wavetable  synthesis.
awt1 	oscili 	kamp1, kfreq, 61
awt2 	oscili 	kamp2, kfreq, 62
awt3 	oscili 	kamp3, kfreq, 63
awt4 	oscili 	kamp4, kfreq, 64
awt5 	oscili 	kamp5, kfreq, 65
; Allow  wavetable overall amplitude to vary by +-25%.
iamp1 	= 	giseed/2 + .75
giseed 	= 	frac(giseed*3.14159)
iamp2 	= 	giseed/2 + .75
giseed 	= 	frac(giseed*3.14159)
iamp3 	= 	giseed/2 + .75
giseed 	= 	frac(giseed*3.14159)
iamp4 	= 	giseed/2 + .75
giseed 	= 	frac(giseed*3.14159)
iamp5 	= 	giseed/2 + .75
giseed 	= 	frac(giseed*3.14159)
aout = 	iamp1*awt1 + iamp2*awt2 + iamp3*awt3 + iamp4*awt4  +  iamp5*awt5
; Ramp decay for shorter notes.
kramp 	linseg 	1, p3, 0
aout 	= 	kramp*aout
; Time-varying lowpass filter for spectral decay.
	filt:
kcutoff 	linseg 	sr/2, 7.4, ifreq, p3, ifreq
afilt 	tone 	aout, kcutoff
afilt 	balance 	afilt, aout
aout2 	= 	iampscale*afilt
	outs 	aout2 * ileftpan, aout2 * irightpan
endin
instr 26 ; Cook Bowed String Model
; Csound plugin implementation by Michael Gogins
; LOGGING
; p1 = Instrument
; p2 = Start
; p3 = Length
; p4 = Octave
; p5 = Decibels
; p6 = Pan
print p2, p3, p4, p5, p6
; INITIALIZATION
ifrequency = cpsoct(p4)
iamplitude = ampdb(p5)
ileftpan = (0.5 - p6) / 2.0
irightpan = (0.5 + p6) / 2.0
; AUDIO
asignal bowed ifrequency, iamplitude, 20, 20, 3, 6
outs ileftpan * asignal, irightpan * asignal
endin
instr 27 ; Cook Wurlitzer Electric Piano Model
; Csound plugin implementation by Michael Gogins
; LOGGING
; p1 = Instrument
; p2 = Start
; p3 = Length
; p4 = Octave
; p5 = Decibels
; p6 = Pan
print p2, p3, p4, p5, p6
; INITIALIZATION
ifrequency = cpsoct(p4)
iamplitude = ampdb(p5) * 10
ileftpan = (0.5 - p6) / 2.0
irightpan = (0.5 + p6) / 2.0
; AUDIO
asignal wurlitzer ifrequency, iamplitude, 20, 20, 3, 6
outs ileftpan * asignal, irightpan * asignal
endin
instr 28 ; Cook Tubular Bell Model
; Csound plugin implementation by Michael Gogins
; LOGGING
; p1 = Instrument
; p2 = Start
; p3 = Length
; p4 = Octave
; p5 = Decibels
; p6 = Pan
print p2, p3, p4, p5, p6
; INITIALIZATION
ifrequency = cpsoct(p4)
iamplitude = ampdb(p5) * 10
ileftpan = (0.5 - p6) / 2.0
irightpan = (0.5 + p6) / 2.0
; AUDIO
asignal tubularbell ifrequency, iamplitude, 20, 20, 3, 6
outs ileftpan * asignal, irightpan * asignal
endin
instr 29 ; Cook Vibraphone Model
; Csound plugin implementation by Michael Gogins
; LOGGING
; p1 = Instrument
; p2 = Start
; p3 = Length
; p4 = Octave
; p5 = Decibels
; p6 = Pan
print p2, p3, p4, p5, p6
; INITIALIZATION
ifrequency = cpsoct(p4)
iamplitude = ampdb(p5)
ileftpan = (0.5 - p6) / 2.0 * 1000
irightpan = (0.5 + p6) / 2.0 * 1000
; AUDIO
asignal vibraphone ifrequency, iamplitude, 20, 20, 5, 5
outs ileftpan * asignal, irightpan * asignal
endin
instr 30 ; Cook Agogobell Model
; Csound plugin implementation by Michael Gogins
; LOGGING
; p1 = Instrument
; p2 = Start
; p3 = Length
; p4 = Octave
; p5 = Decibels
; p6 = Pan
print p2, p3, p4, p5, p6
; INITIALIZATION
ifrequency = cpsoct(p4)
iamplitude = ampdb(p5) * 10
ileftpan = (0.5 - p6) / 2.0
irightpan = (0.5 + p6) / 2.0
; AUDIO
asignal agogobell ifrequency, iamplitude, 20, 20, 3, 6
outs ileftpan * asignal, irightpan * asignal
endin
instr 31 ; Cook Plucked Model
; Csound plugin implementation by Michael Gogins
; LOGGING
; p1 = Instrument
; p2 = Start
; p3 = Length
; p4 = Octave
; p5 = Decibels
; p6 = Pan
print p2, p3, p4, p5, p6
; INITIALIZATION
ifrequency = cpsoct(p4)
iamplitude = ampdb(p5)
ileftpan = (0.5 - p6) / 2.0
irightpan = (0.5 + p6) / 2.0
; AUDIO
asignal plucked ifrequency, iamplitude, 0, 0, 0, 0
outs ileftpan * asignal, irightpan * asignal
endin
instr 32 ; Cook Mandolin Model
; Csound plugin implementation by Michael Gogins
; LOGGING
; p1 = Instrument
; p2 = Start
; p3 = Length
; p4 = Octave
; p5 = Decibels
; p6 = Pan
print p2, p3, p4, p5, p6
; INITIALIZATION
ifrequency = cpsoct(p4)
iamplitude = ampdb(p5) * 10
ileftpan = (0.5 - p6) / 2.0
irightpan = (0.5 + p6) / 2.0
; AUDIO
asignal mandolin ifrequency, iamplitude, 20, 20, 3, 6
outs ileftpan * asignal, irightpan * asignal
endin
instr 33 ; Cook Clarinet Model
; Csound plugin implementation by Michael Gogins
; LOGGING
; p1 = Instrument
; p2 = Start
; p3 = Length
; p4 = Octave
; p5 = Decibels
; p6 = Pan
print p2, p3, p4, p5, p6
; INITIALIZATION
ifrequency = cpsoct(p4)
iamplitude = ampdb(p5) * 10
ileftpan = (0.5 - p6) / 2.0
irightpan = (0.5 + p6) / 2.0
; AUDIO
asignal clarinet ifrequency, iamplitude, 20, 20, 3, 6
outs ileftpan * asignal, irightpan * asignal
endin
instr 34 ; Cook Flute Model
; Csound plugin implementation by Michael Gogins
; LOGGING
; p1 = Instrument
; p2 = Start
; p3 = Length
; p4 = Octave
; p5 = Decibels
; p6 = Pan
print p2, p3, p4, p5, p6
; INITIALIZATION
ifrequency = cpsoct(p4)
iamplitude = ampdb(p5) * 10
ileftpan = (0.5 - p6) / 2.0
irightpan = (0.5 + p6) / 2.0
; AUDIO
asignal flute ifrequency, iamplitude, 20, 20, 3, 6
outs ileftpan * asignal, irightpan * asignal
endin
instr 35 ; Cook Brass Model
; Csound plugin implementation by Michael Gogins
; LOGGING
; p1 = Instrument
; p2 = Start
; p3 = Length
; p4 = Octave
; p5 = Decibels
; p6 = Pan
print p2, p3, p4, p5, p6
; INITIALIZATION
ifrequency = cpsoct(p4)
iamplitude = ampdb(p5)
ileftpan = (0.5 - p6) / 2.0 * iamplitude
irightpan = (0.5 + p6) / 2.0 *iamplitude
; AUDIO
asignal brass ifrequency, 1, 10, 10, 10, 10
outs ileftpan * asignal, irightpan * asignal
endin
instr 36 ; Cook Rhodes Electric Piano Model
; Csound plugin implementation by Michael Gogins
; LOGGING
; p1 = Instrument
; p2 = Start
; p3 = Length
; p4 = Octave
; p5 = Decibels
; p6 = Pan
print p2, p3, p4, p5, p6
; INITIALIZATION
ifrequency = cpsoct(p4)
iamplitude = ampdb(p5) * 10
ileftpan = (0.5 - p6) / 2.0
irightpan = (0.5 + p6) / 2.0
; AUDIO
asignal rhodes ifrequency, iamplitude, 20, 20, 3, 6
outs ileftpan * asignal, irightpan * asignal
endin
instr 37 ; Cook Heavy Metal Model
; Csound plugin implementation by Michael Gogins
; LOGGING
; p1 = Instrument
; p2 = Start
; p3 = Length
; p4 = Octave
; p5 = Decibels
; p6 = Pan
print p2, p3, p4, p5, p6
; INITIALIZATION
ifrequency = cpsoct(p4)
iamplitude = ampdb(p5) * 10
ileftpan = (0.5 - p6) / 2.0
irightpan = (0.5 + p6) / 2.0
; AUDIO
asignal heavymetal ifrequency, iamplitude, 100, 100, 10, 1
outs ileftpan * asignal, irightpan * asignal
endin
instr 38 ; Cook Percussive Flute Model
; Csound plugin implementation by Michael Gogins
; LOGGING
; p1 = Instrument
; p2 = Start
; p3 = Length
; p4 = Octave
; p5 = Decibels
; p6 = Pan
print p2, p3, p4, p5, p6
; INITIALIZATION
ifrequency = cpsoct(p4)
iamplitude = ampdb(p5) * 10
ileftpan = (0.5 - p6) / 2.0
irightpan = (0.5 + p6) / 2.0
; AUDIO
asignal percussiveflute ifrequency, iamplitude, 20, 20, 45, 4
outs ileftpan * asignal, irightpan * asignal
endin
instr 39 ; Cook Hammond Organ Model
; Csound plugin implementation by Michael Gogins
; LOGGING
; p1 = Instrument
; p2 = Start
; p3 = Length
; p4 = Octave
; p5 = Decibels
; p6 = Pan
print p2, p3, p4, p5, p6
; INITIALIZATION
ifrequency = cpsoct(p4)
iamplitude = ampdb(p5) * 10
ileftpan = (0.5 - p6) / 2.0
irightpan = (0.5 + p6) / 2.0
; AUDIO
asignal hammond ifrequency, iamplitude, 20, 20, 3, 6
outs ileftpan * asignal, irightpan * asignal
endin
instr 40 ; Cook FM Voices Model
; Csound plugin implementation by Michael Gogins
; LOGGING
; p1 = Instrument
; p2 = Start
; p3 = Length
; p4 = Octave
; p5 = Decibels
; p6 = Pan
print p2, p3, p4, p5, p6
; INITIALIZATION
ifrequency = cpsoct(p4)
iamplitude = ampdb(p5) * 10
ileftpan = (0.5 - p6) / 2.0
irightpan = (0.5 + p6) / 2.0
; AUDIO
asignal fmvoices ifrequency, iamplitude, 20, 20, 3, 6
outs ileftpan * asignal, irightpan * asignal
endin
instr 41 ; Cook Mini-Moog Model
; Csound plugin implementation by Michael Gogins
; LOGGING
; p1 = Instrument
; p2 = Start
; p3 = Length
; p4 = Octave
; p5 = Decibels
; p6 = Pan
print p2, p3, p4, p5, p6
; INITIALIZATION
ifrequency = cpsoct(p4)
iamplitude = ampdb(p5) * 10
ileftpan = (0.5 - p6) / 2.0
irightpan = (0.5 + p6) / 2.0
; AUDIO
asignal minimoog ifrequency, iamplitude, 20, 20, 3, 6
outs ileftpan * asignal, irightpan * asignal
endin
instr 42 ; Cook Voice Formant Model
; Csound plugin implementation by Michael Gogins
; LOGGING
; p1 = Instrument
; p2 = Start
; p3 = Length
; p4 = Octave
; p5 = Decibels
; p6 = Pan
print p2, p3, p4, p5, p6
; INITIALIZATION
ifrequency = cpsoct(p4)
iamplitude = ampdb(p5) * 10
ileftpan = (0.5 - p6) / 2.0
irightpan = (0.5 + p6) / 2.0
; AUDIO
asignal voiceformant ifrequency, iamplitude, 0, 0, 0, 0
outs ileftpan * asignal, irightpan * asignal
endin
instr 43 ; Pinkston Koto
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;         basic koto orchestra file                              ;
;                                                                ;
;         	p3 = duration
;	p4 = amplitude                    ;
;         	p5 = pitch in pch
;	p6 = pitch bend in oct.decimal    ;
;                                                                ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ip4 	= 	ampdb(p5)
ileftpan 	= 	(0.5 -  p6) / 2.0 * 15848.0 / 15848.0
irightpan 	= 	(0.5 + p6) / 2.0 * 15858.0 / 15848.0
ip6 	= 	0
ihz	=	cpsoct(p4)
ihz2	=       	ihz * 2.0006
ihz3	=	ihz * 1.9999
ihz4	=	ihz * 1.0005
ihz5	=	ihz * .9998
koct	init	octcps(ihz)
koct2	init	octcps(ihz2)
koct3	init	octcps(ihz3)
koct4	init	octcps(ihz4)
koct5	init	octcps(ihz5)
kbend   	oscil1i 	0.15, ip6, p3,8;   /* p6 in oct.decimal */
khz	=	cpsoct(koct+kbend)
khz2	=	cpsoct(koct2+kbend)
khz3	=	cpsoct(koct3+kbend)
khz4	=	cpsoct(koct4+kbend)
khz5	=	cpsoct(koct5+kbend)
aplk1	pluck	(ip4*.42),khz,ihz,6,3,1
	timout	0.0,p3*.2,continue         ;.002 not p3;
	koto2:	aplk2	pluck	(ip4*.62),khz2,ihz2,6,3,1
	timout	0.0,p3*.4,continue        ; .oo4 not p3;
	koto3:	aplk3	pluck	(ip4*.62),khz3,ihz3,6,3,1
	timout	0.0,p3*.6,continue       ;  .005 not p3;
	koto4:	aplk4	pluck	(ip4*.62),khz4,ihz4,6,3,1
	timout	0.0,p3*.8,continue      ;.oo7 not  p3;
	koto5:	aplk5	pluck	(ip4*.62),khz5,ihz5,6,3,1
	continue:
asignal	=	aplk1+aplk2+aplk3+aplk4+aplk5
asig	envlpx	asignal,.001,p3,(p3*.001),8,1.02,.008
;asig	envlpx	asignal,.06,p3,(p3*.1),8,1.02,.008 ;
	outs	asig * ileftpan, asig * irightpan
endin
instr 44 ; Bergeman 1
; INITIALIZATION
; Original pfields
; p1  p2 p3   p4  p5      p6 p7    p8       p9
; ins  st  dur  db func   at  dec freq1  freq2
ip4 	= 	p5
iamp	=	(ip4 + 30) - (p4 * 4)
	print	p1, p2, p3, p4, p5, iamp, p6
ileftpan 	= 	(0.5 - p6) / 2.0
irightpan 	= 	(0.5 + p6) / 2.0
ip5 	= 	77
ip3	=	p3
ip6 	= 	p3 * .25
ip7 	= 	p3 * .75
ip8 	= 	cpsoct(p4 - .01)
ip9 	= 	cpsoct(p4 + .01)
idb	=	ampdb(iamp)
isc	=	idb * .333
; KONTROL
k1 	line 	40, p3, 800
k2 	line 	440, p3, 220
k3 	linen 	isc, ip6, p3, ip7
k4 	line 	800, ip3,40
k5 	line 	220, ip3,440
k6 	linen 	isc, ip6, ip3, ip7
k7	linen	1, ip6, ip3, ip7
; AUDIO
a5 	oscili 	k3, ip8, ip5
a6 	oscili 	k3, ip8 * .999, ip5
a7 	oscili 	k3, ip8 * 1.001, ip5
a1	=	a5 + a6 + a7
a8 	oscili 	k6, ip9, ip5
a9 	oscili 	k6, ip9 * .999, ip5
a10 	oscili 	k6, ip9 * 1.001, ip5
a11	=	a8 + a9 + a10
a2 	butterbp 	a1, k1, 40
a3 	butterbp 	a2, k5, k2 * .8
a4 	balance 	a3, a1
a12 	butterbp 	a11, k4, 40
a13 	butterbp 	a12, k2, k5 * .8
a14 	balance 	a13, a11
a15	reverb2 	a4, 5, .3
a16	reverb2	a4, 4, .2
a17	=	(a15 + a4) * ileftpan * k7
a18	=	(a16 + a4) * irightpan * k7
	outs 	a17, a18
endin
instr 45 ; Steinway sampled
; INITIALIZATION
iamplitude 	= ampdb(p5) * 15848.926 / 2500.0
ileftpan 	= 	(0.5 - p6) / 2.0
irightpan 	= 	(0.5 + p6) / 2.0
ifrequency = 	cpsoct(p4)
ioctave 	= 	int(p4 * 100)
itablenumber table 	ioctave + 100, 100
itableoctave table 	ioctave, 101
itablefrequency = 	cpsoct (itableoctave)
	if p3 > .20  then goto longenvelope
p3 	= 	.20
	longenvelope:
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print p2, p3, p4, p5, p6
print itablenumber, 	itableoctave, itablefrequency
; KONTROL
kamplitude linen 	iamplitude, -1, p3, .012
; AUDIO
asignal 	loscil 	kamplitude, ifrequency, int(itablenumber), itablefrequency
	outs 	ileftpan * asignal, irightpan * asignal
endin
instr 46 ; Sampled string bass
; INITIALIZATION
iamplitude = ampdb(p5) * 15848.926 / 15848.926
ileftpan = (0.5 - p6) / 2.0
irightpan = (0.5 + p6) / 2.0
ifrequency = cpsoct(p4)
itablefrequency = cpsoct(7)
itablenumber = 97
if p3 > .06 then goto longenvelope
p3 = .06
longenvelope:
; LOGGING
; p1 = Instrument
; p2 = Start
; p3 = Length
; p4 = Octave
; p5 = Decibels
; p6 = Pan
print p2, p3, p4, p5, p6
; KONTROL
kamplitude linen iamplitude, -1, p3, .02
; AUDIO
asignal loscil kamplitude, ifrequency, itablenumber, itablefrequency
outs ileftpan * asignal, irightpan * asignal
endin
instr 47 ; Steinway with Karpen's sndwarp
; INITIALIZATION
ifrequency = cpsoct(p4)
iamplitude = ampdb(p5) * 10
ileftpan = (0.5 - p6) / 2.0 * iamplitude
irightpan = (0.5 + p6) / 2.0 * iamplitude
isample = 102
istart = 0
ishift = 1 + (p4 - 5.5)
iwindowsize = sr / 20
irandom = iwindowsize * .2
ioverlap = 3
; Window function.
iwindow = 69

; KONTROL AND AUDIO
awarp line 1, p3, 10
aresample line ishift, p3, ishift
kenv line 1, p3, .1
awet,adry sndwarp kenv, awarp, aresample, isample, istart, iwindowsize, irandom, ioverlap, iwindow, 0
asignal balance awet, adry
outs asignal * ileftpan, asignal * irightpan
endin
instr 48 ; Kung FM with variable delay
; INITIALIZATION
; Normalize to 80 dB = ampdb(80).
iamplitude = 	ampdb(p5) * 15848.926 / 9000
ileftpan 	= 	(0.5 - p6) / 2.0
irightpan 	= 	(0.5 + p6) / 2.0
iattack 	= 	.05
irelease 	= 	.1
	if p3 > .15 then goto longenvelope
p3 	= 	.15
	longenvelope:
iattack 	= 	p3/3
isustain 	= 	p3/3
irelease 	= 	p3 - (iattack + isustain)
ip6 	= 	.4
ip7 	= 	2.2
ishift	=	8.0 / 1200.0
ipch	=	cpsoct(p4)
ioct	=	p4
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print p2, p3, p4, p5, p6
; KONTROL
kadsr	linseg	0,iattack,1,isustain,1,irelease,0
kmodi	linseg	0,iattack,5,isustain,3,irelease,0
kmodr	linseg	ip6,p3,ip7	;r moves from ip6 to ip7 in p3 secs.
; AUDIO
a1	=	kmodi*(kmodr - 1/kmodr)/2
a1ndx	=	abs(a1*2/20)	;a1*2 is argument normalized from 0-1.
a2	=	kmodi*(kmodr + 1/kmodr)/2
a3	tablei	a1ndx,43,1	;look up table is in f43, normalized index.
ao1	oscili	a1,ipch,42		;cosine
a4	=	exp(-0.5*a3+ao1)
ao2	oscili	a2*ipch,ipch,42		;cosine
aoutl	oscili	iamplitude*kadsr*a4,ao2+cpsoct(ioct+ishift),1	;final output left
aoutr	oscili	iamplitude*kadsr*a4,ao2+cpsoct(ioct-ishift),1	;final output right
aoutl1 	vdelay 	aoutl, sr/10, sr/10
aoutr1	vdelay 	aoutr, sr/12, sr/12
	outs	ileftpan * (aoutl + aoutl1), irightpan * (aoutr + aoutr1)
endin
instr 49 ; Kung FM Modulated Left and Right Detuned Chorusing
; INITIALIZATION
; Normalize to 80 dB = ampdb(80).
iamplitude	 = 	ampdb(p5) * 15848.926 / 4901
;ipp6	iunirand	1.5
ipp6	=	p6
ipp6	=	.75 - ipp6
ileftpan 	=	(0.5  - ipp6) / 2.0
irightpan 	= 	(0.5 + ipp6) / 2.0
iattack 	= 	.05
irelease	= 	.1
	if p3 > .15 then goto longenvelope
p3 	= 	.15
	longenvelope:
iattack 	= 	p3/3
isustain 	= 	p3/3
irelease 	= 	p3 - (iattack + isustain)
ip6 	= 	.3
ip7 	= 	2.2
ishift	=	8.0 / 1200.0
ipch	=	cpsoct(p4)
ioct	=	p4
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print p2, p3, p4, p5, p6
; KONTROL
kadsr	linseg	0,iattack,1,isustain,1,irelease,0
kmodi	linseg	0,iattack,5,isustain,3,irelease,0
kmodr	linseg	ip6,p3,ip7	;r moves from ip6 to ip7 in p3 secs.
; AUDIO
a1	=	kmodi*(kmodr - 1/kmodr)/2
a1ndx	=	abs(a1*2/20)	;a1*2 is argument normalized from 0-1.
a2	=	kmodi*(kmodr + 1/kmodr)/2
a3	tablei	a1ndx,43,1	;look up table is in f43, normalized index.
ao1	oscil	a1,ipch,42		;cosine
a4	=	exp(-0.5*a3+ao1)
ao2	oscil	a2*ipch,ipch,42		;cosine
aoutl	oscil	iamplitude*kadsr*a4,ao2+cpsoct(ioct+ishift),1	;final output left
aoutr	oscil	iamplitude*kadsr*a4,ao2+cpsoct(ioct-ishift),1	;final output right
	outs	ileftpan * aoutl, irightpan * aoutr
endin
instr 50 ; Steinway sampled with reverberation
; INITIALIZATION
iamplitude = 	ampdb(p5) * 15848.926 /  15848.926
ileftpan 	= 	(0.5 - p6) / 2.0
irightpan 	= 	(0.5 + p6) / 2.0
idetune	=	.013
ifrequency1 = 	cpsoct(p4 - idetune)
ifrequency2 = 	cpsoct(p4 +idetune)
ioctave 	=	int(p4 * 100)
itablenumber table 	ioctave + 100, 100
itableoctave table 	ioctave, 101
itablefrequency = 	cpsoct (itableoctave)
if p3 > .20  then goto longenvelope
p3 	= 	.20
longenvelope:
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print 	p2, p3, p4, p5, p6
	print 	itablenumber, itableoctave, itablefrequency
; KONTROL
kamplitude linen 	iamplitude, -1, p3, .012
kc	line 	30, p3, 100
; AUDIO
asignal1 	loscil 	kamplitude, ifrequency1, int(itablenumber), itablefrequency
asignal2 	loscil 	kamplitude, ifrequency2, int(itablenumber), itablefrequency
asignal3 	comb 	asignal1 + asignal2, kc, .02
	outs 	ileftpan * asignal3, irightpan * asignal3
endin
instr 51 ; Burt additive-synthesis piano
ifrequency 	= 	cpsoct(p4)
iamplitude 	= 	ampdb(p5) * 15848.926 /1119157.0
ileftpan	= 	(0.5 - p6) / 2.0 * iamplitude
irightpan	= 	(0.5 + p6) / 2.0  * iamplitude
inharm      = 	.05
;	Different timbres for different ranges of the piano.
;	Caused by relative amplitudes for each of 10 partials derived from a spectral analysis.
if p4 <=  5.0 igoto band1
if p4 <=  5.5 igoto band2
if p4 <=  6.0 igoto band3
if p4 <=  6.5 igoto band4
if p4 <=  7.0 igoto band5
if p4 <=  7.5 igoto band6
if p4 <=  8.0 igoto band7
if p4 <=  8.5 igoto band8
if p4 <=  9.0 igoto band9
if p4 <=  9.5 igoto band10
if p4 <= 10.0 igoto band11
if p4 <= 10.5 igoto band12
if p4 <= 11.0 igoto band13
igoto band14
band1:
ii1  = 0.0645
ii2  = 0.0637
ii3  = 0.5298
ii4  = 0.1291
ii5  = 0.7614
ii6  = 0.5413
ii7  = 0.1826
ii8  = 0.0381
ii9  = 0.0843
ii10 = 0.1000
igoto endbands
band2:
ii1  = 0.0515
ii2  = 0.1307
ii3  = 0.9412
ii4  = 0.1708
ii5  = 0.2045
ii6  = 0.1545
ii7  = 0.1964
ii8  = 0.0354
ii9  = 0.0973
ii10 = 0.1000
igoto endbands
band3:
ii1  = 0.3300
ii2  = 0.4269
ii3  = 1.0000
ii4  = 0.2288
ii5  = 0.2500
ii6  = 0.3307
ii7  = 0.4292
ii8  = 0.0419
ii9  = 0.1078
ii10 = 0.2000
igoto endbands
band4:
ii1  = 0.8208
ii2  = 0.9284
ii3  = 1.0000
ii4  = 0.3034
ii5  = 0.4688
ii6  = 0.7358
ii7  = 0.8332
ii8  = 0.0539
ii9  = 0.1229
i10 = 0.2000
igoto endbands
band5:
ii1  = 0.7424
ii2  = 1.0000
ii3  = 0.9312
ii4  = 0.2688
ii5  = 0.3858
ii6  = 0.5953
ii7  = 0.6407
ii8  = 0.0502
ii9  = 0.0964
ii10 = 0.1800
igoto endbands
band6:
ii1  = 0.4825
ii2  = 1.0000
ii3  = 0.8109
ii4  = 0.1882
ii5  = 0.1860
ii6  = 0.2480
ii7  = 0.2028
ii8  = 0.0407
ii9  = 0.0464
ii10 = 0.8000
igoto endbands
band7:
ii1  = 0.6303
ii2  = 0.7038
ii3  = 0.6034
ii4  = 0.1282
ii5  = 0.1345
ii6  = 0.1427
ii7  = 0.1101
ii8  = 0.0283
ii9  = 0.0265
ii10 = 0.0300
igoto endbands
band8:
ii1  = 0.9076
ii2  = 0.2595
ii3  = 0.3179
ii4  = 0.0555
ii5  = 0.0999
ii6  = 0.0592
ii7  = 0.0647
ii8  = 0.0117
ii9  = 0.0074
ii10 = 0.0240
igoto endbands
band9:
ii1  = 1.0000
ii2  = 0.1005
ii3  = 0.1693
ii4  = 0.0261
ii5  = 0.0682
ii6  = 0.0212
ii7  = 0.0334
ii8  = 0.0045
ii9  = 0.0000
ii10 = 0.0000
igoto endbands
band10:
ii1  = 1.0000
ii2  = 0.0842
ii3  = 0.0892
ii4  = 0.0182
ii5  = 0.0379
ii6  = 0.0061
ii7  = 0.0091
ii8  = 0.0019
ii9  = 0.0000
ii10 = 0.0000
igoto endbands
band11:
ii1  = 1.0000
ii2  = 0.0566
ii3  = 0.0548
ii4  = 0.0107
ii5  = 0.0189
ii6  = 0.0000
ii7  = 0.0000
ii8  = 0.0000
ii9  = 0.0000
ii10 = 0.0000
igoto endbands
band12:
ii1  = 1.0000
ii2  = 0.0235
ii3  = 0.0432
ii4  = 0.0034
ii5  = 0.0055
ii6  = 0.0000
ii7  = 0.0000
ii8  = 0.0000
ii9  = 0.0000
ii10 = 0.0000
igoto endbands
band13:
ii1  = 1.0000
ii2  = 0.0097
ii3  = 0.0303
ii4  = 0.0000
ii5  = 0.0000
ii6  = 0.0000
ii7  = 0.0000
ii8  = 0.0000
ii9  = 0.0000
ii10 = 0.0000
igoto endbands
band14:
ii1  = 1.0000
ii2  = 0.0057
ii3  = 0.0168
ii4  = 0.0000
ii5  = 0.0000
ii6  = 0.0000
ii7  = 0.0000
ii8  = 0.0000
ii9  = 0.0000
ii10 = 0.0000
igoto endbands
;
endbands:
i1  = ii1 ; * iamplitude
i2  = ii2 ; * iamplitude
i3  = ii3 ; * iamplitude
i4  = ii4 ; * iamplitude
i5  = ii5 ; * iamplitude
i6  = ii6 ; * iamplitude
i7  = ii7 ; * iamplitude
i8  = ii8 ; * iamplitude
i9  = ii9 ; * iamplitude
i10 = ii10 ;* iamplitude
;	Partials derived from Young's formula of inharm:
;	PartialHz = PartialIndex * FundamentalHz * sqrt(1 + Inharmonicity * (PartialIndex * PartialIndex))
i11 = cpsoct(p4)			;	Convert to Hertz.
i33 = cpsoct(p4 + .0025)	;	Left string sharp 25 cents.
i34 = cpsoct(p4 - .0025)    ;	Right string flat 25 cents.
i12 =  1 * i11 * sqrt(1 + inharm *   1)
i35 =  1 * i33 * sqrt(1 + inharm *   1)
i36 =  1 * i34 * sqrt(1 + inharm *   1)
i13 =  2 * i11 * sqrt(1 + inharm *   4)
i37 =  2 * i33 * sqrt(1 + inharm *   4)
i38 =  2 * i34 * sqrt(1 + inharm *   4)
i14 =  3 * i11 * sqrt(1 + inharm *   9)
i39 =  3 * i33 * sqrt(1 + inharm *   9)
i40 =  3 * i34 * sqrt(1 + inharm *   9)
i15 =  4 * i11 * sqrt(1 + inharm *  16)
i41 =  4 * i33 * sqrt(1 + inharm *  16)
i42 =  4 * i34 * sqrt(1 + inharm *  16)
i16 =  5 * i11 * sqrt(1 + inharm *  25)
i43 =  5 * i33 * sqrt(1 + inharm *  25)
i44 =  5 * i34 * sqrt(1 + inharm *  25)
i17 =  6 * i11 * sqrt(1 + inharm *  36)
i45 =  6 * i33 * sqrt(1 + inharm *  36)
i46 =  6 * i34 * sqrt(1 + inharm *  36)
i18 =  7 * i11 * sqrt(1 + inharm *  49)
i47 =  7 * i33 * sqrt(1 + inharm *  49)
i48 =  7 * i34 * sqrt(1 + inharm *  49)
i19 =  8 * i11 * sqrt(1 + inharm *  64)
i49 =  8 * i33 * sqrt(1 + inharm *  64)
i50 =  8 * i34 * sqrt(1 + inharm *  64)
i20 =  9 * i11 * sqrt(1 + inharm *  81)
i51=   9 * i33 * sqrt(1 + inharm *  81)
i52 =  9 * i34 * sqrt(1 + inharm *  81)
i21 = 10 * i11 * sqrt(1 + inharm * 100)
i53 = 10 * i33 * sqrt(1 + inharm * 100)
i54 = 10 * i34 * sqrt(1 + inharm * 100)
;
;   Randomness.
;
i22 = 12
k1  randi i1  * .3, i22, i1
k2  randi i2  * .3, i22, i2
k3  randi i3  * .3, i22, i3
k4  randi i4  * .3, i22, i4
k5  randi i5  * .3, i22, i5
k6  randi i6  * .3, i22, i6
k7  randi i7  * .3, i22, i7
k8  randi i8  * .3, i22, i8
k9  randi i9  * .3, i22, i9
k10 randi i10 * .3, i22, i10
i23 = 22
i24 = 18.5
i25 = 17.8
i26 = 4
i27 = 10.5
i28 = 6.5
i29 = 5.5
i30 = 3.8
i31 = 3.0
i32 = 2.0
;
;   Basic envelopes.
;
a1  linseg 0, .01, 1, 22,   0
a2  linseg 0, .01, 1, 18.5, 0
a3  linseg 0, .01, 1, 17.8, 0
a4  linseg 0, .01, 1, 4,    0
a5  linseg 0, .01, 1, 10.5, 0
a6  linseg 0, .01, 1, 6.5,  0
a7  linseg 0, .01, 1, 5.5,  0
a8  linseg 0, .01, 1, 3.8,  0
a9  linseg 0, .01, 1, 3,    0
a10 linseg 0, .01, 1, 2,    0
;
;   Mid-dip envelopes.
;
a11 linseg 1, i23 * .6,  1, i23 * .05, .5, i23 * .05, 1, i23 * .3,   1
a12 linseg 1, i24 * .5,  1, i24 * .05, .5, i24 * .05, 1, i24 * .4,   1
a13 linseg 1, i25 * .35, 1, i25 * .05, .5, i25 * .05, 1, i25 * .55,  1
a14 linseg 1, i26 * .37, 1, i26 * .05, .5, i26 * .05, 1, i26 * .53,  1
a15 linseg 1, i27 * .27, 1, i27 * .05, .5, i27 * .05, 1, i27 * .63,  1
a16 linseg 1, i28 * .27, 1, i28 * .05, .5, i28 * .05, 1, i28 * .63,  1
a17 linseg 1, i29 * .2,  1, i29 * .05, .5, i29 * .05, 1, i29 * .70,  1
a18 linseg 1, i30 * .18, 1, i30 * .05, .5, i30 * .05, 1, i30 * .72,  1
a19 linseg 1, i31 * .15, 1, i31 * .05, .5, i31 * .05, 1, i31 * .75,  1
a20 linseg 1, i32 * .1,  1, i32 * .05, .5, i32 * .05, 1, i32 * .80,  1
;
;	Randomize the mid-dip envelopes.
;
a11 = sqrt(a11) + abs(k1 )
a12 = sqrt(a12) + abs(k2 )
a13 = sqrt(a13) + abs(k3 )
a14 = sqrt(a14) + abs(k4 )
a15 = sqrt(a15) + abs(k5 )
a16 = sqrt(a16) + abs(k6 )
a17 = sqrt(a17) + abs(k7 )
a18 = sqrt(a18) + abs(k8 )
a19 = sqrt(a19) + abs(k9 )
a20 = sqrt(a20) + abs(k10)
;
;   Damping envelope.
;
a21 linseg 1, p3 - .15, 1, .15, 0
;
;   Total envelope = middip * basic * damping
;
a31 = a11 * a1  * sqrt(a21)
a32 = a12 * a2  * sqrt(a21)
a33 = a13 * a3  * sqrt(a21)
a34 = a14 * a4  * sqrt(a21)
a35 = a15 * a5  * sqrt(a21)
a36 = a16 * a6  * sqrt(a21)
a37 = a17 * a7  * sqrt(a21)
a38 = a18 * a8  * sqrt(a21)
a39 = a19 * a9  * sqrt(a21)
a40 = a20 * a10 * sqrt(a21)
;
;   Oscillators.
;
a41  oscili a31 * i1,  i12, 41
a42  oscili a31 * i1,  i35, 41
a43  oscili a31 * i1,  i36, 41
aout =        a41  + a42  + a43
a51  oscili a32 * i2,  i13, 41
a52  oscili a32 * i2,  i37, 41
a53  oscili a32 * i2,  i38, 41
aout = aout + a51  + a52  + a53
a61  oscili a33 * i3,  i14, 41
a62  oscili a33 * i3,  i39, 41
a63  oscili a33 * i3,  i40, 41
aout = aout + a61  + a62  + a63
a71  oscili a34 * i4,  i15, 41
a72  oscili a34 * i4,  i41, 41
a73  oscili a34 * i4,  i42, 41
aout = aout + a71  + a72  + a73
a81  oscili a35 * i5,  i16, 41
a82  oscili a35 * i5,  i43, 41
a83  oscili a35 * i5,  i44, 41
aout = aout + a81  + a82  + a83
a91  oscili a36 * i6,  i17, 41
a92  oscili a36 * i6,  i45, 41
a93  oscili a36 * i6,  i46, 41
aout = aout + a91  + a92  + a93
a101 oscili a37 * i7,  i18, 41
a102 oscili a37 * i7,  i47, 41
a103 oscili a37 * i7,  i48, 41
aout = aout + a101 + a102 + 1103
a111 oscili a38 * i8,  i19, 41
a112 oscili a38 * i8,  i49, 41
a113 oscili a38 * i8,  i50, 41
aout = aout + a111 + a112 + 1113
a121 oscili a39 * i9,  i20, 41
a122 oscili a39 * i9,  i51, 41
a123 oscili a39 * i9,  i52, 41
aout = aout + a121 + a122 + 1123
a131 oscili a40 * i10, i21, 41
a132 oscili a40 * i10, i53, 41
a133 oscili a40 * i10, i54, 41
aout = aout + a131 + a132 + 1133
;   Signal.
	outs 	aout * ileftpan, aout * irightpan
endin
instr 52 ; Fitch marimba
; INITIALIZATION
iamplitude = 	ampdb(p5) * 15848.926 /  2800.0
ileftpan 	= 	(0.5 - p6) / 2.0
irightpan 	= 	(0.5 + p6) / 2.0
i1 	= 	cpsoct(p4)
ip6 	= 	.15
i2 	= 	log(i1)/10.0 - ip6
icosinetable = 	34
if p3 > .06 then goto longenvelope
p3 	= 	.06
	longenvelope:
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print p2, p3, p4, p5, p6
; KONTROL
; Envelope.
k1 	expseg  	.0001, .03, iamplitude, p3 - .03, .001
k25 	linseg  	1, .03, 1, p3- .03, 3
k1	= 	k25 * k1
; Power to partials.
k10 	linseg 	2.25, .03, 3, p3 - .03, 2
; AUDIO
a1 	gbuzz 	k1, i1, k10, 0, 35, icosinetable
a2 	reson 	a1, 500, 50, 1
a3 	reson 	a2, 1500, 100, 1
a4 	reson 	a3, 2500, 150, 1
a5 	reson 	a4, 3500, 150, 1
a6 	balance 	a5, a1
i6 	= 	ip6
a7 	= 	a6 * ileftpan
a8 = 	a6 * irightpan
	outs 	a7, a8
endin
instr 53 ; Yamaha DX7 Algorithm  5
;====================================================================;
;                       Yamaha DX7 Algorithm  5                      ;
;                                                                    ;
;       p02 = start     p03 = dur       p04 = pch       p05 = vel    ;
;       p06 = panfac    p07 = vibdel    p08 = vibwth    p09 = vibhz  ;
;       p10 = op1fn     p11 = op2fn     p12 = op3fn     p13 = op4fn  ;
;       p14 = op5fn     p15 = op6fn     p16 = ampfn     p17 = pkamp  ;
;       p18 = rsfn      p19 = devfn     p20 = erisfn    p21 = edecfn ;
;       p22 = vsfn      p23 = velfn     p24 = feedfn    p25 = feedbk ;
;                                                                    ;
;       RFP 3:30 P.M. 7-7-89                                         ;
;====================================================================;
koff    	init    	0                       ;...use off flag instead
idur    	=       	abs(p3)
ibase   	=       	cpspch(p4)              ;p4 is keyboard pitch
iroct   	=       	octpch(p4)
irbase  	=       	octpch(4.09)            ;base of rate scl table
irrange 	=       	octpch(13.06)-irbase
iveloc  	=       	p5                      ;0 <= p5 <= 127
iop1fn  	=       	p10                     ;param tables for ops
 iop2fn  	=       	p11
iop3fn  	=       	p12
iop4fn  	=       	p13
iop5fn  	=       	p14
iop6fn  	=       	p15
iampfn  	=       	p16                     ;amp/level map function
ipkamp  	=       	p17                     ;scale for converter
irsfn   	=       	p18                     ;rate scaling function
idevfn  	=       	p19                     ;level/pkdev map func
irisefn 	=       	p20                     ;eg rise rate fn
idecfn  	=       	p21                     ;eg decay rate fn
ivsfn   	=       	p22                     ;vel sensitivity fn
ivelfn  	=       	p23                     ;vel/amp fac map fn
iveloc  	table   	iveloc,ivelfn           ;map this note's veloc
iveloc  	=       	iveloc * 1.10           ;range 0 -> 110 %
ifeedfn 	=       	p24
ifeed   	table   	p25,ifeedfn             ;0 <= p25 <= 7 (feedbk)
ifeed   	=       	ifeed/(2 * 3.14159)     ;dev in radians
idetfac 	=       	4                       ;max detuning divisor
imap128 	=       	127/99                  ;mapping constant 99->127
irscl   	table   	(iroct-irbase)/irrange*127,irsfn
irscl   	=       	irscl*6
iop     	=       	1                       ;start loop with op1
iopfn   	=       	iop1fn
	loop:
;---------------------------------read operator parameters
ilvl    	table   	0, iopfn
ivel    	table   	1, iopfn
iegr1   	table   	2, iopfn
iegr2   	table   	3, iopfn
        iegr3   table   4,iopfn
        iegr4   table   5,iopfn
        iegl1   table   6,iopfn
        iegl2   table   7,iopfn
        iegl3   table   8,iopfn
        iegl4   table   9,iopfn
        iams    table   10,iopfn
        imode   table   11,iopfn
        ifreq   table   12,iopfn
        idet    table   13,iopfn
        irss    table   14,iopfn
;----------------------------------initialize operator
        ihz     =       (imode > 0 ? ifreq : ibase * ifreq) + idet/idetfac
        iamp    =       ilvl/99         ;rescale to 0 -> 1
        ivfac   table   ivel,ivsfn

        iegl1   =       iamp*iegl1
        iegl2   =       iamp*iegl2
        iegl3   =       iamp*iegl3
        iegl4   =       iamp*iegl4

        iegl1   =       iegl1*(1-ivfac)+iegl1*ivfac*iveloc
        iegl2   =       iegl2*(1-ivfac)+iegl2*ivfac*iveloc
        iegl3   =       iegl3*(1-ivfac)+iegl3*ivfac*iveloc
        iegl4   =       iegl4*(1-ivfac)+iegl4*ivfac*iveloc

        irs     =       irscl*irss
        iegr1   =       (iegr1+irs > 99 ? 99 : iegr1+irs)
        iegr2   =       (iegr2+irs > 99 ? 99 : iegr2+irs)
        iegr3   =       (iegr3+irs > 99 ? 99 : iegr3+irs)
        iegr4   =       (iegr4+irs > 99 ? 99 : iegr4+irs)

        irfn    =       (iegl1 > iegl4 ? irisefn : idecfn)
        iegd1   table   iegr1,irfn               ;convert rate->dur
        ipct1   table   iegl4,irfn+1             ;pct fn is next one
        ipct2   table   iegl1,irfn+1
        iegd1   =       abs(iegd1*ipct1-iegd1*ipct2)
        iegd1   =       (iegd1 == 0 ? .001 : iegd1)

        irfn    =       (iegl2 > iegl1 ? irisefn : idecfn)
        iegd2   table   iegr2,irfn
        ipct1   table   iegl1,irfn+1
        ipct2   table   iegl2,irfn+1
        iegd2   =       abs(iegd2*ipct1-iegd2*ipct2)
        iegd2   =       (iegd2 == 0 ? .001 : iegd2)

        irfn    =       (iegl3 > iegl2 ? irisefn : idecfn)
        iegd3   table   iegr3,irfn
        ipct1   table   iegl2,irfn+1
        ipct2   table   iegl3,irfn+1
        iegd3   =       abs(iegd3*ipct1-iegd3*ipct2)
        iegd3   =       (iegd3 == 0 ? .001 : iegd3)

        iegd4   table   iegr4,idecfn
                if      (iegl3 <= iegl4) igoto continue
        ipct1   table   iegl3,irfn+1
        ipct2   table   iegl4,irfn+1
        iegd4   =       abs(iegd4*ipct1-iegd4*ipct2)
        iegd4   =       (iegd4 == 0 ? .001 : iegd4)
continue:
                if      (iop > 1) igoto op2
op1:
        i1egd1  =       iegd1
        i1egd2  =       iegd2
        i1egd3  =       iegd3
        i1egd4  =       iegd4
        i1egl1  =       iegl1
        i1egl2  =       iegl2
        i1egl3  =       iegl3
        i1egl4  =       iegl4
        i1ams   =       iams
        i1hz    =       ihz
        iop     =       iop + 1
        iopfn   =       iop2fn
                igoto   loop

op2:            if      (iop > 2) igoto op3
        i2egd1  =       iegd1
        i2egd2  =       iegd2
        i2egd3  =       iegd3
        i2egd4  =       iegd4
        i2egl1  =       iegl1
        i2egl2  =       iegl2
        i2egl3  =       iegl3
        i2egl4  =       iegl4
        i2ams   =       iams
        i2hz    =       ihz
        iop     =       iop + 1
        iopfn   =       iop3fn
                igoto   loop

op3:            if      (iop > 3) igoto op4
        i3egd1  =       iegd1
        i3egd2  =       iegd2
        i3egd3  =       iegd3
        i3egd4  =       iegd4
        i3egl1  =       iegl1
        i3egl2  =       iegl2
        i3egl3  =       iegl3
        i3egl4  =       iegl4
        i3ams   =       iams
        i3hz    =       ihz
        iop     =       iop + 1
        iopfn   =       iop4fn
                igoto   loop

op4:            if      (iop > 4) igoto op5
        i4egd1  =       iegd1
        i4egd2  =       iegd2
        i4egd3  =       iegd3
        i4egd4  =       iegd4
        i4egl1  =       iegl1
        i4egl2  =       iegl2
        i4egl3  =       iegl3
        i4egl4  =       iegl4
        i4ams   =       iams
        i4hz    =       ihz
        iop     =       iop + 1
        iopfn   =       iop5fn
                igoto   loop

op5:            if      (iop > 5) igoto op6
        i5egd1  =       iegd1
        i5egd2  =       iegd2
        i5egd3  =       iegd3
        i5egd4  =       iegd4
        i5egl1  =       iegl1
        i5egl2  =       iegl2
        i5egl3  =       iegl3
        i5egl4  =       iegl4
        i5ams   =       iams
        i5hz    =       ihz
        iop     =       iop + 1
        iopfn   =       iop6fn
                igoto   loop

op6:
        i6egd1  =       iegd1
        i6egd2  =       iegd2
        i6egd3  =       iegd3
        i6egd4  =       iegd4
        i6egl1  =       iegl1
        i6egl2  =       iegl2
        i6egl3  =       iegl3
        i6egl4  =       iegl4
        i6ams   =       iams
        i6hz    =       ihz
;=====================================================================
                if      koff > 1 kgoto exit     ;use this for mtu csound
                timout  idur,999,final          ;skip during final decay
        k1sus   linseg  i1egl4,i1egd1,i1egl1,i1egd2,i1egl2,i1egd3,i1egl3,1,i1egl3
        k2sus   linseg  i2egl4,i2egd1,i2egl1,i2egd2,i2egl2,i2egd3,i2egl3,1,i2egl3
        k3sus   linseg  i3egl4,i3egd1,i3egl1,i3egd2,i3egl2,i3egd3,i3egl3,1,i3egl3
        k4sus   linseg  i4egl4,i4egd1,i4egl1,i4egd2,i4egl2,i4egd3,i4egl3,1,i4egl3
        k5sus   linseg  i5egl4,i5egd1,i5egl1,i5egd2,i5egl2,i5egd3,i5egl3,1,i5egl3
        k6sus   linseg  i6egl4,i6egd1,i6egl1,i6egd2,i6egl2,i6egd3,i6egl3,1,i6egl3
        k1phs   =       k1sus
        k2phs   =       k2sus
        k3phs   =       k3sus
        k4phs   =       k4sus
        k5phs   =       k5sus
        k6phs   =       k6sus
                kgoto   output
final:
        k1fin   linseg  1,i1egd4,0,1,0
        k1phs   =       i1egl4+(k1sus-i1egl4)*k1fin
        k2fin   linseg  1,i2egd4,0,1,0
        k2phs   =       i2egl4+(k2sus-i2egl4)*k2fin
        k3fin   linseg  1,i3egd4,0,1,0
        k3phs   =       i3egl4+(k3sus-i3egl4)*k3fin
        k4fin   linseg  1,i4egd4,0,1,0
        k4phs   =       i4egl4+(k4sus-i4egl4)*k4fin
        k5fin   linseg  1,i5egd4,0,1,0
        k5phs   =       i5egl4+(k5sus-i5egl4)*k5fin
        k6fin   linseg  1,i6egd4,0,1,0
        k6phs   =       i6egl4+(k6sus-i6egl4)*k6fin
                if      (k1fin + k3fin + k5fin) > 0 kgoto   output
;                        turnoff                    ;n/a in mtu version
        koff    =       1 ;                         ;use off flag instead
output:
        k1gate  tablei  k1phs,iampfn                ;use iampfn for carriers
        k2gate  tablei  k2phs,idevfn                ;use idevfn for modulators
 	k3gate	tablei	k3phs,iampfn
 	k4gate	tablei	k4phs,idevfn
 	k5gate	tablei	k5phs,iampfn
 	k6gate	tablei	k6phs,idevfn

        a6sig   init    0               ;initialize for feedback
        a6phs   phasor  i6hz            ;ops to be modulated must use phase...
        a6sig   tablei  a6phs+a6sig*ifeed,1,1,0,1 ; ...modulation, not fm!
        a6sig   =       a6sig*k6gate

        a5phs   phasor  i5hz
        a5sig   tablei  a5phs+a6sig,1,1,0,1
        a5sig   =       a5sig*k5gate

        a4sig   oscili  k4gate,i4hz,1   ;unmodulated op; oscili is ok here.

        a3phs   phasor  i3hz
        a3sig   tablei  a3phs+a4sig,1,1,0,1
        a3sig   =       a3sig*k3gate

        a2sig   oscili  k2gate,i2hz,1

        a1phs   phasor  i1hz
        a1sig   tablei  a1phs+a2sig,1,1,0,1
        a1sig   =       a1sig*k1gate
                out     (a1sig + a3sig + a5sig) * ipkamp
exit:
endin
instr 54 ; Bergeman 2
; INITIALIZATION
; 1   2     3   4            5   6         7      8     9      10  11  12  13  14 15 16 17 18 19 20 21
; i2  82    .   624.37 5    626    6      17   53   17   63  .6    .6   4    6   6  3    2    1  1   4
ileftpan	= 	(0.5 - p6) / 2.0
irightpan	= 	(0.5 + p6) / 2.0
; Pitch
ip4	=	cpsoct(p4)
; Table 3
ip5 	=	125
; Pitch 2
ip6	=	1.005 * ip4
; Table 1
ip7	=	126
ip8	=	137
; Loudness
ip9 	= 	p5
; Table 2
ip10	=	137
; Loudness 2
ip11 	=	p5
ip12	=	.6
ip13	=	.7
ip14	=	4
ip15	=	6
ip16	=	6
ip17	=	3
ip18	=	2
ip19	=	1
ip20	=	1
ip21	=	4
idb1	=	ampdb(ip9)
idb2	=	ampdb(ip11)
irvgain1	=	ip12
irvgain2	=	ip13
; KONTROL
k1 	oscili 	idb1, 1/ p3, ip8
k2 	oscili 	idb2, 1/ p3, ip10
k3 	linen  	3, .9, p3, .3
k4 	randi 	k3, 10
k5 	randi 	k3, 15
k6 	linen 	ip20, ip14, p3, ip16
k7 	linen 	ip21, ip15, p3, ip17
k8 	oscili 	k6, ip18, 1
k9 	oscili 	k7, ip19, 1
; AUDIO
a1 	oscili 	k1, ip4 + k4 + k8, ip5
a2 	oscili 	k2, ip6 + k5 + k9, ip7
	outs 	ileftpan * a1, irightpan * a2
;garvbsig1 = garvbsig1+a1*irvgain1
;garvbsig2 = garvbsig2+a2*irvgain2
endin
instr 55 ; Bergeman 3
; INITIALIZATION
; ins  st        dur   func  meth  db   seed  rasp
; p1   2         3      4         5         6     7           8
; i3    116.5  4.5   2        1         42   .63        2
ip4	=	2
ip5	=	1
ip6	=	p5
ip7	=	.63
ip8	=	2
ifunc	=	ip4
imeth	=	ip5
iamp	= 	ampdb(ip6)
iseed	= 	ip7
ilforate	=	ip8
ita	=	143
itb	=	144
itc	=	145
itd	=	146
; KONTROL
if (imeth==1) kgoto 	randoma
if (imeth==2) kgoto 	randomb
if (imeth==3) kgoto 	randomc
if (imeth==4) kgoto 	randomd
	randoma:
kindex  	randh  	int(10), ilforate, iseed
kpitch  	table   	abs(kindex), ita
	kgoto 	next
	randomb:
kindex  	randh  	int(18), ilforate, iseed
kpitch  	table   	abs(kindex), itb
	kgoto 	next
randomc:
kindex  	randh  	int(9), ilforate, iseed
kpitch  	table   	abs(kindex), itc
	kgoto 	next
	randomd:
kindex  	randh  	int(6), ilforate, iseed
kpitch  	table   	abs(kindex), itd
	kgoto 	next
	next:
if ip6<50 	kgoto 	ra
if ip6>49 	kgoto 	rb
	ra:
k1 	linen 	iamp,.25*p3,p3,.2*p3
k2 	linen 	iamp,.2*p3,p3,.25*p3
k5 	line   	1500,p3,50
k6 	line   	1000,p3,50
: AUDIO
a1 	oscil 	k1,kpitch,ifunc
a2 	oscil 	k2,kpitch*1.002,ifunc
a5 	butterbp 	a1,k5,30
a6 	butterbp 	a2,k6,25
a7 	balance 	a5,a1
a8 	balance 	a6,a2
	outs 	a7,a8
;garvbsig3=garvbsig3+(a1+a2)*4
	rb:
k3 	linen 	iamp,.25*p3,p3,.2*p3
k4 	linen 	iamp,.2*p3,p3,.25*p3
k7 	line  	1500,p3,50
k8 	line  	1500,p3,50
a3 	oscil 	k3,kpitch,ifunc
a4 	oscil 	k4,kpitch*.998,ifunc
a9  	butterbp 	a3,k7,25
a10 	butterbp 	a4,k8,25
a11 	balance 	a9,a3
a12 	balance 	a10,a4
	outs 	a11,a12
;garvbsig4=garvbsig4+(a3+a4)*2
endin
instr 56 ; Risset Pseudo-Flanger
; INITIALIZATION
iattack 	= 	.015
idecay 	= 	.5
ifrequency = 	cpsoct(p4)
; Normalize to 80 dB = ampdb(80).
iamplitude = 	ampdb(p5) * 15848.926 / 42633.1
ileftpan 	= 	(0.5 - p6) / 2
irightpan 	= 	(0.5 + p6) / 2
; Offsets for oscillators based on original p6.
ioffset 	= 	0.04
i1 	= 	ioffset
i2 	= 	2 * ioffset
i3 	= 	3 * ioffset
i4 	= 	4 * ioffset
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print p2, p3, p4, p5, p6
; AUDIO
; A simple envelope to prevent clicking.
aenvelope linen 	iamplitude, iattack, p3, idecay
; Nine oscillators with the same envelope
; and waveform, but slightly different
; frequencies to create the beating effect.
a1 	oscili 	aenvelope, ifrequency, 33
a2 	oscili 	aenvelope, ifrequency + i1, 33
a3 	oscili 	aenvelope, ifrequency + i2, 33
a4 	oscili 	aenvelope, ifrequency + i3, 33
a5 	oscili 	aenvelope, ifrequency + i4, 33
a6 	oscili 	aenvelope, ifrequency - i1, 33
a7 	oscili 	aenvelope, ifrequency - i2, 33
a8 	oscili 	aenvelope, ifrequency - i3, 33
a9 	oscili 	aenvelope, ifrequency - i4, 33
asignal 	= 	a1 + a2 + a3 + a4 + a5 + a6 + a7 + a8 + a9
	outs 	asignal * ileftpan, asignal * irightpan
endin
instr 57 ; Plucked String
; INITIALIZATION
iattack 	= 	.012
irelease 	= 	.075
isustain 	= 	p3 - (iattack + irelease)
	if isustain > 0 goto longenvelope
isustain 	= 	0
p3 	= 	iattack + isustain + irelease
	longenvelope:
ifrequency = 	cpsoct(p4)
; Normalize to 80 dB = ampdb(80).
iamplitude = 	ampdb(p5) * 15848.926 / 5398.0
ileftpan 	= 	(0.5 - p6) / 2
irightpan 	= 	(0.5 + p6) / 2
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print p2, p3, p4, p5, p6
; KONTROL
kenvelope 	expseg 	.00001, iattack, iamplitude, isustain, iamplitude, irelease, .00001
; AUDIO
asignal1 	pluck 	1, ifrequency, ifrequency * 1.002, 0, 1
asignal2 	pluck 	1, ifrequency * 1.003, ifrequency, 0, 1
apluckout 	= 	(asignal1 + asignal2) * kenvelope
	outs 	ileftpan * apluckout, irightpan * apluckout
endin
instr 58 ; FM Low Index
; INITIALIZATION
imodulator 	= 	6.166667
ifmamplitude 	= 	3
index 	= 	.05
iattack 	= 	.015
irelease 	= 	.125
isustain 	= 	p3  - (iattack + irelease)
if isustain > 0 goto longenvelope
isustain 	= 	0.03
p3 	= 	iattack + isustain + irelease
	longenvelope:
ifrequency = 	cpsoct(p4)
icarrier 	=  	.998
icarrierb 	=  	1.002
; Normalize to 80 dB = ampdb(80).
iamplitude = 	ampdb(p5) * 15848.926 / 12729.0
ileftpan 	= 	(0.5 - p6) / 2.0
irightpan 	= 	(0.5 + p6) / 2.0
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print p2, p3, p4, p5, p6
; KONTROL
kindenv 	expseg 	.00001, iattack, 1, isustain, .1, irelease, .00001
kindex 	= 	kindenv * index * ifmamplitude
; AUDIO
aouta 	foscili 	iamplitude, ifrequency, icarrier, imodulator, kindex, 1
aoutb 	foscili 	iamplitude, ifrequency, icarrierb, imodulator, kindex, 1
afmout 	= 	(aouta + aoutb) * kindenv * 2.556
	outs 	ileftpan * afmout, irightpan * afmout
endin
instr 59 ; Nelson Shimmer
; INITIALIZATION
iduration 	= 	p3
ifrequency = 	cpsoct(p4)
; Normalize to 80 dB = ampdb(80).
iamplitude = 	ampdb(p5) * 15848.926 / 2480.4
ileftpan 	= 	(0.5 - p6) / 2.0
irightpan 	= 	(0.5 + p6) / 2.0
ipower 	= 	3
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print p2, p3, p4, p5, p6
; KONTROL
k1 	linseg 	0, iduration / 2, iamplitude, iduration / 2, 0
k2 	randi 	2, 25
k3 	oscili 	.03, 4 + k2, 1
; AUDIO
a1 	gbuzz 	.33 + k3, ifrequency, ipower, 1, 50, 4
k4 	randi 	1.2, 15
k5 	oscili 	.03, 4 + k2, 1
a2 	gbuzz 	.33 + k5, ifrequency + (ifrequency *.02), ipower, 1, 50, 4
k6 	randi 	1.5, 20
k7 	oscili 	.03, 4 + k2, 1
a3 	gbuzz 	.33 + k7, ifrequency - (ifrequency * .021), ipower, 1, 50, 4
a4 	= 	(a1 + a2 + a3) * k1
	outs 	a4 * ileftpan, a4 * irightpan
endin
instr 60 ; Plucked String Filtered
; INITIALIZATION
iattack 	= 	.02
irelease 	= 	.075
isustain 	= 	p3  - (iattack + irelease)
	if isustain > 0 goto longenvelope
isustain 	= 	0
p3 	= 	iattack + isustain + irelease
	longenvelope:
ifrequency = 	cpsoct(p4)
; Normalize to 80 dB = ampdb(80).
iamplitude = 	ampdb(p5) * 15848.926 / 24681.1
ileftpan 	= 	(0.5 - p6) / 2
irightpan 	= 	(0.5 + p6) / 2
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print p2, p3, p4, p5, p6
; KONTROL
kenvelope expseg 	.00001, iattack, iamplitude, isustain, iamplitude, irelease, .00001
; AUDIO
asignal1 	pluck 	1, ifrequency, ifrequency * 1.002, 0, 6
asignal2 	pluck 	1, ifrequency * 1.003, ifrequency, 0, 6
apluckout 	= 	(asignal1 + asignal2) * kenvelope * 7.5257
	outs 	ileftpan * apluckout, irightpan * apluckout
endin
instr 61 ; FM Moderate Index
; INITIALIZATION
icarrier 	= 	1
iratio 	= 	1.25
ifmamplitude = 	8
index 	= 	5.4
iattack 	= 	.02
irelease 	= 	.05
isustain 	= 	p3  - (iattack + irelease)
if isustain > 0 goto longenvelope
isustain 	= 	0
p3 	= 	iattack + isustain + irelease
	longenvelope:
ifrequency = 	cpsoct(p4)
ifrequencyb = 	ifrequency * 1.003
icarrierb 	= 	icarrier * 1.004
; Normalize to 80 dB = ampdb(80).
iamplitude = 	ampdb(p5) * 15848.926 / 12748.1
ileftpan 	= 	(0.5 - p6) / 2.0
irightpan 	= 	(0.5 + p6) / 2.0
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print 	p2, p3, p4, p5, p6
; KONTROL
kindenv 	expseg 	.000001, iattack, 1, isustain, .125, irelease, .000001
kindex 	= 	kindenv * index * ifmamplitude
; AUDIO
aouta 	foscili 	iamplitude, ifrequency, icarrier, iratio, index, 1
aoutb 	foscili 	iamplitude, ifrequencyb, icarrierb, iratio, index, 1
; Plus amplitude correction.
afmout 	= 	(aouta + aoutb) * kindenv * 2.565
	outs 	ileftpan * afmout, irightpan * afmout
endin
instr 62 ; Vercoe Plucked String FM Vox
; INITIALIZATION
itime 	= 	p2
iduration 	= 	p3
ifrequency = 	cpsoct(p4)
iformant = 	cpsoct(p4 / 3)
; Normalize to 80 dB = ampdb(80).
iamplitude = 	ampdb(p5) * 15848.926 / 12000
ileftpan 	= 	(0.5 - p6) / 2
irightpan 	= 	(0.5 + p6) / 2
ipluckamplitude = 	1
ipluckduration = 	.9 * p3
ipluckoff 	= 	p3 - ipluckduration
ifmamplitude = 	1
ifmattack 	= 	.2 * p3
ifmdecay 	= 	.35
ifmoff 	= 	p3 - (ifmattack + ifmdecay)
index 	= 	5
ivibratodepth = 	1
ivibratorate = 	5
iformantamplitude = 	p4 / 3
iformantattack = 	.6
iformantdecay = 	p3 - iformantattack
ioverlaps 	= 	200
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
print 	p2, p3, p4, p5, p6
; KONTROL
kpluck 	linseg 	ipluckamplitude, ipluckduration, 0, ipluckoff, 0
; AUDIO
apluck1 	pluck 	iamplitude, ifrequency, ifrequency, 0, 1
apluck2 	pluck 	iamplitude, ifrequency * 1.003, ifrequency * 1.003, 0, 1
apluck 	= 	kpluck * (apluck1 + apluck2)
kfm 	linseg 	0, ifmattack, ifmamplitude, ifmdecay, 0, ifmoff, 0
kindex 	= 	kfm * index
afm1 	foscili 	iamplitude, ifrequency, 1, 2, kindex, 30
afm2 	foscili 	iamplitude, ifrequency * 1.003, 1.003, 2.003, kindex, 30
afm 	= 	kfm * (afm1 + afm2)
kformant 	linseg 	0, iformantattack, iformantamplitude, iformantdecay, 0
kvibrato 	oscili 	ivibratodepth, ivibratorate, 30
aformant1 	fof 	iamplitude, ioverlaps + kvibrato, iformant, 0, 40, .003, .017, .007, 4, 30, 31, p3
aformant2 	fof 	iamplitude, (ioverlaps * 1.001) + kvibrato * .009, iformant, 0, 40, .003, .017, .007, 10, 30, 31, p3
aformant 	= 	kformant * (aformant1 + aformant2)
asignal 	= 	apluck + afm + aformant
	outs 	asignal * ileftpan, asignal * irightpan
endin
instr 63 ; Risset Waveshaper
; INITILIZATION
iattack 	= 	0.015
irelease 	= 	0.03
isustain 	= 	p3 - (iattack + irelease)
	if isustain > 0 goto longenvelope
isustain 	= 	0
p3 	= 	iattack + isustain + irelease
	longenvelope:
ifrequency = 	cpsoct(p4)
; Normalize to 80 dB = ampdb(80).
iamplitude = 	ampdb(p5) * 15848.926 / 12649.9
ileftpan 	= 	(0.5 - p6) / 2.0
irightpan 	=	(0.5 + p6) / 2.0
i1 	= 	1 / p3
i2 	= 	ifrequency
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print p2, p3, p4, p5, p6
; AUDIO
; Scaling factor.
a1 	oscili 	iamplitude, i1, 2
a2 	oscili 	a1, i2, 1
a3 	linenr 	1, iattack, irelease, .01
a4 	oscili 	a3, i2 * .7071, 1
; Transfer function:
; f(x)=1+.841x-.707x**2-.595x**3+.5x**4+.42x**5-;.354x**6.279x**7+.25x**8+.21x**9
a5 	= 	a4 * a4
a6 	= 	a5 * a4
a7 	= 	a5 * a5
a8 	= 	a7 * a4
a9 	= 	a6 * a6
a10 	= 	a9 * a4
a11 	= 	a10 * a4
a12 	= 	a11 * a4
a13 	= 	1 + .841 * a4 - .707 * a5 - .595 * a6 + .5 * a7 + .42 * a8 - .354 * a9 - .297 * a10 + .25 * a11 + .21 * a12
; Amplitude correction.
a14 	=  	a13 * a2 * 5.06
	outs 	a14 * ileftpan, a14 * irightpan
endin
instr 64 ; Morrill FM Trumpet
; INITIALIZATION
iduration 	= 	p3
icarrier1 	= 	cpsoct(p4)
; Normalize to 80 dB = ampdb(80).
iamplitude = 	ampdb(p5) * 15848.926 / 2998.7
ileftpan 	= 	(0.5 - p6) / 2.0
irightpan 	= 	(0.5 + p6) / 2.0
icarrier2 	= 	1500
index1 	= 	2.66
index2 	= 	1.8
imodulator = 	icarrier1
iratio = 	index2 / index1
ivibratowidth = 	.007
irandev 	= 	.007
ifqr 	= 	125
ivibratorate = 	7
iportamentodeviation = .03
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print p2, p3, p4, p5, p6
; KONTROL
; Vibrato signal.
kwidth 	linseg 	0, .6, ivibratowidth, iduration - .6 - .2, ivibratowidth, .2, 0
kv1 	randi 	irandev, ifqr
kv2 	oscili 	kwidth, ivibratorate, 1
kv3 	oscili 	iportamentodeviation, 1 / iduration, 32
kvibrato 	= 	(1 + kv1) * (1 + kv2) * (1 + kv3)
; Double carrier, single modulator frequency modulation signal.
kdynamic 	linseg 	0, .03, 1, iduration - .03 - .01, .9, .01, 0
; AUDIO
amodulator oscili 	kdynamic * imodulator * index1, imodulator * kvibrato, 1
kamplitude1 linseg 	0, .03, 1, iduration - .03 - .15, .9, .15, 0
a1 	oscili 	kamplitude1 * iamplitude, amodulator + (icarrier1 * kvibrato), 1
kamplitude2 linseg 	0, .03, 1, iduration - .03 - .3, .9, .3, 0
a2 	oscili 	kamplitude2 * iamplitude * .2, ((amodulator * iratio) + (icarrier2 * kvibrato)), 1
asignal 	= 	a1 + a2
	outs 	asignal * ileftpan, asignal * irightpan
endin
instr 65 ; Schottstaedt FM String
; INITIALIZATION
irise 	= 	.2
idecay 	= 	.2
ivibdel 	= 	.4
ivibwth 	= 	.01
ivibrte 	= 	5
ifc 	= 	cpsoct(p4)
; Normalize to 80 dB = ampdb(80).
iamplitude = 	ampdb(p5) * 15848.926 / 5000.0
ileftpan 	= 	(0.5 - p6) / 2
irightpan 	= 	(0.5 + p6) / 2
ifm1 	= 	ifc
ifm2 	= 	ifc * 3
ifm3 	= 	ifc * 4
; Range from carrier 2 to 1.
index1 	= 	7.5 / log(ifc)
; Range from carrier 2.6 to .5.
index2 	= 	15 / sqrt(ifc)
; Range from carrier .2 to .083
index3 	= 	1.25 / sqrt(ifc)
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print p2, p3, p4, p5, p6
; KONTROL
kvibrato 	init 	0
; Delays vibrato for ivibdel seconds.
timout 	0, 	ivibdel, transient
; Vibrato control envelope.
kvbctl 	linen 	1, .5, p3 - ivibdel, .1
; Random deviation in vibrato width.
krnd 	randi 	.005, 11
; Vibrato generator.
kvibrato 	oscili 	kvbctl * ivibwth + krnd, ivibrte * kvbctl, 1
	transient:
; Execute for .2 seconds only.
	timout 	.2, 	p3, continue
; Transient envelope.
ktrans 	linseg 	1, .2, 0, 1, 0
; AUDIO
; Noise...
anoise 	randi 	ktrans, .4 * ifc
; ...centered around 2 KHz.
attack 	oscili 	anoise, 2000, 1
	continue:
amod1 	oscili 	ifm1 * (index1 + ktrans), ifm1, 1
amod2 	oscili 	ifm2 * (index2 + ktrans), ifm2, 1
amod3 	oscili 	ifm3 * (index3 + ktrans), ifm3, 1
aenvelope linen 	iamplitude + attack, irise, p3, idecay
asignal 	oscili 	aenvelope, (ifc + amod1 + amod2 + amod3) * (1 + kvibrato), 1
	outs 	asignal * ileftpan, asignal * irightpan
endin
instr 66 ; Chowning Soprano
; INITIALIZATION
iattack 	= 	.02
irelease 	= 	.1
isustain 	= 	p3 - (iattack + irelease)
if isustain > 0 goto longenvelope
isustain 	= 	0
p3 	= 	iattack + isustain + irelease
	longenvelope:
ifrequency = 	cpsoct(p4)
; Normalize to 80 dB = ampdb(80).
iamplitude 	= 	ampdb(p5) * 15848.926 / 18000.0
ileftpan 	= 	(0.5 - p6) / 2.0
irightpan 	= 	(0.5 + p6) / 2.0
i7 	= 	ifrequency
i2 	= 	i7 * 7 ; Old p6.
i2 	= 	(i2 / i7) + .5
i2 	= 	int(i2)
i3 	= 	.009 ; Old p7.
i4 	= 	p4 / 150 ; Old p8.
i5 	= 	p4 / 6 * .4 ; .09 = old p9.
i6 	= 	p4 / 5 + 1 ; Old p10.
i8 	= 	i5 / i4
i9 	= 	exp(1.5 * log(iamplitude / 32767))
i10 	= 	.00311 * log(ifrequency)
i11 	= 	sqrt(iamplitude / 32767)
i12 	= 	(1 - i3) * i11
i13 	= 	i4 * i7
i14 	= 	i9 * i3
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print p2, p3, p4, p5, p6
; AUDIO
a1 	linen 	i12, .1, p3, .08
a2 	oscili 	i13, i7, 3
a8 	= 	i7 + a2
a4 	linen 	i10, .6, p3, .1
a4 	oscili 	a4, i6, 3
a5 	randi 	i10, 15
a6 	linseg 	-.03, .07, .03, .03, 0, p3 - irelease, 0
a6 	= 	a4 + a5 + a6 + 1.
a1 	oscili 	a1, (a8 + a2) * a6, 3
a7 	= 	(a2 * i8) + i2
a3 	linseg 	0, .07, .1, .03, 1., p3 - .18, 1, .02, .1, .06, 0
a3 	= 	a3 * (i9 * i3)
a3 	oscili 	a3, a7 * a6, 3
asignal 	= 	(a1 + a3) * iamplitude * 14.0350
	outs 	asignal * ileftpan, asignal * irightpan
endin
instr 67 ; Guitar
; INITIALIZATION
iattack 	= 	.015
irelease 	= 	.065
isustain 	= 	p3 - (iattack + irelease)
if isustain > 0 goto longenvelope
isustain 	= 	0
p3 	= 	iattack + isustain + irelease
	longenvelope:
ifrequency = 	cpsoct(p4)
; Normalize to 80 dB = ampdb(80).
iamplitude = 	ampdb(p5) * 15848.926 / 1848
ileftpan 	= 	(0.5 - p6) / 2.0
irightpan 	= 	(0.5 + p6) / 2.0
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print p2, p3, p4, p5, p6
; KONTROL
kamp	linseg	0.0, iattack, iamplitude, isustain, iamplitude, irelease, 0.0
; AUDIO
asig	pluck 	kamp, ifrequency, ifrequency, 0, 1
af1	reson	asig, 110, 80
af2	reson	asig, 220, 100
af3	reson	asig, 440, 80
aout	balance 0.6*af1+af2+0.6*af3+0.4*asig, asig
	outs 	aout * ileftpan, aout* irightpan
endin
instr 68 ; Guitar Harmonics
; INITIALIZATION
iattack 	= 	.015
irelease 	= 	.02
isustain 	= 	p3 - (iattack + irelease)
if isustain > 0 goto longenvelope
isustain 	= 	0
p3 	= 	iattack + isustain + irelease
	longenvelope:
ifrequency	 = 	cpsoct(p4)
; Normalize to 80 dB = ampdb(80)
iamplitude = 	ampdb(p5) * 15848.926 / 1220
ileftpan 	= 	(0.5 - p6) / 2.0
irightpan 	=	(0.5 + p6) / 2.0
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
print p2, p3, p4, p5, p6
; KONTROL
kamp	linseg 	0.0, iattack, iamplitude, isustain, iamplitude,irelease, 0.0
; AUDIO
asig	pluck	kamp, ifrequency, ifrequency, 0, 6
	outs 	asig * ileftpan, asig * irightpan
endin
instr 69 ; Kung Plucked Strings Chorused Pitch-Shifted Delayed Exponentially
; INITIALIZATION
	if p3 > .015  then goto longenvelope
p3 	= 	.015
	longenvelope:
; Normalize to 80 dB = ampdb(80).
iamplitude = 	ampdb(p5) * 15848.926 / 6375
ileftpan 	= 	(0.5 - p6) / 2.0
irightpan 	= 	(0.5 + p6) / 2.0
ishift	=	8.0 / 1200.0
ipch	=	cpsoct(p4)
ioct	=	p4
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print p2, p3, p4, p5, p6
; KONTROL
kvib	oscil	1.0 / 120.0, ipch / 50.0, 41	;vibrato
; AUDIO
ag	pluck	iamplitude, cpsoct(ioct + kvib), iamplitude / 2, 1, 1
agleft	pluck	iamplitude, cpsoct(ioct + ishift), iamplitude / 2, 1, 1
agright	pluck	iamplitude, cpsoct(ioct - ishift), iamplitude / 2, 1, 1
kf1	expon 	.1, p3, 1.0	;exponential from 0.1 to 1.0
kf2	expon	1.0, p3, .1	;exponential from 1.0 to 0.1
adump	delayr	2.0		;set delay line of 2.0 sec
	delayw	ag		;put ag signal into delay line.
atap1	deltapi	kf1		;tap delay line with kf1 function.
atap2	deltapi      kf2		;tap delay line with kf2 function.
ad1	deltap	2.0		;delay 2 sec.
ad2	deltap	1.1		;delay 1.1 sec.
	outs	ileftpan * (agleft+atap1+ad1), irightpan * (agright+atap2+ad2)
endin
instr 70 ; Kung Plucked String Chorused Pitch-Shifted Delayed
; INITIALIZATION
; Normalize to 80 dB = ampdb(80).
iamplitude = 	ampdb(p5) * 15848.926 / 4200
iattack 	= 	.015
irelease 	= 	.03
isustain 	= 	p3 - (iattack + irelease)
	if isustain > 0 goto longenvelope
isustain 	= 	0
	longenvelope:
p3 	= 	iattack + isustain + irelease
ileftpan 	= 	(0.5 - p6) / 2.0
irightpan 	= 	(0.5 + p6) / 2.0
ishift 	= 	8.0 / 1200.0
ipch 	= 	cpsoct(p4)
ioct 	= 	p4
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print p2, p3, p4, p5, p6
; KONTROL
kvib 	oscili 	1.0 / 120.0, ipch / 50.0, 41
; AUDIO
aenv 	expseg 	1.0 / 10000.0, iattack, 1.0, isustain, 1.0, irelease, 1.0 / 10000.0
ag 	pluck 	iamplitude,cpsoct(ioct+kvib),iamplitude/2,1,1
agleft 	pluck 	iamplitude,cpsoct(ioct+ishift),iamplitude/2,1,1
agright 	pluck 	iamplitude,cpsoct(ioct-ishift),iamplitude/2,1,1
adump 	delayr 	0.3
	delayw 	ag * aenv ;put ag signal into delay line.
	ad1 	deltap 	0.1
	ad2 	deltap 	0.21
	outs 	ileftpan * aenv * (agleft + ad1), irightpan * aenv * (agright + ad2)
endin
instr 71 ; Kelley Violin
; INITIALIZATION
; p3 = duration
; ip4 = slur information
ip4 	= 	0
icpsp   	= 	cpsoct(p4)
; Normalize to 80 dB = ampdb(80).
ip6 	= 	ampdb(p5) * 15848.926 /  2727.7
ileftpan 	= 	(0.5 - p6) / 2.0
irightpan 	= 	(0.5 + p6) / 2.0
	if (ip4 == int(p4/2) * 2) goto initslurs
	ihold
	initslurs:
iatttm  	= 	0.075
idectm  	= 	0.1
isustm  	= 	p3 - iatttm - idectm
idec    	= 	p6
ireinit 	= 	-1
	if (ip4 > 1) goto checkafterslur
ilast   	= 	0
	checkafterslur:
	if (ip4 == 1 || ip4 == 3) goto doneslurs
idec 	= 	0
ireinit 	= 	0
	doneslurs:
	if (isustm <= 0) goto simpleenv
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print p2, p3, p4, p5, p6
; KONTROL
kamp 	linseg 	ilast, iatttm, ip6, isustm, ip6, idectm, idec, 0, idec
	goto doneenv
	simpleenv:
kamp 	linseg 	ilast, p3 / 2, ip6, p3 / 2, idec, 0, idec
	doneenv:
ilast 	= 	ip6
; Some randomness for fun.
krnd 	randi  	.1, 10
krnd 	= 	krnd + 1
kamp 	= 	kamp * krnd
; Some vibrato.
kvrandamp  rand 	.0125
kvamp   	= 	icpsp * (0.0125 + kvrandamp)
kvrandfreq rand 1
kvfreq  	= 	5 + kvrandfreq
kvbra  	oscili 	kvamp, kvfreq, 1, ireinit
kfreq 	= 	icpsp + kvbra
; AUDIO
a1 	oscili 	kamp, kfreq, 45, ireinit
; Some resonance cavities.
a2 	tone 	a1, 3500, ireinit
a3 	comb 	a2, .15, .01, ireinit
a4 	comb 	a3, .15, .02, ireinit
	outs 	a1 * ileftpan, a1 * irightpan
endin
instr 72 ; Kelley Harpsichord
; INITIALIZATION
; Envelope initialization.
iduration 	= 	p3
ifrequency = 	cpsoct(p4)
; Normalize to 80 dB = ampdb(80).
iamplitude = 	ampdb(p5) * 15848.926 / 4739
ileftpan 	= 	(0.5 - p6) / 2.0
irightpan 	= 	(0.5 + p6) / 2.0
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print p2, p3, p4, p5, p6
; KONTROL
kenvelope 	expon 	iamplitude, iduration, 1
; AUDIO
apluck 	pluck 	iamplitude, ifrequency, ifrequency, 0, 1
aharp 	oscili 	kenvelope, ifrequency, 46
aoutsignal = 	apluck + aharp
	outs 	aoutsignal * ileftpan, aoutsignal * irightpan
endin
instr 73 ; Kelley Oboe
; INITIALIZATION
icpsp   	= 	cpsoct(p4)
; Normalize to 80 dB = ampdb(80).
ip6 	= 	ampdb(p5) * 15848.926 / 2500
ileftpan 	= 	(0.5 - p6) / 2.0
irightpan 	= 	(0.5 + p6) / 2.0
ip4 	= 	0
	if (ip4 == int(ip4/2) * 2) goto initslurs
	ihold
	initslurs:
iatttm  	= 	0.06
idectm  	= 	0.05
isustm  	= 	p3 - iatttm - idectm
idec    	= 	p6
ireinit 	= 	-1
	if (ip4 > 1) goto checkafterslur
ilast   	= 	0
	checkafterslur:
if (ip4 == 1 || ip4 == 3) goto doneslurs
idec 	= 	0
ireinit 	= 	0
	doneslurs:
	if (isustm <= 0) goto simpleenv
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print p2, p3, p4, p5, p6
; KONTROL
kamp 	linseg 	ilast, iatttm, ip6, isustm, ip6, idectm, idec, 0, idec
	goto doneenv
	simpleenv:
kamp 	linseg 	ilast, p3 / 2, ip6, p3 / 2, idec, 0, idec
	doneenv:
ilast 	= 	ip6
; Some vibrato.
kvrandamp rand 	.003
kvamp   	= 	icpsp * (0.007 + kvrandamp)
kvrandfreq rand 	1
kvfreq  	= 	5 + kvrandfreq
kvbra  	oscili 	kvamp, kvfreq, 1, ireinit
kfreq 	= 	icpsp + kvbra
; AUDIO
a1 	oscili 	kamp, kfreq, 47, ireinit
	outs 	a1 * ileftpan, a1 * irightpan
endin
instr 74 ; Nelson Finger Cymbals
; INITIALIZATION
ifrequency = 	cpsoct(p4)
; Normalize to 80 dB = ampdb(80).
iamplitude = 	ampdb(p5) * 15848.926 /  2491
ileftpan 	= 	(0.5 - p6) / 2.0
irightpan 	= 	(0.5 + p6) / 2.0
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print p2, p3, p4, p5, p6
; KONTROL
; Amplitude envelope.
k1 	expseg  	.0001, .05, iamplitude, p3 - .05, .0001
; Power to partials.
k2 	linseg 	1.69, .1, 1.75, p3 -.1, 1.69
; AUDIO
a1 	foscili	k1, ifrequency, 1, 2.01, k2, 1
	outs 	a1 * ileftpan, a1 * irightpan
endin
instr 75 ; Nelson Melody Instrument (Chebyshev / FM / Additive)
; INITIALIZATION
i1 	= 	cpsoct(p4)
; Normalize to 80 dB = ampdb(80).
iamplitude = 	ampdb(p5) * 15848.926 /  15848.926
ileftpan 	= 	(0.5 - p6) / 2.0
irightpan 	= 	(0.5 + p6) / 2.0
;ip6	=	cheby#
ip6 	= 	32
;ip7	=	choice
ip7 	=	1
iattack 	= 	.05
irelease 	= 	.1
isustain 	= 	p3 - (iattack + irelease)
	if isustain > 0 goto longenvelope
isustain 	= 	0
p3 	=	 iattack + isustain + irelease
	longenvelope:
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print p2, p3, p4, p5, p6
; KONTROL
k100 	randi   	1,10
k101 	oscili  	i1 / 65, 5 + k100, 1
k102 	linseg  	0, .5, 1, p3 - .5, 1
k100 	=  	i1 + (k101 * k102)
; Envelope for driving oscillator.
k1 	linen 	.5, p3 * .4, p3 , p3 * .2
k2 	line 	1, p3, .5
k1 	=  	k2 * k1
	if ip7 = 2 goto cresc
	if ip7 = 3 goto dim
	if ip7 = 4 goto sfz
	if ip7 = 5 goto slow
; Amplitude envelope.
k10 	expseg  	.0001, iattack, iamplitude , isustain, iamplitude * .8, irelease, .0001
; Power to partials.
k20 	linseg 	1.485, iattack, 1.5, isustain + irelease, 1.485
	goto next
	cresc:
; Amplitude envelope.
k8 	expseg  	.0001, iattack, p5 * .25, isustain, p5, irelease, .0001
k9 	linseg 	1, p3 - .15, 1.5, .1, 0
k10  	= 	(k8 * k9) / 2
; Power to partials.
k20 	line 	1.475, p3, 1.5
	goto next
	dim:
; Amplitude envelope.
k10 	linseg  	0, .05, iamplitude, .05, iamplitude * .8, p3 * .33, p5 *.7, (p3 * .66) - .1, 0
; Power to partials.
k20 	line 	1.5, p3, 1.475
	goto next
	sfz:
; Amplitude envelope.
k10 	linseg  	0, .03, p5, .04, p5, .03, p5 * .3, p3 - .15, p5 * .3, .05, 0
; Power to partials.
k20 	linseg  	1.4, .03, 1.7, .04, 1.7, .03, 1.4, p3 - .1, 1.385
	goto next
	slow:
; Amplitude envelope.
k10 	linseg  	0,.06, p5 * .45, .04, p5 * .2, (p3 / 3) - .1, p5, p3 / 3, p5 * .9, p3 / 3, 0
; Power to partials.
k20 	linseg 	1.475, p3 / 3, 1.5, p3 / 3, 1.4999, p3 / 3, 1.475
	next:
;a1-3 are for cheby with p6=1-4
a1 	oscili  	k1, k100 - .025, 3
; Tables a1 to fn13, others normalize,
a2 	tablei  	a1, ip6, 1, .5
a3 	balance 	a2,a1
; Try other waveforms as well.
a4 	foscil  	1, k100 + .04, 1, 2.005, k20, 1
a5 	oscili  	1, k100, 1
a6  	=  	((a3 * .1) + (a4 * .1) + (a5 * .8)) * k10
a7 	comb 	a6, .5, 1 / i1
a6  	= 	(a6 * .9) + (a7 * .1)
	outs a6 * ileftpan, a6 * irightpan
endin
instr 76 ; Nelson Marimba
; INITIALIZATION
ifrequency = 	cpsoct(p4)
iattack 	= 	.02
irelease 	= 	p3
isustain 	= 	p3 - (iattack + irelease)
	if isustain > 0 goto longenvelope
isustain 	= 	0
p3 	= 	iattack + isustain + irelease
	longenvelope:
; Normalize to 80 dB = ampdb(80).
iamplitude = 	ampdb(p5) * 15848.926 /  4185
ileftpan 	= 	(0.5 - p6) / 2.0
irightpan 	= 	(0.5 + p6) / 2.0
kformant1 	= 	ifrequency / 2.1
kformant2 	= 	kformant1 * 2.1
kformant3 	= 	kformant2 * 2.1
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print p2, p3, p4, p5, p6
; KONTROL
; Amplitude envelope
k1  	expseg  	.000001, iattack, iamplitude , irelease, .000001
k25  	linseg 	1, iattack, 1, irelease,4
k1 	=  	k25 * k1
; Power to partials.
k10 	linseg  	2.25, iattack, 3, irelease, 2
a1 	gbuzz 	k1, ifrequency, k10, 0, 35, 42
a2 	reson 	a1, kformant1, kformant1 * .05, 1
a3 	reson 	a1, kformant2, kformant2 * .05, 1
a4 	reson 	a1, kformant2, kformant2 * .05, 1
a8 	balance 	a4, a1
ga1 	= 	a8 * ileftpan
ga2 	= 	a8 * irightpan
	outs  	ga1, ga2
endin
instr 77 ; Gogins Elementary Signal (Cosine FM Grain with Hanning Envelope)
; INITIALIZATION
ienvelopehz = 	1.0 / p3
icarrierhz 	= 	cpsoct(p4)
; Normalize to 80 dB = ampdb(80).
iamplitude = 	ampdb(p5) * 15848.926 /  1405.0
ileftpan 	= 	(0.5 - p6) / 2.0
irightpan 	= 	(0.5 + p6) / 2.0
icarrierratio = 	1.0
imodulationratio = 	1.0
imodulationindex =	1.0
; LOGGING
; Elementary Signal Instrument (Cosine FM grain with Hanning envelope)
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length (time/frequency aspect ratio)
; p4 	= 	Octave of carrier
; p5 	= 	Decibels at peak
; p6 	= 	Pan
; p7 	= 	Ratio (modulator Hz = Carrier Hz * Ratio)
; p8 	= 	iNdex of modulation
print p2, p3, p4, p5, p6, p6
; KONTROL
ihanningwindow = 	50
kenvelope 	oscili 	iamplitude, ienvelopehz, ihanningwindow
; AUDIO
icosinewave = 	42
asignal 	foscili 	kenvelope, icarrierhz, icarrierratio, imodulationratio, imodulationindex, icosinewave
	outs 	asignal * ileftpan, asignal * irightpan
endin
instr 78 ; FM Very High Ratio
; INITIALIZATION
icarrier 	= 	2
iratio 	= 	2.5
ifmamplitude = 	8
index 	= 	6
iattack 	= 	.02
irelease 	= 	.05
isustain 	= 	p3  - (iattack + irelease)
if isustain > 0 goto longenvelope
isustain 	= 	0
p3 	= 	iattack + isustain + irelease
	longenvelope:
ifrequency = 	cpsoct(p4)
ifrequencyb = 	ifrequency * 1.003
icarrierb 	= 	icarrier * 1.004
; Normalize to 80 dB = ampdb(80).
iamplitude = 	ampdb(p5) * 15848.926 / 12748.1
ileftpan 	= 	(0.5 - p6) / 2.0
irightpan 	= 	(0.5 + p6) / 2.0
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print 	p2, p3, p4, p5, p6
; KONTROL
kindenv 	expseg 	.000001, iattack, 1, isustain, .125, irelease, .000001
kindex 	= 	kindenv * index * ifmamplitude
; AUDIO
aouta 	foscili 	iamplitude, ifrequency, icarrier, iratio, index, 1
aoutb 	foscili 	iamplitude, ifrequencyb, icarrierb, iratio, index, 1
; Plus amplitude correction.
afmout 	= 	(aouta + aoutb) * kindenv * 2.565
	outs 	ileftpan * afmout, irightpan * afmout
endin
instr 79 ; Horner Erhu
; INITIALIZATION
; Inital values of modelled tones:
;                      p3      p4       p5       p6     p7   p8      p9
;       tone1:   3.3     7.11    8.03    1       5       51      52
;       tone2:   3.9     8.06    8.10    1       5       53      54
iamplitude = 	ampdb(p5)
ip6 	= 	1
ip7 	= 	5
ip8 	= 	51
ip9 	= 	52
ileftpan 	= 	(0.5 - p6) / 2.0
irightpan 	= 	(0.5 + p6) / 2.0
giseed 	= 	.5
ipch1 	= 	p4
ipch2 	= 	p4 + 1 + 3/12
iampscale =	1
ivibrate 	= 	ip7
iwt1 	= 	ip8
iwt2 	= 	ip9
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
; ip6 	= 	Amplitude scaling factor
; ip7 	= 	Tremolo rate in Hz
; ip8 	= 	Wavetable number to use with first pitch in tremolo
; ip9 	= 	Wavetable number to use with second pitch in tremolo
	print p2, p3, p4, p5, p6, ip6, ip7, ip8, ip9
; KONTROL
; Frequency envelope
ifreq1 	= 	cpsoct(ipch1)
ifreq2 	= 	cpsoct(ipch2)
kfreq 	= 	ifreq1
;       kfreqr randi .0015*ifreq1,10, giseed            ; 0.15% freq.  variation
;       giseed = frac(giseed*3.14159)
;       kfreq = kfreq + kfreqr
ivibrate 	= 	ivibrate *(giseed/50 + .99)          ; +-1% vib  rate variation
giseed 	= 	frac(giseed*3.14159)
; print ivibrate
; Start vibrato with a slow cycle.
kvibrate 	linseg 	ivibrate/2, 1.0/(ivibrate), ivibrate/2, .01, ivibrate, p3, ivibrate
; 1% t.v.  vib. rate variation.
kvibr 	randi 	.01*ivibrate, ivibrate/2, giseed
giseed 	= 	frac(giseed*3.14159)
kvibrate 	= 	kvibrate + kvibr
kvib 	oscili 	(ifreq2 - ifreq1), kvibrate, 55, .5
kfreq 	= 	kfreq + kvib
;display kvib, p3
; Allow ampEnv brkpts to vary by +-10%.
i1 	= 	.15*(giseed/5 + .9)
; Update random seed.
giseed 	= 	frac(giseed*3.14159)
i2 	= 	.6*(giseed/5 + .9)
giseed 	= 	frac(giseed*3.14159)
i3 	= 	.35*(giseed/5 + .9)
giseed 	= 	frac(giseed*3.14159)
i4 	= 	(giseed/5 + .9)
giseed 	= 	frac(giseed*3.14159)
i5 	= 	(giseed/5 + .9)
giseed 	= 	frac(giseed*3.14159)
; Wavetable amplitude envelopes.
; Overall amplitude.
isum 	= 	i1+i2+i3+i4+i5
if p3-isum < .1 goto ae2
	ae1:
kamp 	linseg 	0, i1, .8, i2, 1.7, i3, 1.3, p3-isum, .9, i4, .1,  i5, 0
	goto 	ae3
	ae2:
kamp 	linseg 	0, i1, .8, i2, 1.7, i3, 1.3, .1, .9, i4, .1, i5,  0
; Ramp decay  for shorter notes.
kramp 	linseg 	1, .8*p3, 1, .2*p3, 0
kamp 	= 	kamp*kramp
	ae3:
; 10% tremolo  amplitude variation.
ktremr 	randi 	.05*kamp, ivibrate/2, giseed
giseed 	= 	frac(giseed*3.14159)
kamp 	= 	kamp + ktremr
atrem1 	oscili 	kamp, kvibrate, 55, 0
atrem2 	oscili 	kamp, kvibrate, 55, .5
; Wavetable  synthesis.
awt1 	oscili 	atrem1, kfreq, iwt1
awt2 	oscili 	atrem2, kfreq, iwt2
; Allow  wavetable overall amplitude to vary by +-10%.
iamp1 	= 	giseed/5 + .9
giseed 	= 	frac(giseed*3.14159)
iamp2 	= 	giseed/5 + .9
giseed 	= 	frac(giseed*3.14159)
;print iamp1
;print iamp2
; AUDIO
asrc 	= 	iamp1*awt1 + iamp2*awt2
; Time-varying lowpass filter for spectral decay.
	filt:
kcutoff 	linseg 	sr/2, .5*p3, sr/2, .5*p3, ifreq1
afilt 	tone 	asrc, kcutoff
afilt 	balance 	afilt, asrc
asrc 	= 	iampscale*asrc
	outs 	asrc * ileftpan, asrc * irightpan

; Chorus.
ig1 = 0.8
ig2 = 0.7
ig3 = 0.6
ig4 = 0.5
kdt linseg .005, p3, .028
adump delayr .1
ad1 deltapi kdt
delayw asrc
kdt linseg .009, p3/2, .023, p3/2, .017
adump delayr .1
ad2 deltapi kdt
delayw asrc
kdt linseg .021, p3, .007
adump delayr .1
ad3 deltapi kdt
delayw asrc
kdt linseg .012, p3, .019
adump delayr .1
ad4 deltapi kdt
delayw asrc
achorus = ig1*ad1 +  ig2*ad2 +  ig3*ad3 +  ig4*ad4
outs achorus * ileftpan, achorus * irightpan
endin
instr 80 ; Horner Pipa
; Inital values of the original modelled tone:
;                       p3      p4      p5
;       pipa:      7.4     6.07    1
; Note: If you use the pipa above about middle C (higher than the  modelled range), then you'll want
; to bandlimit the wavetables so they stay below the Nyquist  frequency. Just delete the higher
; harmonics of the wavetables appropriately (especially wavetable  #12).
; INITIALIZATION
giseed 	= 	.5
ipch 	= 	p4
iamplitude = 	ampdb(p5) * 15858.0 / 65413648.0
ileftpan 	= 	(0.5 - p6) / 2.0 * iamplitude
irightpan 	= 	(0.5 + p6) / 2.0 * iamplitude
iampscale = 	1
ip5 	= 	1
; frequency envelope
ifreq 	= 	cpsoct(ipch)
; 0.15% freq.  variation.
kfreqr 	randi 	.0015*ifreq,10, giseed
giseed 	= 	frac(giseed*3.14159)
kfreq 	= 	kfreqr + ifreq
;  allow wavetable synchronization to vary by +-10%
i1 	= 	giseed/5 + .9
giseed 	= 	frac(giseed*3.14159)   ; update random seed
i2 	= 	giseed/5 + .9
giseed 	= 	frac(giseed*3.14159)
i3 	= 	giseed/5 + .9
giseed 	= 	frac(giseed*3.14159)
i4 	= 	giseed/5 + .9
giseed 	= 	frac(giseed*3.14159)
i5 	= 	giseed/5 + .9
giseed 	= 	frac(giseed*3.14159)
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
; ip5 	= 	Amplitude scaling factor.
; KONTROL
; Wavetable amplitude envelopes.
kamp1 	linseg 	0, .01*i1, 11, .02*i1, 20, .03*i1, 18, .02*i1,  9, .04*i1, 14, .06*i1, 11, .62*i1, 7, .4*i1, 0, .7*i1, 4, 1.5*i1, .4,  1.0*i1, .7, 1.2*i1, -.1, 1.8*i1, 0, p3, 0
; kamp2 	linseg 	0, .01*i2, 2, .02*i2, 2.5, .15*i2, 1.5, .15*i2,  .8, .17*i2, .5, .15*i2, 0, 6.75*i2, 0, p3, 0
kamp2 	linseg 	0, .01*i2, 2, .02*i2, 2.5, .15*i2, 1.5, .15*i2,  .8, .17*i2, .5, .4*i2, -.7, .5*i2, .16, .4*i2, .02, .5*i2, .1, .6*i2,  -.03, .2*i2, 0, .5*i2, -.06, .6*i2, .05, 1.4*i2, -.02, 1.8*i2, 0, p3,  0
kamp3 	linseg 	0, .01*i3, -17, .05*i3, 8, .12*i3, 1, .22*i3,  -2, .04*i3, -.5, .14*i3, .2, .32*i3, -6, .6*i3, 2, .5*i3, -.2, .4*i3,  2.5, .8*i3, .2, 1.4*i3, 1.6, .8*i3, .7, 2.0*i3, 0, p3, 0
kamp4 	linseg 	0, .015*i4, 1.5, .035*i4, -1.2, .03*i4, .8, .14*i4, 1, .4*i4, .25, .48*i4, 1.3, .6*i4, -.1, 1.9*i4, .1, .6*i4,  -.1, 3.2*i4, 0, p3, 0
kamp5 	linseg 	0, .01*i5, 10, .02*i5, -40, .11*i5, -10, .46*i5, -5, .3*i5, 12, .5*i5, -1.5, .4*i5, 2, .4*i5, -2.5, 1.4*i5, 1, .8*i5, -1.2, 1.2*i5, .2, 1.8*i5, 0, p3, 0
; AUDIO
; Wavetable  synthesis.
awt1 	oscili 	kamp1, kfreq, 61
awt2 	oscili 	kamp2, kfreq, 62
awt3 	oscili 	kamp3, kfreq, 63
awt4 	oscili 	kamp4, kfreq, 64
awt5 	oscili 	kamp5, kfreq, 65
; Allow  wavetable overall amplitude to vary by +-25%.
iamp1 	= 	giseed/2 + .75
giseed 	= 	frac(giseed*3.14159)
iamp2 	= 	giseed/2 + .75
giseed 	= 	frac(giseed*3.14159)
iamp3 	= 	giseed/2 + .75
giseed 	= 	frac(giseed*3.14159)
iamp4 	= 	giseed/2 + .75
giseed 	= 	frac(giseed*3.14159)
iamp5 	= 	giseed/2 + .75
giseed 	= 	frac(giseed*3.14159)
aout = 	iamp1*awt1 + iamp2*awt2 + iamp3*awt3 + iamp4*awt4  +  iamp5*awt5
; Ramp decay for shorter notes.
kramp 	linseg 	1, p3, 0
aout 	= 	kramp*aout
; Time-varying lowpass filter for spectral decay.
	filt:
kcutoff 	linseg 	sr/2, 7.4, ifreq, p3, ifreq
afilt 	tone 	aout, kcutoff
afilt 	balance 	afilt, aout
aout2 	= 	iampscale*afilt
	outs 	aout2 * ileftpan, aout2 * irightpan
endin
instr 81 ; Cook Bowed String Model
; Csound plugin implementation by Michael Gogins
; LOGGING
; p1 = Instrument
; p2 = Start
; p3 = Length
; p4 = Octave
; p5 = Decibels
; p6 = Pan
print p2, p3, p4, p5, p6
; INITIALIZATION
ifrequency = cpsoct(p4)
iamplitude = ampdb(p5)
ileftpan = (0.5 - p6) / 2.0
irightpan = (0.5 + p6) / 2.0
; AUDIO
asignal bowed ifrequency, iamplitude, 20, 20, 3, 6
outs ileftpan * asignal, irightpan * asignal
endin
instr 82 ; Cook Wurlitzer Electric Piano Model
; Csound plugin implementation by Michael Gogins
; LOGGING
; p1 = Instrument
; p2 = Start
; p3 = Length
; p4 = Octave
; p5 = Decibels
; p6 = Pan
print p2, p3, p4, p5, p6
; INITIALIZATION
ifrequency = cpsoct(p4)
iamplitude = ampdb(p5) * 10
ileftpan = (0.5 - p6) / 2.0
irightpan = (0.5 + p6) / 2.0
; AUDIO
asignal wurlitzer ifrequency, iamplitude, 20, 20, 3, 6
outs ileftpan * asignal, irightpan * asignal
endin
instr 83 ; Cook Tubular Bell Model
; Csound plugin implementation by Michael Gogins
; LOGGING
; p1 = Instrument
; p2 = Start
; p3 = Length
; p4 = Octave
; p5 = Decibels
; p6 = Pan
print p2, p3, p4, p5, p6
; INITIALIZATION
ifrequency = cpsoct(p4)
iamplitude = ampdb(p5) * 10
ileftpan = (0.5 - p6) / 2.0
irightpan = (0.5 + p6) / 2.0
; AUDIO
asignal tubularbell ifrequency, iamplitude, 20, 20, 3, 6
outs ileftpan * asignal, irightpan * asignal
endin
instr 84 ; Cook Vibraphone Model
; Csound plugin implementation by Michael Gogins
; LOGGING
; p1 = Instrument
; p2 = Start
; p3 = Length
; p4 = Octave
; p5 = Decibels
; p6 = Pan
print p2, p3, p4, p5, p6
; INITIALIZATION
ifrequency = cpsoct(p4)
iamplitude = ampdb(p5)
ileftpan = (0.5 - p6) / 2.0 * 1000
irightpan = (0.5 + p6) / 2.0 * 1000
; AUDIO
asignal vibraphone ifrequency, iamplitude, 20, 20, 5, 5
outs ileftpan * asignal, irightpan * asignal
endin
instr 85 ; Cook Agogobell Model
; Csound plugin implementation by Michael Gogins
; LOGGING
; p1 = Instrument
; p2 = Start
; p3 = Length
; p4 = Octave
; p5 = Decibels
; p6 = Pan
print p2, p3, p4, p5, p6
; INITIALIZATION
ifrequency = cpsoct(p4)
iamplitude = ampdb(p5) * 10
ileftpan = (0.5 - p6) / 2.0
irightpan = (0.5 + p6) / 2.0
; AUDIO
asignal agogobell ifrequency, iamplitude, 20, 20, 3, 6
outs ileftpan * asignal, irightpan * asignal
endin
instr 86 ; Cook Plucked Model
; Csound plugin implementation by Michael Gogins
; LOGGING
; p1 = Instrument
; p2 = Start
; p3 = Length
; p4 = Octave
; p5 = Decibels
; p6 = Pan
print p2, p3, p4, p5, p6
; INITIALIZATION
ifrequency = cpsoct(p4)
iamplitude = ampdb(p5)
ileftpan = (0.5 - p6) / 2.0
irightpan = (0.5 + p6) / 2.0
; AUDIO
asignal plucked ifrequency, iamplitude, 0, 0, 0, 0
outs ileftpan * asignal, irightpan * asignal
endin
instr 87 ; Cook Mandolin Model
; Csound plugin implementation by Michael Gogins
; LOGGING
; p1 = Instrument
; p2 = Start
; p3 = Length
; p4 = Octave
; p5 = Decibels
; p6 = Pan
print p2, p3, p4, p5, p6
; INITIALIZATION
ifrequency = cpsoct(p4)
iamplitude = ampdb(p5) * 10
ileftpan = (0.5 - p6) / 2.0
irightpan = (0.5 + p6) / 2.0
; AUDIO
asignal mandolin ifrequency, iamplitude, 20, 20, 3, 6
outs ileftpan * asignal, irightpan * asignal
endin
instr 88 ; Cook Clarinet Model
; Csound plugin implementation by Michael Gogins
; LOGGING
; p1 = Instrument
; p2 = Start
; p3 = Length
; p4 = Octave
; p5 = Decibels
; p6 = Pan
print p2, p3, p4, p5, p6
; INITIALIZATION
ifrequency = cpsoct(p4)
iamplitude = ampdb(p5) * 10
ileftpan = (0.5 - p6) / 2.0
irightpan = (0.5 + p6) / 2.0
; AUDIO
asignal clarinet ifrequency, iamplitude, 20, 20, 3, 6
outs ileftpan * asignal, irightpan * asignal
endin
instr 89 ; Cook Flute Model
; Csound plugin implementation by Michael Gogins
; LOGGING
; p1 = Instrument
; p2 = Start
; p3 = Length
; p4 = Octave
; p5 = Decibels
; p6 = Pan
print p2, p3, p4, p5, p6
; INITIALIZATION
ifrequency = cpsoct(p4)
iamplitude = ampdb(p5) * 10
ileftpan = (0.5 - p6) / 2.0
irightpan = (0.5 + p6) / 2.0
; AUDIO
asignal flute ifrequency, iamplitude, 20, 20, 3, 6
outs ileftpan * asignal, irightpan * asignal
endin
instr 90 ; Cook Brass Model
; Csound plugin implementation by Michael Gogins
; LOGGING
; p1 = Instrument
; p2 = Start
; p3 = Length
; p4 = Octave
; p5 = Decibels
; p6 = Pan
print p2, p3, p4, p5, p6
; INITIALIZATION
ifrequency = cpsoct(p4)
iamplitude = ampdb(p5)
ileftpan = (0.5 - p6) / 2.0 * iamplitude
irightpan = (0.5 + p6) / 2.0 *iamplitude
; AUDIO
asignal brass ifrequency, 1, 10, 10, 10, 10
outs ileftpan * asignal, irightpan * asignal
endin
instr 91 ; Cook Rhodes Electric Piano Model
; Csound plugin implementation by Michael Gogins
; LOGGING
; p1 = Instrument
; p2 = Start
; p3 = Length
; p4 = Octave
; p5 = Decibels
; p6 = Pan
print p2, p3, p4, p5, p6
; INITIALIZATION
ifrequency = cpsoct(p4)
iamplitude = ampdb(p5) * 10
ileftpan = (0.5 - p6) / 2.0
irightpan = (0.5 + p6) / 2.0
; AUDIO
asignal rhodes ifrequency, iamplitude, 20, 20, 3, 6
outs ileftpan * asignal, irightpan * asignal
endin
instr 92 ; Cook Heavy Metal Model
; Csound plugin implementation by Michael Gogins
; LOGGING
; p1 = Instrument
; p2 = Start
; p3 = Length
; p4 = Octave
; p5 = Decibels
; p6 = Pan
print p2, p3, p4, p5, p6
; INITIALIZATION
ifrequency = cpsoct(p4)
iamplitude = ampdb(p5) * 10
ileftpan = (0.5 - p6) / 2.0
irightpan = (0.5 + p6) / 2.0
; AUDIO
asignal heavymetal ifrequency, iamplitude, 100, 100, 10, 1
outs ileftpan * asignal, irightpan * asignal
endin
instr 93 ; Cook Percussive Flute Model
; Csound plugin implementation by Michael Gogins
; LOGGING
; p1 = Instrument
; p2 = Start
; p3 = Length
; p4 = Octave
; p5 = Decibels
; p6 = Pan
print p2, p3, p4, p5, p6
; INITIALIZATION
ifrequency = cpsoct(p4)
iamplitude = ampdb(p5) * 10
ileftpan = (0.5 - p6) / 2.0
irightpan = (0.5 + p6) / 2.0
; AUDIO
asignal percussiveflute ifrequency, iamplitude, 20, 20, 45, 4
outs ileftpan * asignal, irightpan * asignal
endin
instr 94 ; Cook Hammond Organ Model
; Csound plugin implementation by Michael Gogins
; LOGGING
; p1 = Instrument
; p2 = Start
; p3 = Length
; p4 = Octave
; p5 = Decibels
; p6 = Pan
print p2, p3, p4, p5, p6
; INITIALIZATION
ifrequency = cpsoct(p4)
iamplitude = ampdb(p5) * 10
ileftpan = (0.5 - p6) / 2.0
irightpan = (0.5 + p6) / 2.0
; AUDIO
asignal hammond ifrequency, iamplitude, 20, 20, 3, 6
outs ileftpan * asignal, irightpan * asignal
endin
instr 95 ; Cook FM Voices Model
; Csound plugin implementation by Michael Gogins
; LOGGING
; p1 = Instrument
; p2 = Start
; p3 = Length
; p4 = Octave
; p5 = Decibels
; p6 = Pan
print p2, p3, p4, p5, p6
; INITIALIZATION
ifrequency = cpsoct(p4)
iamplitude = ampdb(p5) * 10
ileftpan = (0.5 - p6) / 2.0
irightpan = (0.5 + p6) / 2.0
; AUDIO
asignal fmvoices ifrequency, iamplitude, 20, 20, 3, 6
outs ileftpan * asignal, irightpan * asignal
endin
instr 96 ; Cook Mini-Moog Model
; Csound plugin implementation by Michael Gogins
; LOGGING
; p1 = Instrument
; p2 = Start
; p3 = Length
; p4 = Octave
; p5 = Decibels
; p6 = Pan
print p2, p3, p4, p5, p6
; INITIALIZATION
ifrequency = cpsoct(p4)
iamplitude = ampdb(p5) * 10
ileftpan = (0.5 - p6) / 2.0
irightpan = (0.5 + p6) / 2.0
; AUDIO
asignal minimoog ifrequency, iamplitude, 20, 20, 3, 6
outs ileftpan * asignal, irightpan * asignal
endin
instr 97 ; Cook Voice Formant Model
; Csound plugin implementation by Michael Gogins
; LOGGING
; p1 = Instrument
; p2 = Start
; p3 = Length
; p4 = Octave
; p5 = Decibels
; p6 = Pan
print p2, p3, p4, p5, p6
; INITIALIZATION
ifrequency = cpsoct(p4)
iamplitude = ampdb(p5) * 10
ileftpan = (0.5 - p6) / 2.0
irightpan = (0.5 + p6) / 2.0
; AUDIO
asignal voiceformant ifrequency, iamplitude, 0, 0, 0, 0
outs ileftpan * asignal, irightpan * asignal
endin
instr 98 ; Pinkston Koto
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;         basic koto orchestra file                              ;
;                                                                ;
;         	p3 = duration
;	p4 = amplitude                    ;
;         	p5 = pitch in pch
;	p6 = pitch bend in oct.decimal    ;
;                                                                ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ip4 	= 	ampdb(p5)
ileftpan 	= 	(0.5 -  p6) / 2.0 * 15848.0 / 15848.0
irightpan 	= 	(0.5 + p6) / 2.0 * 15858.0 / 15848.0
ip6 	= 	0
ihz	=	cpsoct(p4)
ihz2	=       	ihz * 2.0006
ihz3	=	ihz * 1.9999
ihz4	=	ihz * 1.0005
ihz5	=	ihz * .9998
koct	init	octcps(ihz)
koct2	init	octcps(ihz2)
koct3	init	octcps(ihz3)
koct4	init	octcps(ihz4)
koct5	init	octcps(ihz5)
kbend   	oscil1i 	0.15, ip6, p3,8;   /* p6 in oct.decimal */
khz	=	cpsoct(koct+kbend)
khz2	=	cpsoct(koct2+kbend)
khz3	=	cpsoct(koct3+kbend)
khz4	=	cpsoct(koct4+kbend)
khz5	=	cpsoct(koct5+kbend)
aplk1	pluck	(ip4*.42),khz,ihz,6,3,1
	timout	0.0,p3*.2,continue         ;.002 not p3;
	koto2:	aplk2	pluck	(ip4*.62),khz2,ihz2,6,3,1
	timout	0.0,p3*.4,continue        ; .oo4 not p3;
	koto3:	aplk3	pluck	(ip4*.62),khz3,ihz3,6,3,1
	timout	0.0,p3*.6,continue       ;  .005 not p3;
	koto4:	aplk4	pluck	(ip4*.62),khz4,ihz4,6,3,1
	timout	0.0,p3*.8,continue      ;.oo7 not  p3;
	koto5:	aplk5	pluck	(ip4*.62),khz5,ihz5,6,3,1
	continue:
asignal	=	aplk1+aplk2+aplk3+aplk4+aplk5
asig	envlpx	asignal,.001,p3,(p3*.001),8,1.02,.008
;asig	envlpx	asignal,.06,p3,(p3*.1),8,1.02,.008 ;
	outs	asig * ileftpan, asig * irightpan
endin
instr 99 ; Bergeman 1
; INITIALIZATION
; Original pfields
; p1  p2 p3   p4  p5      p6 p7    p8       p9
; ins  st  dur  db func   at  dec freq1  freq2
ip4 	= 	p5
iamp	=	(ip4 + 30) - (p4 * 4)
	print	p1, p2, p3, p4, p5, iamp, p6
ileftpan 	= 	(0.5 - p6) / 2.0
irightpan 	= 	(0.5 + p6) / 2.0
ip5 	= 	77
ip3	=	p3
ip6 	= 	p3 * .25
ip7 	= 	p3 * .75
ip8 	= 	cpsoct(p4 - .01)
ip9 	= 	cpsoct(p4 + .01)
idb	=	ampdb(iamp)
isc	=	idb * .333
; KONTROL
k1 	line 	40, p3, 800
k2 	line 	440, p3, 220
k3 	linen 	isc, ip6, p3, ip7
k4 	line 	800, ip3,40
k5 	line 	220, ip3,440
k6 	linen 	isc, ip6, ip3, ip7
k7	linen	1, ip6, ip3, ip7
; AUDIO
a5 	oscili 	k3, ip8, ip5
a6 	oscili 	k3, ip8 * .999, ip5
a7 	oscili 	k3, ip8 * 1.001, ip5
a1	=	a5 + a6 + a7
a8 	oscili 	k6, ip9, ip5
a9 	oscili 	k6, ip9 * .999, ip5
a10 	oscili 	k6, ip9 * 1.001, ip5
a11	=	a8 + a9 + a10
a2 	butterbp 	a1, k1, 40
a3 	butterbp 	a2, k5, k2 * .8
a4 	balance 	a3, a1
a12 	butterbp 	a11, k4, 40
a13 	butterbp 	a12, k2, k5 * .8
a14 	balance 	a13, a11
a15	reverb2 	a4, 5, .3
a16	reverb2	a4, 4, .2
a17	=	(a15 + a4) * ileftpan * k7
a18	=	(a16 + a4) * irightpan * k7
	outs 	a17, a18
endin
instr 100 ; Steinway sampled
; INITIALIZATION
iamplitude 	= ampdb(p5) * 15848.926 / 2500.0
ileftpan 	= 	(0.5 - p6) / 2.0
irightpan 	= 	(0.5 + p6) / 2.0
ifrequency = 	cpsoct(p4)
ioctave 	= 	int(p4 * 100)
itablenumber table 	ioctave + 100, 100
itableoctave table 	ioctave, 101
itablefrequency = 	cpsoct (itableoctave)
	if p3 > .20  then goto longenvelope
p3 	= 	.20
	longenvelope:
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print p2, p3, p4, p5, p6
print itablenumber, 	itableoctave, itablefrequency
; KONTROL
kamplitude linen 	iamplitude, -1, p3, .012
; AUDIO
asignal 	loscil 	kamplitude, ifrequency, int(itablenumber), itablefrequency
	outs 	ileftpan * asignal, irightpan * asignal
endin
instr 101 ; Sampled string bass
; INITIALIZATION
iamplitude = ampdb(p5) * 15848.926 / 15848.926
ileftpan = (0.5 - p6) / 2.0
irightpan = (0.5 + p6) / 2.0
ifrequency = cpsoct(p4)
itablefrequency = cpsoct(7)
itablenumber = 97
if p3 > .06 then goto longenvelope
p3 = .06
longenvelope:
; LOGGING
; p1 = Instrument
; p2 = Start
; p3 = Length
; p4 = Octave
; p5 = Decibels
; p6 = Pan
print p2, p3, p4, p5, p6
; KONTROL
kamplitude linen iamplitude, -1, p3, .02
; AUDIO
asignal loscil kamplitude, ifrequency, itablenumber, itablefrequency
outs ileftpan * asignal, irightpan * asignal
endin
instr 102 ; Steinway with Karpen's sndwarp
; INITIALIZATION
ifrequency = cpsoct(p4)
iamplitude = ampdb(p5) * 10
ileftpan = (0.5 - p6) / 2.0 * iamplitude
irightpan = (0.5 + p6) / 2.0 * iamplitude
isample = 102
istart = 0
ishift = 1 + (p4 - 5.5)
iwindowsize = sr / 20
irandom = iwindowsize * .2
ioverlap = 3
; Window function.
iwindow = 69

; KONTROL AND AUDIO
awarp line 1, p3, 10
aresample line ishift, p3, ishift
kenv line 1, p3, .1
awet,adry sndwarp kenv, awarp, aresample, isample, istart, iwindowsize, irandom, ioverlap, iwindow, 0
asignal balance awet, adry
outs asignal * ileftpan, asignal * irightpan
endin
instr 103 ; Kung FM with variable delay
; INITIALIZATION
; Normalize to 80 dB = ampdb(80).
iamplitude = 	ampdb(p5) * 15848.926 / 9000
ileftpan 	= 	(0.5 - p6) / 2.0
irightpan 	= 	(0.5 + p6) / 2.0
iattack 	= 	.05
irelease 	= 	.1
	if p3 > .15 then goto longenvelope
p3 	= 	.15
	longenvelope:
iattack 	= 	p3/3
isustain 	= 	p3/3
irelease 	= 	p3 - (iattack + isustain)
ip6 	= 	.4
ip7 	= 	2.2
ishift	=	8.0 / 1200.0
ipch	=	cpsoct(p4)
ioct	=	p4
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print p2, p3, p4, p5, p6
; KONTROL
kadsr	linseg	0,iattack,1,isustain,1,irelease,0
kmodi	linseg	0,iattack,5,isustain,3,irelease,0
kmodr	linseg	ip6,p3,ip7	;r moves from ip6 to ip7 in p3 secs.
; AUDIO
a1	=	kmodi*(kmodr - 1/kmodr)/2
a1ndx	=	abs(a1*2/20)	;a1*2 is argument normalized from 0-1.
a2	=	kmodi*(kmodr + 1/kmodr)/2
a3	tablei	a1ndx,43,1	;look up table is in f43, normalized index.
ao1	oscili	a1,ipch,42		;cosine
a4	=	exp(-0.5*a3+ao1)
ao2	oscili	a2*ipch,ipch,42		;cosine
aoutl	oscili	iamplitude*kadsr*a4,ao2+cpsoct(ioct+ishift),1	;final output left
aoutr	oscili	iamplitude*kadsr*a4,ao2+cpsoct(ioct-ishift),1	;final output right
aoutl1 	vdelay 	aoutl, sr/10, sr/10
aoutr1	vdelay 	aoutr, sr/12, sr/12
	outs	ileftpan * (aoutl + aoutl1), irightpan * (aoutr + aoutr1)
endin
instr 104 ; Kung FM Modulated Left and Right Detuned Chorusing
; INITIALIZATION
; Normalize to 80 dB = ampdb(80).
iamplitude	 = 	ampdb(p5) * 15848.926 / 4901
;ipp6	iunirand	1.5
ipp6	=	p6
ipp6	=	.75 - ipp6
ileftpan 	=	(0.5  - ipp6) / 2.0
irightpan 	= 	(0.5 + ipp6) / 2.0
iattack 	= 	.05
irelease	= 	.1
	if p3 > .15 then goto longenvelope
p3 	= 	.15
	longenvelope:
iattack 	= 	p3/3
isustain 	= 	p3/3
irelease 	= 	p3 - (iattack + isustain)
ip6 	= 	.3
ip7 	= 	2.2
ishift	=	8.0 / 1200.0
ipch	=	cpsoct(p4)
ioct	=	p4
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print p2, p3, p4, p5, p6
; KONTROL
kadsr	linseg	0,iattack,1,isustain,1,irelease,0
kmodi	linseg	0,iattack,5,isustain,3,irelease,0
kmodr	linseg	ip6,p3,ip7	;r moves from ip6 to ip7 in p3 secs.
; AUDIO
a1	=	kmodi*(kmodr - 1/kmodr)/2
a1ndx	=	abs(a1*2/20)	;a1*2 is argument normalized from 0-1.
a2	=	kmodi*(kmodr + 1/kmodr)/2
a3	tablei	a1ndx,43,1	;look up table is in f43, normalized index.
ao1	oscil	a1,ipch,42		;cosine
a4	=	exp(-0.5*a3+ao1)
ao2	oscil	a2*ipch,ipch,42		;cosine
aoutl	oscil	iamplitude*kadsr*a4,ao2+cpsoct(ioct+ishift),1	;final output left
aoutr	oscil	iamplitude*kadsr*a4,ao2+cpsoct(ioct-ishift),1	;final output right
	outs	ileftpan * aoutl, irightpan * aoutr
endin
instr 105 ; Steinway sampled with reverberation
; INITIALIZATION
iamplitude = 	ampdb(p5) * 15848.926 /  15848.926
ileftpan 	= 	(0.5 - p6) / 2.0
irightpan 	= 	(0.5 + p6) / 2.0
idetune	=	.013
ifrequency1 = 	cpsoct(p4 - idetune)
ifrequency2 = 	cpsoct(p4 +idetune)
ioctave 	=	int(p4 * 100)
itablenumber table 	ioctave + 100, 100
itableoctave table 	ioctave, 101
itablefrequency = 	cpsoct (itableoctave)
if p3 > .20  then goto longenvelope
p3 	= 	.20
longenvelope:
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print 	p2, p3, p4, p5, p6
	print 	itablenumber, itableoctave, itablefrequency
; KONTROL
kamplitude linen 	iamplitude, -1, p3, .012
kc	line 	30, p3, 100
; AUDIO
asignal1 	loscil 	kamplitude, ifrequency1, int(itablenumber), itablefrequency
asignal2 	loscil 	kamplitude, ifrequency2, int(itablenumber), itablefrequency
asignal3 	comb 	asignal1 + asignal2, kc, .02
	outs 	ileftpan * asignal3, irightpan * asignal3
endin
instr 106 ; Burt additive-synthesis piano
ifrequency 	= 	cpsoct(p4)
iamplitude 	= 	ampdb(p5) * 15848.926 /1119157.0
ileftpan	= 	(0.5 - p6) / 2.0 * iamplitude
irightpan	= 	(0.5 + p6) / 2.0  * iamplitude
inharm      = 	.05
;	Different timbres for different ranges of the piano.
;	Caused by relative amplitudes for each of 10 partials derived from a spectral analysis.
if p4 <=  5.0 igoto band1
if p4 <=  5.5 igoto band2
if p4 <=  6.0 igoto band3
if p4 <=  6.5 igoto band4
if p4 <=  7.0 igoto band5
if p4 <=  7.5 igoto band6
if p4 <=  8.0 igoto band7
if p4 <=  8.5 igoto band8
if p4 <=  9.0 igoto band9
if p4 <=  9.5 igoto band10
if p4 <= 10.0 igoto band11
if p4 <= 10.5 igoto band12
if p4 <= 11.0 igoto band13
igoto band14
band1:
ii1  = 0.0645
ii2  = 0.0637
ii3  = 0.5298
ii4  = 0.1291
ii5  = 0.7614
ii6  = 0.5413
ii7  = 0.1826
ii8  = 0.0381
ii9  = 0.0843
ii10 = 0.1000
igoto endbands
band2:
ii1  = 0.0515
ii2  = 0.1307
ii3  = 0.9412
ii4  = 0.1708
ii5  = 0.2045
ii6  = 0.1545
ii7  = 0.1964
ii8  = 0.0354
ii9  = 0.0973
ii10 = 0.1000
igoto endbands
band3:
ii1  = 0.3300
ii2  = 0.4269
ii3  = 1.0000
ii4  = 0.2288
ii5  = 0.2500
ii6  = 0.3307
ii7  = 0.4292
ii8  = 0.0419
ii9  = 0.1078
ii10 = 0.2000
igoto endbands
band4:
ii1  = 0.8208
ii2  = 0.9284
ii3  = 1.0000
ii4  = 0.3034
ii5  = 0.4688
ii6  = 0.7358
ii7  = 0.8332
ii8  = 0.0539
ii9  = 0.1229
i10 = 0.2000
igoto endbands
band5:
ii1  = 0.7424
ii2  = 1.0000
ii3  = 0.9312
ii4  = 0.2688
ii5  = 0.3858
ii6  = 0.5953
ii7  = 0.6407
ii8  = 0.0502
ii9  = 0.0964
ii10 = 0.1800
igoto endbands
band6:
ii1  = 0.4825
ii2  = 1.0000
ii3  = 0.8109
ii4  = 0.1882
ii5  = 0.1860
ii6  = 0.2480
ii7  = 0.2028
ii8  = 0.0407
ii9  = 0.0464
ii10 = 0.8000
igoto endbands
band7:
ii1  = 0.6303
ii2  = 0.7038
ii3  = 0.6034
ii4  = 0.1282
ii5  = 0.1345
ii6  = 0.1427
ii7  = 0.1101
ii8  = 0.0283
ii9  = 0.0265
ii10 = 0.0300
igoto endbands
band8:
ii1  = 0.9076
ii2  = 0.2595
ii3  = 0.3179
ii4  = 0.0555
ii5  = 0.0999
ii6  = 0.0592
ii7  = 0.0647
ii8  = 0.0117
ii9  = 0.0074
ii10 = 0.0240
igoto endbands
band9:
ii1  = 1.0000
ii2  = 0.1005
ii3  = 0.1693
ii4  = 0.0261
ii5  = 0.0682
ii6  = 0.0212
ii7  = 0.0334
ii8  = 0.0045
ii9  = 0.0000
ii10 = 0.0000
igoto endbands
band10:
ii1  = 1.0000
ii2  = 0.0842
ii3  = 0.0892
ii4  = 0.0182
ii5  = 0.0379
ii6  = 0.0061
ii7  = 0.0091
ii8  = 0.0019
ii9  = 0.0000
ii10 = 0.0000
igoto endbands
band11:
ii1  = 1.0000
ii2  = 0.0566
ii3  = 0.0548
ii4  = 0.0107
ii5  = 0.0189
ii6  = 0.0000
ii7  = 0.0000
ii8  = 0.0000
ii9  = 0.0000
ii10 = 0.0000
igoto endbands
band12:
ii1  = 1.0000
ii2  = 0.0235
ii3  = 0.0432
ii4  = 0.0034
ii5  = 0.0055
ii6  = 0.0000
ii7  = 0.0000
ii8  = 0.0000
ii9  = 0.0000
ii10 = 0.0000
igoto endbands
band13:
ii1  = 1.0000
ii2  = 0.0097
ii3  = 0.0303
ii4  = 0.0000
ii5  = 0.0000
ii6  = 0.0000
ii7  = 0.0000
ii8  = 0.0000
ii9  = 0.0000
ii10 = 0.0000
igoto endbands
band14:
ii1  = 1.0000
ii2  = 0.0057
ii3  = 0.0168
ii4  = 0.0000
ii5  = 0.0000
ii6  = 0.0000
ii7  = 0.0000
ii8  = 0.0000
ii9  = 0.0000
ii10 = 0.0000
igoto endbands
;
endbands:
i1  = ii1 ; * iamplitude
i2  = ii2 ; * iamplitude
i3  = ii3 ; * iamplitude
i4  = ii4 ; * iamplitude
i5  = ii5 ; * iamplitude
i6  = ii6 ; * iamplitude
i7  = ii7 ; * iamplitude
i8  = ii8 ; * iamplitude
i9  = ii9 ; * iamplitude
i10 = ii10 ;* iamplitude
;	Partials derived from Young's formula of inharm:
;	PartialHz = PartialIndex * FundamentalHz * sqrt(1 + Inharmonicity * (PartialIndex * PartialIndex))
i11 = cpsoct(p4)			;	Convert to Hertz.
i33 = cpsoct(p4 + .0025)	;	Left string sharp 25 cents.
i34 = cpsoct(p4 - .0025)    ;	Right string flat 25 cents.
i12 =  1 * i11 * sqrt(1 + inharm *   1)
i35 =  1 * i33 * sqrt(1 + inharm *   1)
i36 =  1 * i34 * sqrt(1 + inharm *   1)
i13 =  2 * i11 * sqrt(1 + inharm *   4)
i37 =  2 * i33 * sqrt(1 + inharm *   4)
i38 =  2 * i34 * sqrt(1 + inharm *   4)
i14 =  3 * i11 * sqrt(1 + inharm *   9)
i39 =  3 * i33 * sqrt(1 + inharm *   9)
i40 =  3 * i34 * sqrt(1 + inharm *   9)
i15 =  4 * i11 * sqrt(1 + inharm *  16)
i41 =  4 * i33 * sqrt(1 + inharm *  16)
i42 =  4 * i34 * sqrt(1 + inharm *  16)
i16 =  5 * i11 * sqrt(1 + inharm *  25)
i43 =  5 * i33 * sqrt(1 + inharm *  25)
i44 =  5 * i34 * sqrt(1 + inharm *  25)
i17 =  6 * i11 * sqrt(1 + inharm *  36)
i45 =  6 * i33 * sqrt(1 + inharm *  36)
i46 =  6 * i34 * sqrt(1 + inharm *  36)
i18 =  7 * i11 * sqrt(1 + inharm *  49)
i47 =  7 * i33 * sqrt(1 + inharm *  49)
i48 =  7 * i34 * sqrt(1 + inharm *  49)
i19 =  8 * i11 * sqrt(1 + inharm *  64)
i49 =  8 * i33 * sqrt(1 + inharm *  64)
i50 =  8 * i34 * sqrt(1 + inharm *  64)
i20 =  9 * i11 * sqrt(1 + inharm *  81)
i51=   9 * i33 * sqrt(1 + inharm *  81)
i52 =  9 * i34 * sqrt(1 + inharm *  81)
i21 = 10 * i11 * sqrt(1 + inharm * 100)
i53 = 10 * i33 * sqrt(1 + inharm * 100)
i54 = 10 * i34 * sqrt(1 + inharm * 100)
;
;   Randomness.
;
i22 = 12
k1  randi i1  * .3, i22, i1
k2  randi i2  * .3, i22, i2
k3  randi i3  * .3, i22, i3
k4  randi i4  * .3, i22, i4
k5  randi i5  * .3, i22, i5
k6  randi i6  * .3, i22, i6
k7  randi i7  * .3, i22, i7
k8  randi i8  * .3, i22, i8
k9  randi i9  * .3, i22, i9
k10 randi i10 * .3, i22, i10
i23 = 22
i24 = 18.5
i25 = 17.8
i26 = 4
i27 = 10.5
i28 = 6.5
i29 = 5.5
i30 = 3.8
i31 = 3.0
i32 = 2.0
;
;   Basic envelopes.
;
a1  linseg 0, .01, 1, 22,   0
a2  linseg 0, .01, 1, 18.5, 0
a3  linseg 0, .01, 1, 17.8, 0
a4  linseg 0, .01, 1, 4,    0
a5  linseg 0, .01, 1, 10.5, 0
a6  linseg 0, .01, 1, 6.5,  0
a7  linseg 0, .01, 1, 5.5,  0
a8  linseg 0, .01, 1, 3.8,  0
a9  linseg 0, .01, 1, 3,    0
a10 linseg 0, .01, 1, 2,    0
;
;   Mid-dip envelopes.
;
a11 linseg 1, i23 * .6,  1, i23 * .05, .5, i23 * .05, 1, i23 * .3,   1
a12 linseg 1, i24 * .5,  1, i24 * .05, .5, i24 * .05, 1, i24 * .4,   1
a13 linseg 1, i25 * .35, 1, i25 * .05, .5, i25 * .05, 1, i25 * .55,  1
a14 linseg 1, i26 * .37, 1, i26 * .05, .5, i26 * .05, 1, i26 * .53,  1
a15 linseg 1, i27 * .27, 1, i27 * .05, .5, i27 * .05, 1, i27 * .63,  1
a16 linseg 1, i28 * .27, 1, i28 * .05, .5, i28 * .05, 1, i28 * .63,  1
a17 linseg 1, i29 * .2,  1, i29 * .05, .5, i29 * .05, 1, i29 * .70,  1
a18 linseg 1, i30 * .18, 1, i30 * .05, .5, i30 * .05, 1, i30 * .72,  1
a19 linseg 1, i31 * .15, 1, i31 * .05, .5, i31 * .05, 1, i31 * .75,  1
a20 linseg 1, i32 * .1,  1, i32 * .05, .5, i32 * .05, 1, i32 * .80,  1
;
;	Randomize the mid-dip envelopes.
;
a11 = sqrt(a11) + abs(k1 )
a12 = sqrt(a12) + abs(k2 )
a13 = sqrt(a13) + abs(k3 )
a14 = sqrt(a14) + abs(k4 )
a15 = sqrt(a15) + abs(k5 )
a16 = sqrt(a16) + abs(k6 )
a17 = sqrt(a17) + abs(k7 )
a18 = sqrt(a18) + abs(k8 )
a19 = sqrt(a19) + abs(k9 )
a20 = sqrt(a20) + abs(k10)
;
;   Damping envelope.
;
a21 linseg 1, p3 - .15, 1, .15, 0
;
;   Total envelope = middip * basic * damping
;
a31 = a11 * a1  * sqrt(a21)
a32 = a12 * a2  * sqrt(a21)
a33 = a13 * a3  * sqrt(a21)
a34 = a14 * a4  * sqrt(a21)
a35 = a15 * a5  * sqrt(a21)
a36 = a16 * a6  * sqrt(a21)
a37 = a17 * a7  * sqrt(a21)
a38 = a18 * a8  * sqrt(a21)
a39 = a19 * a9  * sqrt(a21)
a40 = a20 * a10 * sqrt(a21)
;
;   Oscillators.
;
a41  oscili a31 * i1,  i12, 41
a42  oscili a31 * i1,  i35, 41
a43  oscili a31 * i1,  i36, 41
aout =        a41  + a42  + a43
a51  oscili a32 * i2,  i13, 41
a52  oscili a32 * i2,  i37, 41
a53  oscili a32 * i2,  i38, 41
aout = aout + a51  + a52  + a53
a61  oscili a33 * i3,  i14, 41
a62  oscili a33 * i3,  i39, 41
a63  oscili a33 * i3,  i40, 41
aout = aout + a61  + a62  + a63
a71  oscili a34 * i4,  i15, 41
a72  oscili a34 * i4,  i41, 41
a73  oscili a34 * i4,  i42, 41
aout = aout + a71  + a72  + a73
a81  oscili a35 * i5,  i16, 41
a82  oscili a35 * i5,  i43, 41
a83  oscili a35 * i5,  i44, 41
aout = aout + a81  + a82  + a83
a91  oscili a36 * i6,  i17, 41
a92  oscili a36 * i6,  i45, 41
a93  oscili a36 * i6,  i46, 41
aout = aout + a91  + a92  + a93
a101 oscili a37 * i7,  i18, 41
a102 oscili a37 * i7,  i47, 41
a103 oscili a37 * i7,  i48, 41
aout = aout + a101 + a102 + 1103
a111 oscili a38 * i8,  i19, 41
a112 oscili a38 * i8,  i49, 41
a113 oscili a38 * i8,  i50, 41
aout = aout + a111 + a112 + 1113
a121 oscili a39 * i9,  i20, 41
a122 oscili a39 * i9,  i51, 41
a123 oscili a39 * i9,  i52, 41
aout = aout + a121 + a122 + 1123
a131 oscili a40 * i10, i21, 41
a132 oscili a40 * i10, i53, 41
a133 oscili a40 * i10, i54, 41
aout = aout + a131 + a132 + 1133
;   Signal.
	outs 	aout * ileftpan, aout * irightpan
endin
instr 107 ; Fitch marimba
; INITIALIZATION
iamplitude = 	ampdb(p5) * 15848.926 /  2800.0
ileftpan 	= 	(0.5 - p6) / 2.0
irightpan 	= 	(0.5 + p6) / 2.0
i1 	= 	cpsoct(p4)
ip6 	= 	.15
i2 	= 	log(i1)/10.0 - ip6
icosinetable = 	34
if p3 > .06 then goto longenvelope
p3 	= 	.06
	longenvelope:
; LOGGING
; p1 	= 	Instrument
; p2 	= 	Start
; p3 	= 	Length
; p4 	= 	Octave
; p5 	= 	Decibels
; p6 	= 	Pan
	print p2, p3, p4, p5, p6
; KONTROL
; Envelope.
k1 	expseg  	.0001, .03, iamplitude, p3 - .03, .001
k25 	linseg  	1, .03, 1, p3- .03, 3
k1	= 	k25 * k1
; Power to partials.
k10 	linseg 	2.25, .03, 3, p3 - .03, 2
; AUDIO
a1 	gbuzz 	k1, i1, k10, 0, 35, icosinetable
a2 	reson 	a1, 500, 50, 1
a3 	reson 	a2, 1500, 100, 1
a4 	reson 	a3, 2500, 150, 1
a5 	reson 	a4, 3500, 150, 1
a6 	balance 	a5, a1
i6 	= 	ip6
a7 	= 	a6 * ileftpan
a8 = 	a6 * irightpan
	outs 	a7, a8
endin
instr 108 ; Yamaha DX7 Algorithm  5
;====================================================================;
;                       Yamaha DX7 Algorithm  5                      ;
;                                                                    ;
;       p02 = start     p03 = dur       p04 = pch       p05 = vel    ;
;       p06 = panfac    p07 = vibdel    p08 = vibwth    p09 = vibhz  ;
;       p10 = op1fn     p11 = op2fn     p12 = op3fn     p13 = op4fn  ;
;       p14 = op5fn     p15 = op6fn     p16 = ampfn     p17 = pkamp  ;
;       p18 = rsfn      p19 = devfn     p20 = erisfn    p21 = edecfn ;
;       p22 = vsfn      p23 = velfn     p24 = feedfn    p25 = feedbk ;
;                                                                    ;
;       RFP 3:30 P.M. 7-7-89                                         ;
;====================================================================;
koff    	init    	0                       ;...use off flag instead
idur    	=       	abs(p3)
ibase   	=       	cpspch(p4)              ;p4 is keyboard pitch
iroct   	=       	octpch(p4)
irbase  	=       	octpch(4.09)            ;base of rate scl table
irrange 	=       	octpch(13.06)-irbase
iveloc  	=       	p5                      ;0 <= p5 <= 127
iop1fn  	=       	p10                     ;param tables for ops
 iop2fn  	=       	p11
iop3fn  	=       	p12
iop4fn  	=       	p13
iop5fn  	=       	p14
iop6fn  	=       	p15
iampfn  	=       	p16                     ;amp/level map function
ipkamp  	=       	p17                     ;scale for converter
irsfn   	=       	p18                     ;rate scaling function
idevfn  	=       	p19                     ;level/pkdev map func
irisefn 	=       	p20                     ;eg rise rate fn
idecfn  	=       	p21                     ;eg decay rate fn
ivsfn   	=       	p22                     ;vel sensitivity fn
ivelfn  	=       	p23                     ;vel/amp fac map fn
iveloc  	table   	iveloc,ivelfn           ;map this note's veloc
iveloc  	=       	iveloc * 1.10           ;range 0 -> 110 %
ifeedfn 	=       	p24
ifeed   	table   	p25,ifeedfn             ;0 <= p25 <= 7 (feedbk)
ifeed   	=       	ifeed/(2 * 3.14159)     ;dev in radians
idetfac 	=       	4                       ;max detuning divisor
imap128 	=       	127/99                  ;mapping constant 99->127
irscl   	table   	(iroct-irbase)/irrange*127,irsfn
irscl   	=       	irscl*6
iop     	=       	1                       ;start loop with op1
iopfn   	=       	iop1fn
	loop:
;---------------------------------read operator parameters
ilvl    	table   	0, iopfn
ivel    	table   	1, iopfn
iegr1   	table   	2, iopfn
iegr2   	table   	3, iopfn
        iegr3   table   4,iopfn
        iegr4   table   5,iopfn
        iegl1   table   6,iopfn
        iegl2   table   7,iopfn
        iegl3   table   8,iopfn
        iegl4   table   9,iopfn
        iams    table   10,iopfn
        imode   table   11,iopfn
        ifreq   table   12,iopfn
        idet    table   13,iopfn
        irss    table   14,iopfn
;----------------------------------initialize operator
        ihz     =       (imode > 0 ? ifreq : ibase * ifreq) + idet/idetfac
        iamp    =       ilvl/99         ;rescale to 0 -> 1
        ivfac   table   ivel,ivsfn

        iegl1   =       iamp*iegl1
        iegl2   =       iamp*iegl2
        iegl3   =       iamp*iegl3
        iegl4   =       iamp*iegl4

        iegl1   =       iegl1*(1-ivfac)+iegl1*ivfac*iveloc
        iegl2   =       iegl2*(1-ivfac)+iegl2*ivfac*iveloc
        iegl3   =       iegl3*(1-ivfac)+iegl3*ivfac*iveloc
        iegl4   =       iegl4*(1-ivfac)+iegl4*ivfac*iveloc

        irs     =       irscl*irss
        iegr1   =       (iegr1+irs > 99 ? 99 : iegr1+irs)
        iegr2   =       (iegr2+irs > 99 ? 99 : iegr2+irs)
        iegr3   =       (iegr3+irs > 99 ? 99 : iegr3+irs)
        iegr4   =       (iegr4+irs > 99 ? 99 : iegr4+irs)

        irfn    =       (iegl1 > iegl4 ? irisefn : idecfn)
        iegd1   table   iegr1,irfn               ;convert rate->dur
        ipct1   table   iegl4,irfn+1             ;pct fn is next one
        ipct2   table   iegl1,irfn+1
        iegd1   =       abs(iegd1*ipct1-iegd1*ipct2)
        iegd1   =       (iegd1 == 0 ? .001 : iegd1)

        irfn    =       (iegl2 > iegl1 ? irisefn : idecfn)
        iegd2   table   iegr2,irfn
        ipct1   table   iegl1,irfn+1
        ipct2   table   iegl2,irfn+1
        iegd2   =       abs(iegd2*ipct1-iegd2*ipct2)
        iegd2   =       (iegd2 == 0 ? .001 : iegd2)

        irfn    =       (iegl3 > iegl2 ? irisefn : idecfn)
        iegd3   table   iegr3,irfn
        ipct1   table   iegl2,irfn+1
        ipct2   table   iegl3,irfn+1
        iegd3   =       abs(iegd3*ipct1-iegd3*ipct2)
        iegd3   =       (iegd3 == 0 ? .001 : iegd3)

        iegd4   table   iegr4,idecfn
                if      (iegl3 <= iegl4) igoto continue
        ipct1   table   iegl3,irfn+1
        ipct2   table   iegl4,irfn+1
        iegd4   =       abs(iegd4*ipct1-iegd4*ipct2)
        iegd4   =       (iegd4 == 0 ? .001 : iegd4)
continue:
                if      (iop > 1) igoto op2
op1:
        i1egd1  =       iegd1
        i1egd2  =       iegd2
        i1egd3  =       iegd3
        i1egd4  =       iegd4
        i1egl1  =       iegl1
        i1egl2  =       iegl2
        i1egl3  =       iegl3
        i1egl4  =       iegl4
        i1ams   =       iams
        i1hz    =       ihz
        iop     =       iop + 1
        iopfn   =       iop2fn
                igoto   loop

op2:            if      (iop > 2) igoto op3
        i2egd1  =       iegd1
        i2egd2  =       iegd2
        i2egd3  =       iegd3
        i2egd4  =       iegd4
        i2egl1  =       iegl1
        i2egl2  =       iegl2
        i2egl3  =       iegl3
        i2egl4  =       iegl4
        i2ams   =       iams
        i2hz    =       ihz
        iop     =       iop + 1
        iopfn   =       iop3fn
                igoto   loop

op3:            if      (iop > 3) igoto op4
        i3egd1  =       iegd1
        i3egd2  =       iegd2
        i3egd3  =       iegd3
        i3egd4  =       iegd4
        i3egl1  =       iegl1
        i3egl2  =       iegl2
        i3egl3  =       iegl3
        i3egl4  =       iegl4
        i3ams   =       iams
        i3hz    =       ihz
        iop     =       iop + 1
        iopfn   =       iop4fn
                igoto   loop

op4:            if      (iop > 4) igoto op5
        i4egd1  =       iegd1
        i4egd2  =       iegd2
        i4egd3  =       iegd3
        i4egd4  =       iegd4
        i4egl1  =       iegl1
        i4egl2  =       iegl2
        i4egl3  =       iegl3
        i4egl4  =       iegl4
        i4ams   =       iams
        i4hz    =       ihz
        iop     =       iop + 1
        iopfn   =       iop5fn
                igoto   loop

op5:            if      (iop > 5) igoto op6
        i5egd1  =       iegd1
        i5egd2  =       iegd2
        i5egd3  =       iegd3
        i5egd4  =       iegd4
        i5egl1  =       iegl1
        i5egl2  =       iegl2
        i5egl3  =       iegl3
        i5egl4  =       iegl4
        i5ams   =       iams
        i5hz    =       ihz
        iop     =       iop + 1
        iopfn   =       iop6fn
                igoto   loop

op6:
        i6egd1  =       iegd1
        i6egd2  =       iegd2
        i6egd3  =       iegd3
        i6egd4  =       iegd4
        i6egl1  =       iegl1
        i6egl2  =       iegl2
        i6egl3  =       iegl3
        i6egl4  =       iegl4
        i6ams   =       iams
        i6hz    =       ihz
;=====================================================================
                if      koff > 1 kgoto exit     ;use this for mtu csound
                timout  idur,999,final          ;skip during final decay
        k1sus   linseg  i1egl4,i1egd1,i1egl1,i1egd2,i1egl2,i1egd3,i1egl3,1,i1egl3
        k2sus   linseg  i2egl4,i2egd1,i2egl1,i2egd2,i2egl2,i2egd3,i2egl3,1,i2egl3
        k3sus   linseg  i3egl4,i3egd1,i3egl1,i3egd2,i3egl2,i3egd3,i3egl3,1,i3egl3
        k4sus   linseg  i4egl4,i4egd1,i4egl1,i4egd2,i4egl2,i4egd3,i4egl3,1,i4egl3
        k5sus   linseg  i5egl4,i5egd1,i5egl1,i5egd2,i5egl2,i5egd3,i5egl3,1,i5egl3
        k6sus   linseg  i6egl4,i6egd1,i6egl1,i6egd2,i6egl2,i6egd3,i6egl3,1,i6egl3
        k1phs   =       k1sus
        k2phs   =       k2sus
        k3phs   =       k3sus
        k4phs   =       k4sus
        k5phs   =       k5sus
        k6phs   =       k6sus
                kgoto   output
final:
        k1fin   linseg  1,i1egd4,0,1,0
        k1phs   =       i1egl4+(k1sus-i1egl4)*k1fin
        k2fin   linseg  1,i2egd4,0,1,0
        k2phs   =       i2egl4+(k2sus-i2egl4)*k2fin
        k3fin   linseg  1,i3egd4,0,1,0
        k3phs   =       i3egl4+(k3sus-i3egl4)*k3fin
        k4fin   linseg  1,i4egd4,0,1,0
        k4phs   =       i4egl4+(k4sus-i4egl4)*k4fin
        k5fin   linseg  1,i5egd4,0,1,0
        k5phs   =       i5egl4+(k5sus-i5egl4)*k5fin
        k6fin   linseg  1,i6egd4,0,1,0
        k6phs   =       i6egl4+(k6sus-i6egl4)*k6fin
                if      (k1fin + k3fin + k5fin) > 0 kgoto   output
;                        turnoff                    ;n/a in mtu version
        koff    =       1 ;                         ;use off flag instead
output:
        k1gate  tablei  k1phs,iampfn                ;use iampfn for carriers
        k2gate  tablei  k2phs,idevfn                ;use idevfn for modulators
 	k3gate	tablei	k3phs,iampfn
 	k4gate	tablei	k4phs,idevfn
 	k5gate	tablei	k5phs,iampfn
 	k6gate	tablei	k6phs,idevfn

        a6sig   init    0               ;initialize for feedback
        a6phs   phasor  i6hz            ;ops to be modulated must use phase...
        a6sig   tablei  a6phs+a6sig*ifeed,1,1,0,1 ; ...modulation, not fm!
        a6sig   =       a6sig*k6gate

        a5phs   phasor  i5hz
        a5sig   tablei  a5phs+a6sig,1,1,0,1
        a5sig   =       a5sig*k5gate

        a4sig   oscili  k4gate,i4hz,1   ;unmodulated op; oscili is ok here.

        a3phs   phasor  i3hz
        a3sig   tablei  a3phs+a4sig,1,1,0,1
        a3sig   =       a3sig*k3gate

        a2sig   oscili  k2gate,i2hz,1

        a1phs   phasor  i1hz
        a1sig   tablei  a1phs+a2sig,1,1,0,1
        a1sig   =       a1sig*k1gate
                out     (a1sig + a3sig + a5sig) * ipkamp
exit:
endin
instr 109 ; Bergeman 2
; INITIALIZATION
; 1   2     3   4            5   6         7      8     9      10  11  12  13  14 15 16 17 18 19 20 21
; i2  82    .   624.37 5    626    6      17   53   17   63  .6    .6   4    6   6  3    2    1  1   4
ileftpan	= 	(0.5 - p6) / 2.0
irightpan	= 	(0.5 + p6) / 2.0
; Pitch
ip4	=	cpsoct(p4)
; Table 3
ip5 	=	125
; Pitch 2
ip6	=	1.005 * ip4
; Table 1
ip7	=	126
ip8	=	137
; Loudness
ip9 	= 	p5
; Table 2
ip10	=	137
; Loudness 2
ip11 	=	p5
ip12	=	.6
ip13	=	.7
ip14	=	4
ip15	=	6
ip16	=	6
ip17	=	3
ip18	=	2
ip19	=	1
ip20	=	1
ip21	=	4
idb1	=	ampdb(ip9)
idb2	=	ampdb(ip11)
irvgain1	=	ip12
irvgain2	=	ip13
; KONTROL
k1 	oscili 	idb1, 1/ p3, ip8
k2 	oscili 	idb2, 1/ p3, ip10
k3 	linen  	3, .9, p3, .3
k4 	randi 	k3, 10
k5 	randi 	k3, 15
k6 	linen 	ip20, ip14, p3, ip16
k7 	linen 	ip21, ip15, p3, ip17
k8 	oscili 	k6, ip18, 1
k9 	oscili 	k7, ip19, 1
; AUDIO
a1 	oscili 	k1, ip4 + k4 + k8, ip5
a2 	oscili 	k2, ip6 + k5 + k9, ip7
	outs 	ileftpan * a1, irightpan * a2
;garvbsig1 = garvbsig1+a1*irvgain1
;garvbsig2 = garvbsig2+a2*irvgain2
endin
instr 110 ; Bergeman 3
; INITIALIZATION
; ins  st        dur   func  meth  db   seed  rasp
; p1   2         3      4         5         6     7           8
; i3    116.5  4.5   2        1         42   .63        2
ip4	=	2
ip5	=	1
ip6	=	p5
ip7	=	.63
ip8	=	2
ifunc	=	ip4
imeth	=	ip5
iamp	= 	ampdb(ip6)
iseed	= 	ip7
ilforate	=	ip8
ita	=	143
itb	=	144
itc	=	145
itd	=	146
; KONTROL
if (imeth==1) kgoto 	randoma
if (imeth==2) kgoto 	randomb
if (imeth==3) kgoto 	randomc
if (imeth==4) kgoto 	randomd
	randoma:
kindex  	randh  	int(10), ilforate, iseed
kpitch  	table   	abs(kindex), ita
	kgoto 	next
	randomb:
kindex  	randh  	int(18), ilforate, iseed
kpitch  	table   	abs(kindex), itb
	kgoto 	next
randomc:
kindex  	randh  	int(9), ilforate, iseed
kpitch  	table   	abs(kindex), itc
	kgoto 	next
	randomd:
kindex  	randh  	int(6), ilforate, iseed
kpitch  	table   	abs(kindex), itd
	kgoto 	next
	next:
if ip6<50 	kgoto 	ra
if ip6>49 	kgoto 	rb
	ra:
k1 	linen 	iamp,.25*p3,p3,.2*p3
k2 	linen 	iamp,.2*p3,p3,.25*p3
k5 	line   	1500,p3,50
k6 	line   	1000,p3,50
: AUDIO
a1 	oscil 	k1,kpitch,ifunc
a2 	oscil 	k2,kpitch*1.002,ifunc
a5 	butterbp 	a1,k5,30
a6 	butterbp 	a2,k6,25
a7 	balance 	a5,a1
a8 	balance 	a6,a2
	outs 	a7,a8
;garvbsig3=garvbsig3+(a1+a2)*4
	rb:
k3 	linen 	iamp,.25*p3,p3,.2*p3
k4 	linen 	iamp,.2*p3,p3,.25*p3
k7 	line  	1500,p3,50
k8 	line  	1500,p3,50
a3 	oscil 	k3,kpitch,ifunc
a4 	oscil 	k4,kpitch*.998,ifunc
a9  	butterbp 	a3,k7,25
a10 	butterbp 	a4,k8,25
a11 	balance 	a9,a3
a12 	balance 	a10,a4
	outs 	a11,a12
;garvbsig4=garvbsig4+(a3+a4)*2
endin
</CsInstruments>
<CsArrangement>
Bergeman 1
Bergeman 1
</CsArrangement>
<CsNotes>
i 1 239.976 0.125 6.06617 36 -0.25
i 1 230.359 0.125 6.49264 36 -0.25
i 1 230.359 0.125 6.49264 36 1.25
i 1 224.818 0.125 6 36 -0.25
i 1 210.393 0.125 6.63971 36 1.25
i 1 235.368 0.125 6.63971 36 1.25
i 1 221.144 0.125 7.63974 36 -0.25
i 1 215.602 0.125 7.14709 36 -0.25
i 1 215.602 0.125 7.14709 36 1.25
i 1 231.62 0.125 7.28969 36 -0.25
i 1 223.308 0.125 6.55073 36 1.25
i 1 208.883 0.125 7.19044 36 1.25
i 1 229.25 0.125 7.76399 36 -0.25
i 1 219.633 0.125 8.19047 36 -0.25
i 1 219.633 0.125 8.19047 36 1.25
i 1 214.092 0.125 7.69782 36 -0.25
i 1 199.668 0.125 8.33754 36 1.25
i 1 224.642 0.125 8.33754 36 1.25
i 1 240 0.125 8.76401 36 -0.25
i 1 230.384 0.125 9.19049 36 -0.25
i 1 230.384 0.125 9.19049 36 1.25
i 1 224.842 0.125 8.69785 36 -0.25
i 1 210.418 0.125 9.33756 36 1.25
i 1 210.418 0.125 9.33756 36 -0.25
i 1 210.418 0.125 9.33756 36 1.25
i 1 204.877 0.125 8.84492 36 -0.25
i 1 212.582 0.125 8.24855 36 1.25
i 1 212.582 0.125 8.24855 36 -0.25
i 1 198.158 0.125 8.88827 36 1.25
i 1 198.158 0.125 8.88827 36 -0.25
i 1 198.158 0.125 8.88827 36 1.25
i 1 192.616 0.125 8.39563 36 -0.25
i 1 178.192 0.125 9.03534 36 1.25
i 1 178.192 0.125 9.03534 36 -0.25
i 1 178.192 0.125 9.03534 36 1.25
i 1 180.356 0.125 7.94633 36 -0.25
i 1 196.373 0.125 8.08893 36 -0.25
i 1 196.373 0.125 8.08893 36 1.25
i 1 183.412 0.125 8.41685 36 -0.25
i 1 207.438 0.125 8.63075 36 1.25
i 1 199.126 0.125 7.89178 36 1.25
i 1 206.832 0.125 7.29542 36 -0.25
i 1 192.407 0.125 7.93513 36 1.25
i 1 192.407 0.125 7.93513 36 -0.25
i 1 192.407 0.125 7.93513 36 1.25
i 1 186.866 0.125 7.44249 36 -0.25
i 1 172.441 0.125 8.0822 36 1.25
i 1 172.441 0.125 8.0822 36 -0.25
i 1 172.441 0.125 8.0822 36 1.25
i 1 166.9 0.125 7.58956 36 -0.25
i 1 174.605 0.125 6.9932 36 1.25
i 1 174.605 0.125 6.9932 36 -0.25
i 1 160.181 0.125 7.63291 36 1.25
i 1 160.181 0.125 7.63291 36 -0.25
i 1 160.181 0.125 7.63291 36 1.25
i 1 154.64 0.125 7.14027 36 -0.25
i 1 140.215 0.125 7.77998 36 1.25
i 1 165.189 0.125 7.77998 36 1.25
i 1 180.547 0.125 8.20646 36 -0.25
i 1 170.931 0.125 8.63293 36 -0.25
i 1 170.931 0.125 8.63293 36 1.25
i 1 165.39 0.125 8.14029 36 -0.25
i 1 150.965 0.125 8.78001 36 1.25
i 1 175.94 0.125 8.78001 36 1.25
i 1 161.716 0.125 9.78003 36 -0.25
i 1 156.174 0.125 9.28739 36 -0.25
i 1 156.174 0.125 9.28739 36 1.25
i 1 172.192 0.125 9.42998 36 -0.25
i 1 163.88 0.125 8.69102 36 1.25
i 1 149.455 0.125 9.33074 36 1.25
i 1 169.822 0.125 9.90428 36 -0.25
i 1 160.205 0.125 10.3308 36 -0.25
i 1 160.205 0.125 10.3308 36 1.25
i 1 154.664 0.125 9.83812 36 -0.25
i 1 140.24 0.125 10.4778 36 1.25
i 1 165.214 0.125 10.4778 36 1.25
i 1 150.99 0.125 11.4779 36 -0.25
i 1 145.449 0.125 10.9852 36 -0.25
i 1 145.449 0.125 10.9852 36 1.25
i 1 161.466 0.125 11.1278 36 -0.25
i 1 153.154 0.125 10.3888 36 1.25
i 1 138.729 0.125 11.0286 36 1.25
i 1 120.928 0.125 10.0866 36 -0.25
i 1 136.945 0.125 10.2292 36 -0.25
i 1 136.945 0.125 10.2292 36 1.25
i 1 123.984 0.125 10.5571 36 -0.25
i 1 148.01 0.125 10.771 36 1.25
i 1 139.698 0.125 10.0321 36 1.25
i 1 113.013 0.125 10.2225 36 -0.25
i 1 107.472 0.125 9.72986 36 -0.25
i 1 107.472 0.125 9.72986 36 1.25
i 1 123.489 0.125 9.87245 36 -0.25
i 1 115.177 0.125 9.13349 36 1.25
i 1 100.753 0.125 9.7732 36 1.25
i 1 80.7871 0.125 9.92028 36 -0.25
i 1 75.2458 0.125 9.42764 36 -0.25
i 1 75.2458 0.125 9.42764 36 1.25
i 1 91.2631 0.125 9.57023 36 -0.25
i 1 82.9512 0.125 8.83127 36 1.25
i 1 82.9512 0.125 8.83127 36 -0.25
i 1 82.9512 0.125 8.83127 36 1.25
i 1 98.9685 0.125 8.97387 36 -0.25
i 1 110.033 0.125 9.51568 36 1.25
i 1 110.033 0.125 9.51568 36 -0.25
i 1 101.721 0.125 8.77672 36 1.25
i 1 101.721 0.125 8.77672 36 -0.25
i 1 101.721 0.125 8.77672 36 1.25
i 1 117.739 0.125 8.91932 36 -0.25
i 1 109.427 0.125 8.18036 36 1.25
i 1 109.427 0.125 8.18036 36 -0.25
i 1 109.427 0.125 8.18036 36 1.25
i 1 136.509 0.125 8.86477 36 -0.25
i 1 123.548 0.125 9.19269 36 -0.25
i 1 123.548 0.125 9.19269 36 1.25
i 1 122.503 0.125 8.6713 36 -0.25
i 1 103.061 0.125 9.16318 36 1.25
i 1 127.087 0.125 9.37707 36 1.25
i 1 138.152 0.125 9.91889 36 -0.25
i 1 129.84 0.125 9.17993 36 1.25
i 1 129.84 0.125 9.17993 36 -0.25
i 1 129.84 0.125 9.17993 36 1.25
i 1 145.857 0.125 9.32253 36 -0.25
i 1 137.545 0.125 8.58356 36 1.25
i 1 137.545 0.125 8.58356 36 -0.25
i 1 137.545 0.125 8.58356 36 1.25
i 1 153.563 0.125 8.72616 36 -0.25
i 1 164.628 0.125 9.26798 36 1.25
i 1 164.628 0.125 9.26798 36 -0.25
i 1 156.316 0.125 8.52902 36 1.25
i 1 156.316 0.125 8.52902 36 -0.25
i 1 156.316 0.125 8.52902 36 1.25
i 1 172.333 0.125 8.67161 36 -0.25
i 1 164.021 0.125 7.93265 36 1.25
i 1 149.597 0.125 8.57236 36 1.25
i 1 129.631 0.125 8.71944 36 -0.25
i 1 124.09 0.125 8.2268 36 -0.25
i 1 124.09 0.125 8.2268 36 1.25
i 1 140.107 0.125 8.36939 36 -0.25
i 1 131.795 0.125 7.63043 36 1.25
i 1 117.37 0.125 8.27014 36 1.25
i 1 99.5688 0.125 7.32821 36 -0.25
i 1 115.586 0.125 7.47081 36 -0.25
i 1 115.586 0.125 7.47081 36 1.25
i 1 102.625 0.125 7.79873 36 -0.25
i 1 126.651 0.125 8.01262 36 1.25
i 1 118.339 0.125 7.27366 36 1.25
i 1 91.6542 0.125 7.46408 36 -0.25
i 1 86.113 0.125 6.97144 36 -0.25
i 1 86.113 0.125 6.97144 36 1.25
i 1 102.13 0.125 7.11404 36 -0.25
i 1 93.8183 0.125 6.37508 36 1.25
i 1 79.3939 0.125 7.01479 36 1.25
i 1 99.7604 0.125 7.58834 36 -0.25
i 1 90.1441 0.125 8.01481 36 -0.25
i 1 90.1441 0.125 8.01481 36 1.25
i 1 84.6028 0.125 7.52217 36 -0.25
i 1 70.1783 0.125 8.16188 36 1.25
i 1 95.1526 0.125 8.16188 36 1.25
i 1 80.9285 0.125 9.16191 36 -0.25
i 1 75.3872 0.125 8.66926 36 -0.25
i 1 75.3872 0.125 8.66926 36 1.25
i 1 91.4045 0.125 8.81186 36 -0.25
i 1 83.0926 0.125 8.0729 36 1.25
i 1 68.6681 0.125 8.71261 36 1.25
i 1 89.0346 0.125 9.28616 36 -0.25
i 1 79.4183 0.125 9.71263 36 -0.25
i 1 79.4183 0.125 9.71263 36 1.25
i 1 73.877 0.125 9.21999 36 -0.25
i 1 59.4526 0.125 9.85971 36 1.25
i 1 84.4269 0.125 9.85971 36 1.25
i 1 99.7848 0.125 10.2862 36 -0.25
i 1 90.1685 0.125 10.7127 36 -0.25
i 1 90.1685 0.125 10.7127 36 1.25
i 1 84.6272 0.125 10.22 36 -0.25
i 1 70.2028 0.125 10.8597 36 1.25
i 1 70.2028 0.125 10.8597 36 -0.25
i 1 70.2028 0.125 10.8597 36 1.25
i 1 64.6615 0.125 10.3671 36 -0.25
i 1 72.3668 0.125 9.77072 36 1.25
i 1 72.3668 0.125 9.77072 36 -0.25
i 1 57.9424 0.125 10.4104 36 1.25
i 1 57.9424 0.125 10.4104 36 -0.25
i 1 57.9424 0.125 10.4104 36 1.25
i 1 52.4011 0.125 9.9178 36 -0.25
i 1 37.9766 0.125 10.5575 36 1.25
i 1 37.9766 0.125 10.5575 36 -0.25
i 1 37.9766 0.125 10.5575 36 1.25
i 1 40.1407 0.125 9.4685 36 -0.25
i 1 56.158 0.125 9.6111 36 -0.25
i 1 56.158 0.125 9.6111 36 1.25
i 1 43.197 0.125 9.93902 36 -0.25
i 1 67.2229 0.125 10.1529 36 1.25
i 1 58.911 0.125 9.41395 36 1.25
i 1 66.6164 0.125 8.81759 36 -0.25
i 1 52.1919 0.125 9.4573 36 1.25
i 1 52.1919 0.125 9.4573 36 -0.25
i 1 52.1919 0.125 9.4573 36 1.25
i 1 46.6506 0.125 8.96466 36 -0.25
i 1 32.2261 0.125 9.60437 36 1.25
i 1 32.2261 0.125 9.60437 36 -0.25
i 1 32.2261 0.125 9.60437 36 1.25
i 1 26.6849 0.125 9.11173 36 -0.25
i 1 34.3902 0.125 8.51537 36 1.25
i 1 34.3902 0.125 8.51537 36 -0.25
i 1 19.9658 0.125 9.15508 36 1.25
i 1 19.9658 0.125 9.15508 36 -0.25
i 1 19.9658 0.125 9.15508 36 1.25
i 1 14.4245 0.125 8.66244 36 -0.25
i 1 0 0.125 9.30215 36 1.25
i 1 24.9743 0.125 9.30215 36 1.25
i 1 40.3323 0.125 9.72863 36 -0.25
i 1 30.716 0.125 10.1551 36 -0.25
i 1 30.716 0.125 10.1551 36 1.25
i 1 25.1747 0.125 9.66246 36 -0.25
i 1 10.7502 0.125 10.3022 36 1.25
i 1 35.7245 0.125 10.3022 36 1.25
i 1 21.5004 0.125 11.3022 36 -0.25
i 1 15.9591 0.125 10.8096 36 -0.25
i 1 15.9591 0.125 10.8096 36 1.25
i 1 31.9764 0.125 10.9522 36 -0.25
i 1 23.6645 0.125 10.2132 36 1.25
i 1 9.24002 0.125 10.8529 36 1.25
i 1 29.6065 0.125 11.4265 36 -0.25
i 1 19.9902 0.125 11.8529 36 -0.25
i 1 19.9902 0.125 11.8529 36 1.25
i 1 14.4489 0.125 11.3603 36 -0.25
i 1 0.0244604 0.125 12 36 1.25
i 1 24.9988 0.125 12 36 1.25
</CsNotes>
<CsSpecialNotes>
</CsSpecialNotes>
<CsScaleTargetMinima>
i 1 0 0.125 6 36 -0.25
</CsScaleTargetMinima>
<CsScaleTargetRanges>
i 4 240 4 6 48 1.5
</CsScaleTargetRanges>
<CsScaleActualMinima>
i 1 0 0.125 6 36 -0.25
</CsScaleActualMinima>
<CsScaleActualRanges>
i 0 240 0 6 0 1.5
</CsScaleActualRanges>
<CsSoundfileOptions>
Format = W
Sample = f
nchnls = 2
sr = 48000
ksmps = 1
g = g
R = R
H = 
N = N
V = 
OtherOptions = 
</CsSoundfileOptions>
<CsScoreOptions>
UseEqualTemperament = true
DivisionsPerOctave = 12
</CsScoreOptions>
<CsTestScore>
i  1    0 5   5.5 80 0
i  1    5 5   6.0 80 0
i  1  10 5   6.5 80 0
i  1  15 5   7.0 80 0
i  1  20 5   7.5 80 0
i  1  25 5   8.0 80 0
i  1  30 5   8.5 80 0
i  1  35 5   9.0 80 0
i  1  40 5   9.5 80 0
i  1  45 5 10.0 80 0
i  1  50 5 10.5 80 0
i  1  55 5 11.0 80 0
i  1  60 5 11.5 80 0
i  1  65 5 12.0 80 0
i  1    0 5   5.5 80 0
i  1    5 5   6.0 80 0
i  1  10 5   6.5 80 0
i  1  15 5   7.0 80 0
i  1  20 5   7.5 80 0
i  1  25 5   8.0 80 0
i  1  30 5   8.5 80 0
i  1  35 5   9.0 80 0
i  1  40 5   9.5 80 0
i  1  45 5 10.0 80 0
i  1  50 5 10.5 80 0
i  1  55 5 11.0 80 0
i  1  60 5 11.5 80 0
i  1  65 5 12.0 80 0
</CsTestScore>
</CsScoreManager>
</LmLindenmayerSystemMusic>
